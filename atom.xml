<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sylvia</title>
  
  <subtitle>Viva La Vida</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://janvia.github.io/"/>
  <updated>2019-05-12T05:53:19.000Z</updated>
  <id>https://janvia.github.io/</id>
  
  <author>
    <name>sylvia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://janvia.github.io/2023/06/28/source/"/>
    <id>https://janvia.github.io/2023/06/28/source/</id>
    <published>2023-06-28T14:16:57.977Z</published>
    <updated>2019-05-12T05:53:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><blockquote><ul><li><p>Stanford Vision Lab - <a href="http://vision.stanford.edu" target="_blank" rel="noopener">http://vision.stanford.edu</a></p></li><li><p>CS 131 Computer Vision: Foundations and Applications - <a href="http://vision.stanford.edu/teaching/cs131_fall1617/index.html" target="_blank" rel="noopener">http://vision.stanford.edu/teaching/cs131_fall1617/index.html</a></p></li><li><p>CS231n: Convolutional Neural Networks for Visual Recognition - <a href="http://cs231n.stanford.edu" target="_blank" rel="noopener">http://cs231n.stanford.edu</a></p></li><li><p>CS231A: Computer Vision, From 3D Reconstruction to Recognition - <a href="http://web.stanford.edu/class/cs231a/" target="_blank" rel="noopener">http://web.stanford.edu/class/cs231a/</a></p></li><li><p>Computer Vision: A Modern Approach - <a href="http://cmuems.com/excap/readings/forsyth-ponce-computer-vision-a-modern-approach.pdf" target="_blank" rel="noopener">http://cmuems.com/excap/readings/forsyth-ponce-computer-vision-a-modern-approach.pdf</a></p></li><li><p>Computer Vision: Algorithms and Applications - <a href="http://szeliski.org/Book/drafts/SzeliskiBook_20100903_draft.pdf" target="_blank" rel="noopener">http://szeliski.org/Book/drafts/SzeliskiBook_20100903_draft.pdf</a></p></li><li><p>Computer Vision: Models, Learning, and Inference - <a href="http://www.computervisionmodels.com/" target="_blank" rel="noopener">http://www.computervisionmodels.com/</a></p></li></ul></blockquote><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><blockquote><ul><li><p>CS224n: Natural Language Processing with Deep Learning - <a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">http://web.stanford.edu/class/cs224n/</a></p></li><li><p>Natural Language Processing with Python - <a href="http://www.nltk.org/book/（视频：https://www.youtube.com/playlist?list=PLQVvvaa0QuDf2JswnfiGkliBInZnIC4HL）" target="_blank" rel="noopener">http://www.nltk.org/book/（视频：https://www.youtube.com/playlist?list=PLQVvvaa0QuDf2JswnfiGkliBInZnIC4HL）</a></p></li><li><p>《自然语言处理综论》英文版 - <a href="https://web.stanford.edu/~jurafsky/slp3/" target="_blank" rel="noopener">https://web.stanford.edu/~jurafsky/slp3/</a></p></li><li><p>《统计自然语言处理》</p></li><li><p>《Python 自然语言处理》</p></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机视觉&quot;&gt;&lt;a href=&quot;#计算机视觉&quot; class=&quot;headerlink&quot; title=&quot;计算机视觉&quot;&gt;&lt;/a&gt;计算机视觉&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Stanford Vision Lab - &lt;a href=&quot;http:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sacred</title>
    <link href="https://janvia.github.io/2022/08/20/sacred/"/>
    <id>https://janvia.github.io/2022/08/20/sacred/</id>
    <published>2022-08-20T08:55:59.000Z</published>
    <updated>2023-07-26T01:14:43.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Sacred-安装"><a href="#Sacred-安装" class="headerlink" title="Sacred 安装"></a>Sacred 安装</h3><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 主角</span><br><span class="line">pip install sacred</span><br><span class="line"></span><br><span class="line"># 用于数据库连接</span><br><span class="line">pip install numpy pymongo</span><br></pre></td></tr></table></figure><h4 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h4><p>MongoDB 是一个数据库管理系统，这里用作 Sacred 的存储后端。</p><p>在 ubuntu 上的 MongoDB 安装可以参考 <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="noopener">Install MongoDB Community Edition on Ubuntu</a>，其他系统也可以在该网站上找到对应的安装方式。</p><h4 id="mongoDB-常用命令"><a href="#mongoDB-常用命令" class="headerlink" title="mongoDB 常用命令"></a>mongoDB 常用命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">sudo service mongod start</span><br><span class="line"></span><br><span class="line"># 停止</span><br><span class="line">sudo service mongod stop</span><br><span class="line"></span><br><span class="line"># 重启</span><br><span class="line">sudo service mongod restart</span><br><span class="line"></span><br><span class="line"># 进入MongoDB</span><br><span class="line">mongosh</span><br></pre></td></tr></table></figure><p>创建一个名为 sacred 的数据库，用作 sacred 工具的后端存储：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入MongoDB</span><br><span class="line">mongosh</span><br><span class="line"></span><br><span class="line"># 创建sacred数据库。use命令切换数据库，没有该数据就会自动创建一个</span><br><span class="line">use sacred</span><br></pre></td></tr></table></figure><h2 id="Omniboard安装"><a href="#Omniboard安装" class="headerlink" title="Omniboard安装"></a>Omniboard安装</h2><p>在 Ubuntu 机器上安装版本≥v8 的 Node.js，系统默认 apt 安装的版本不够，需要手动安装</p><h4 id="安装node-js和npm"><a href="#安装node-js和npm" class="headerlink" title="安装node.js和npm"></a>安装node.js和npm</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure><p>新版本安装(hexo不支持)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - &amp;&amp;\</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>nvm指定版本安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains4 wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | proxychains4 bash</span><br><span class="line">source ~/.zshrc</span><br><span class="line">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node/</span><br><span class="line">export NVM_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs</span><br><span class="line">nvm install 12.16.2</span><br><span class="line">nvm use 12.16.2</span><br></pre></td></tr></table></figure><p>换源</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g nrm</span><br><span class="line">nrm ls</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 4. 测试安装版本信息</span><br><span class="line">node -v</span><br><span class="line">npm version</span><br><span class="line">npx -v</span><br></pre></td></tr></table></figure><p>第二步，npm 安装 omniboard</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g omniboard</span><br></pre></td></tr></table></figure><p>第三步，开启 omniboard 服务。平时也是用该命令开启 omniboard 可视化前端</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启用法</span><br><span class="line">omniboard -m hostname:port:database</span><br><span class="line"></span><br><span class="line"># 默认情况下如下，其中27017是MongoDB的端口</span><br><span class="line">omniboard -m localhost:27017:sacred</span><br></pre></td></tr></table></figure><p>第四步，打开 <a href="http://localhost:9000/" target="_blank" rel="noopener">http://localhost:9000</a> 来查看前端，并进行管理。</p><p>添加远程查看</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -L 9000:127.0.0.1:9000 -p 10102 root@192.168.25.110</span><br></pre></td></tr></table></figure><h1 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h1><p>使用 yunjey 的一个 pytorch 教程作为演示，代码是演示用 pytorch 实现基于 CNN 的 MINIST 手写数字识别。</p><p>根据 Sacred 文档稍作修改，就可以演示如何进行实验的记录。</p><p>更多用法请去看 Sacred 文档：<a href="https://sacred.readthedocs.io/en/latest/" target="_blank" rel="noopener">Welcome to Sacred’s documentation!</a>。内容超丰富，功能超级多。</p><p>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sacred import Experiment</span><br><span class="line">from sacred.observers import MongoObserver</span><br><span class="line">from sacred.utils import apply_backspaces_and_linefeeds</span><br><span class="line"></span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import torchvision</span><br><span class="line">import torchvision.transforms as transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ex = Experiment(&quot;mnist_cnn&quot;)</span><br><span class="line">ex.observers.append(MongoObserver.create(url=&apos;localhost:27017&apos;,</span><br><span class="line">                                         db_name=&apos;sacred&apos;))</span><br><span class="line">ex.captured_out_filter = apply_backspaces_and_linefeeds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 超参数设置</span><br><span class="line">@ex.config</span><br><span class="line">def myconfig():</span><br><span class="line">    # Device configuration</span><br><span class="line">    device = torch.device(&apos;cuda:0&apos; if torch.cuda.is_available() else &apos;cpu&apos;)</span><br><span class="line"></span><br><span class="line">    # Hyper parameters</span><br><span class="line">    num_epochs = 5</span><br><span class="line">    num_classes = 10</span><br><span class="line">    batch_size = 100</span><br><span class="line">    learning_rate = 0.001</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Convolutional neural network (two convolutional layers)</span><br><span class="line">class ConvNet(nn.Module):</span><br><span class="line">    def __init__(self, num_classes=10):</span><br><span class="line">        super(ConvNet, self).__init__()</span><br><span class="line">        self.layer1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(1, 16, kernel_size=5, stride=1, padding=2),</span><br><span class="line">            nn.BatchNorm2d(16),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(kernel_size=2, stride=2))</span><br><span class="line">        self.layer2 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(16, 32, kernel_size=5, stride=1, padding=2),</span><br><span class="line">            nn.BatchNorm2d(32),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(kernel_size=2, stride=2))</span><br><span class="line">        self.fc = nn.Linear(7 * 7 * 32, num_classes)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        out = self.layer1(x)</span><br><span class="line">        out = self.layer2(out)</span><br><span class="line">        out = out.reshape(out.size(0), -1)</span><br><span class="line">        out = self.fc(out)</span><br><span class="line">        return out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># notice how we can access the message here by taking it as an argument</span><br><span class="line">@ex.automain</span><br><span class="line">def main(device,num_epochs,num_classes,batch_size,learning_rate ):</span><br><span class="line">    # MNIST dataset</span><br><span class="line">    train_dataset = torchvision.datasets.MNIST(root=&apos;/home/ubuntu/Datasets/MINIST/&apos;,</span><br><span class="line">                                               train=True,</span><br><span class="line">                                               transform=transforms.ToTensor(),</span><br><span class="line">                                               download=True)</span><br><span class="line"></span><br><span class="line">    test_dataset = torchvision.datasets.MNIST(root=&apos;/home/ubuntu/Datasets/MINIST/&apos;,</span><br><span class="line">                                              train=False,</span><br><span class="line">                                              transform=transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">    # Data loader</span><br><span class="line">    train_loader = torch.utils.data.DataLoader(dataset=train_dataset,</span><br><span class="line">                                               batch_size=batch_size,</span><br><span class="line">                                               shuffle=True)</span><br><span class="line"></span><br><span class="line">    test_loader = torch.utils.data.DataLoader(dataset=test_dataset,</span><br><span class="line">                                              batch_size=batch_size,</span><br><span class="line">                                              shuffle=False)</span><br><span class="line"></span><br><span class="line">    model = ConvNet(num_classes).to(device)</span><br><span class="line"></span><br><span class="line">    # Loss and optimizer</span><br><span class="line">    criterion = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line">    # Train the model</span><br><span class="line">    total_step = len(train_loader)</span><br><span class="line">    for epoch in range(num_epochs):</span><br><span class="line">        for i, (images, labels) in enumerate(train_loader):</span><br><span class="line">            images = images.to(device)</span><br><span class="line">            labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">            # Forward pass</span><br><span class="line">            outputs = model(images)</span><br><span class="line">            loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">            # Backward and optimize</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            if (i + 1) % 100 == 0:</span><br><span class="line">                print(&apos;Epoch [&#123;&#125;/&#123;&#125;], Step [&#123;&#125;/&#123;&#125;], Loss: &#123;:.4f&#125;&apos;</span><br><span class="line">                      .format(epoch + 1, num_epochs, i + 1, total_step, loss.item()))</span><br><span class="line"></span><br><span class="line">    # Test the model</span><br><span class="line">    model.eval()  # eval mode (batchnorm uses moving mean/variance instead of mini-batch mean/variance)</span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        correct = 0</span><br><span class="line">        total = 0</span><br><span class="line">        for images, labels in test_loader:</span><br><span class="line">            images = images.to(device)</span><br><span class="line">            labels = labels.to(device)</span><br><span class="line">            outputs = model(images)</span><br><span class="line">            _, predicted = torch.max(outputs.data, 1)</span><br><span class="line">            total += labels.size(0)</span><br><span class="line">            correct += (predicted == labels).sum().item()</span><br><span class="line"></span><br><span class="line">        print(&apos;Test Accuracy of the model on the 10000 test images: &#123;&#125; %&apos;.format(100 * correct / total))</span><br><span class="line"></span><br><span class="line">    # Save the model checkpoint</span><br><span class="line">    torch.save(model.state_dict(), &apos;model.ckpt&apos;)</span><br></pre></td></tr></table></figure><p>执行完该程序后，可以打开 omniboard 前端 <a href="http://localhost:9000/" target="_blank" rel="noopener">http://localhost:9000</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Sacred-安装&quot;&gt;&lt;a href=&quot;#Sacred-安装&quot; class=&quot;headerlink&quot; title=&quot;Sacred 安装&quot;&gt;&lt;/a&gt;Sacred 安装&lt;/h3&gt;&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="工具" scheme="https://janvia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="sacred" scheme="https://janvia.github.io/tags/sacred/"/>
    
  </entry>
  
  <entry>
    <title>wsl</title>
    <link href="https://janvia.github.io/2022/08/20/wsl/"/>
    <id>https://janvia.github.io/2022/08/20/wsl/</id>
    <published>2022-08-20T08:55:59.000Z</published>
    <updated>2022-08-28T12:54:24.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="wsl"><a href="#wsl" class="headerlink" title="wsl"></a>wsl</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsl -l -o #查看版本</span><br><span class="line">wsl --install -d Ubuntu20.04</span><br><span class="line">wsl --install -d Ubuntu18.04</span><br><span class="line">wsl --shutdown</span><br><span class="line">wsl --set-version Ubuntu-18.04 2</span><br><span class="line">wsl --set-version Ubuntu-20.04 1</span><br></pre></td></tr></table></figure><h5 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h5><p>1.设置防火墙 ,不勾选wsl</p><p>2.设置代理软件allow alan</p><p>3.安装配置proxychains4,见配置proxychains4</p><p>​    对于wsl2,配置的地址需要是ipconfig的地址172.xx.xx.1</p><h5 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h5><p>将wsl 安装在其他盘</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsl --export Ubuntu-20.04 d:\wsl-ubuntu20.04.tar #导出</span><br><span class="line">wsl --unregister Ubuntu-20.04 #注销</span><br><span class="line">#重新导入</span><br><span class="line">wsl --import Ubuntu-20.04 d:\wsl-ubuntu20.04 d:\wsl-ubuntu20.04.tar --version 2</span><br><span class="line">ubuntu2004 config --default-user USERNAME #设置usr</span><br><span class="line">del d:\wsl-ubuntu20.04.tar#删除包</span><br></pre></td></tr></table></figure><h5 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h5><p>查看/etc/resolv.conf</p><p>如果出现网络错误,nameserver为红色</p><p>1.在/etc/wsl.conf中加入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[network]</span><br><span class="line">generateResolvConf = false</span><br></pre></td></tr></table></figure><p>2.PowerShell重启WSL</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>3.修改/etc/resolv.conf,去掉发红的nameserver</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nameserver 223.5.5.5</span><br><span class="line">nameserver 223.6.6.6</span><br></pre></td></tr></table></figure><h4 id="网络故障修复"><a href="#网络故障修复" class="headerlink" title="网络故障修复"></a>网络故障修复</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsl --shutdown</span><br><span class="line">netsh winsock reset</span><br><span class="line">netsh int ip reset all</span><br><span class="line">netsh winhttp reset proxy</span><br><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><p>然后重启</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;wsl&quot;&gt;&lt;a href=&quot;#wsl&quot; class=&quot;headerlink&quot; title=&quot;wsl&quot;&gt;&lt;/a&gt;wsl&lt;/h3&gt;&lt;h5 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="linux" scheme="https://janvia.github.io/categories/linux/"/>
    
    
      <category term="wsl" scheme="https://janvia.github.io/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg常用命令</title>
    <link href="https://janvia.github.io/2022/08/18/FFmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://janvia.github.io/2022/08/18/FFmpeg常用命令/</id>
    <published>2022-08-18T08:44:41.000Z</published>
    <updated>2022-08-19T15:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="FFmpeg常用命令"><a href="#FFmpeg常用命令" class="headerlink" title="FFmpeg常用命令"></a>FFmpeg常用命令</h3><h6 id="调整音量"><a href="#调整音量" class="headerlink" title="调整音量"></a>调整音量</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &#123;in_file&#125; -af &apos;volume=0.5&apos; &#123;out_file&#125;</span><br></pre></td></tr></table></figure><h6 id="截取音频"><a href="#截取音频" class="headerlink" title="截取音频"></a>截取音频</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -v 1 -y -i &#123;in_file&#125; -ss &#123;start&#125; -t 2 &#123;out_file&#125;</span><br></pre></td></tr></table></figure><p>-ss 开始时间，单位s</p><p>-t 截取时间，单位s</p><h6 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h6><p>wav 转 pcm</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -v 1 -y -i &#123;in_file&#125; -f s16le -ar 16000 -ac 1 -acodec pcm_s16le &#123;out_file&#125;</span><br></pre></td></tr></table></figure><p>pcm 转 wav</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -v 1 -y -f f32le -ar 48833 -i &#123;in_file&#125; -ar 16000 -ac 1 &#123;out_file&#125;</span><br></pre></td></tr></table></figure><p>int16:   s16le  float32: f32le</p><h6 id="resample"><a href="#resample" class="headerlink" title="resample"></a>resample</h6><p>pcm</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -v 1 -y -f s16le -i &#123;&#125; -f s16le -ar 16000 -ac 1 -acodec pcm_s16le &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;FFmpeg常用命令&quot;&gt;&lt;a href=&quot;#FFmpeg常用命令&quot; class=&quot;headerlink&quot; title=&quot;FFmpeg常用命令&quot;&gt;&lt;/a&gt;FFmpeg常用命令&lt;/h3&gt;&lt;h6 id=&quot;调整音量&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="工具" scheme="https://janvia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="ffmpeg" scheme="https://janvia.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib补充</title>
    <link href="https://janvia.github.io/2022/08/18/matplotlib%E8%A1%A5%E5%85%85/"/>
    <id>https://janvia.github.io/2022/08/18/matplotlib补充/</id>
    <published>2022-08-18T08:44:41.000Z</published>
    <updated>2022-08-19T15:21:29.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="防止中文乱码"><a href="#防止中文乱码" class="headerlink" title="防止中文乱码"></a>防止中文乱码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib as mpl</span><br><span class="line">mpl.rcParams[&apos;font.sans-serif&apos;] = [u&apos;simHei&apos;]</span><br><span class="line">mpl.rcParams[&apos;axes.unicode_minus&apos;] = False</span><br></pre></td></tr></table></figure><h4 id="调整子图布局"><a href="#调整子图布局" class="headerlink" title="调整子图布局"></a>调整子图布局</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.tight_layout()</span><br></pre></td></tr></table></figure><h4 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axis(‘off’)#：关闭轴线和标签。</span><br><span class="line">axis(‘equal’)#：使x轴与y轴保持与屏幕一致的高宽比（横纵比）。</span><br><span class="line">axis(‘tight’)#：使x轴与y轴限制在有数据的区域。</span><br><span class="line">axis(‘square’)#：使x轴与y轴坐标一致。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;防止中文乱码&quot;&gt;&lt;a href=&quot;#防止中文乱码&quot; class=&quot;headerlink&quot; title=&quot;防止中文乱码&quot;&gt;&lt;/a&gt;防止中文乱码&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="工具" scheme="https://janvia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="matplotlib" scheme="https://janvia.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>linux系统代理</title>
    <link href="https://janvia.github.io/2022/08/18/linux%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86/"/>
    <id>https://janvia.github.io/2022/08/18/linux系统代理/</id>
    <published>2022-08-18T08:44:41.000Z</published>
    <updated>2022-08-19T15:19:54.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="linux系统代理"><a href="#linux系统代理" class="headerlink" title="linux系统代理"></a>linux系统代理</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install proxychains4</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line"># add proxy here ...</span><br><span class="line"># meanwile</span><br><span class="line"># defaults set to &quot;tor&quot;</span><br><span class="line">#socks4    127.0.0.1 9050</span><br><span class="line"></span><br><span class="line"># example</span><br><span class="line">socks5  127.0.0.1 8888</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;linux系统代理&quot;&gt;&lt;a href=&quot;#linux系统代理&quot; class=&quot;headerlink&quot; title=&quot;linux系统代理&quot;&gt;&lt;/a&gt;linux系统代理&lt;/h3&gt;&lt;h5 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; c
      
    
    </summary>
    
      <category term="工具" scheme="https://janvia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="代理" scheme="https://janvia.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="https://janvia.github.io/2022/08/18/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://janvia.github.io/2022/08/18/常用命令/</id>
    <published>2022-08-18T08:44:41.000Z</published>
    <updated>2022-08-19T15:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>所有权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod -R 777 test_out</span><br></pre></td></tr></table></figure><p>可以用来查看分区的文件系统</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df -T</span><br></pre></td></tr></table></figure><p>显示目前所有文件系统的可用空间及使用情形</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -h --max-depth=1 /home</span><br></pre></td></tr></table></figure><p>命令行代理</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains4 curl www.google.com</span><br></pre></td></tr></table></figure><p>服务器拷贝</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsync -avzP -e &apos;ssh -p 10101&apos; dcase2020_task2/</span><br><span class="line">root@192.168.25.110:/data/dcase/dcase2020_task2</span><br></pre></td></tr></table></figure><p>打开scared</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">omniboard -m 192.168.2.111:27017:sacred</span><br></pre></td></tr></table></figure><p>自动安装依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install aptitude</span><br><span class="line">sudo aptitude install xxx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;p&gt;所有权限&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="工具" scheme="https://janvia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux命令" scheme="https://janvia.github.io/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>R配置jupyter</title>
    <link href="https://janvia.github.io/2022/08/07/R%E9%85%8D%E7%BD%AEjupyter/"/>
    <id>https://janvia.github.io/2022/08/07/R配置jupyter/</id>
    <published>2022-08-07T08:44:41.000Z</published>
    <updated>2022-08-09T12:50:06.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>官网：<a href="https://www.anaconda.com/" target="_blank" rel="noopener">https://www.anaconda.com/</a><br>最新版本下载地址：<a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">https://www.anaconda.com/download/</a><br>历史版本：<a href="https://repo.anaconda.com/archive/" target="_blank" rel="noopener">https://repo.anaconda.com/archive/</a></p><h3 id="Anaconda的安装"><a href="#Anaconda的安装" class="headerlink" title="Anaconda的安装"></a>Anaconda的安装</h3><p>进入文件所在路径<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash Anaconda3-4.4.0-Linux-x86_64.sh (下载的对应的文件名)</span><br></pre></td></tr></table></figure></p><h3 id="conda的环境管理"><a href="#conda的环境管理" class="headerlink" title="conda的环境管理"></a>conda的环境管理</h3><p>比如创建名为R4的R环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create --name R4 r-base -c conda-forge</span><br></pre></td></tr></table></figure></p><p>激活R环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate R4</span><br></pre></td></tr></table></figure></p><p>测试环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R</span><br></pre></td></tr></table></figure></p><p>退出R环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">q()</span><br></pre></td></tr></table></figure></p><p>删除虚拟环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda remove --name R4 --all</span><br></pre></td></tr></table></figure></p><h3 id="jupter-notebook添加R环境"><a href="#jupter-notebook添加R环境" class="headerlink" title="jupter notebook添加R环境"></a>jupter notebook添加R环境</h3><p>首先安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install jupyter</span><br></pre></td></tr></table></figure></p><p>进入R环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R</span><br></pre></td></tr></table></figure></p><p>安装和配置kernal<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">install.packages(&apos;IRkernel&apos;)</span><br><span class="line"></span><br><span class="line">IRkernel::installspec()</span><br></pre></td></tr></table></figure></p><h3 id="启动jupter-notebook"><a href="#启动jupter-notebook" class="headerlink" title="启动jupter notebook"></a>启动jupter notebook</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="R更换下载源"><a href="#R更换下载源" class="headerlink" title="R更换下载源"></a>R更换下载源</h3><p>查看和配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">options(&quot;repos&quot;)</span><br><span class="line">options(repos=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;),</span><br><span class="line">options(&quot;repos&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="R2jags的安装（windows）"><a href="#R2jags的安装（windows）" class="headerlink" title="R2jags的安装（windows）"></a>R2jags的安装（windows）</h3><p>首先在 <a href="http://mcmc-jags.sourceforge.net/" target="_blank" rel="noopener">http://mcmc-jags.sourceforge.net/</a> 下载JAGS ， 注意版本问题，由于rjags依赖JAGS，rjags未必支持最新版，可下载早期稳定版本。这里下载4.3.0版本，然后安装</p><p>手动配置库目录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sys.setenv(JAGS_HOME=&quot;C:/Program Files/JAGS/JAGS-4.3.0&quot;)</span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">install.packages(&apos;R2jags&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h3&gt;&lt;p&gt;官网：&lt;a href=&quot;https://www.anaconda.com/&quot; targe
      
    
    </summary>
    
      <category term="工具" scheme="https://janvia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="R" scheme="https://janvia.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>JNA</title>
    <link href="https://janvia.github.io/2019/06/07/JNA/"/>
    <id>https://janvia.github.io/2019/06/07/JNA/</id>
    <published>2019-06-07T04:53:47.000Z</published>
    <updated>2019-06-07T05:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="step1-生成动态库"><a href="#step1-生成动态库" class="headerlink" title="step1:生成动态库"></a>step1:生成动态库</h3><p>1、编写头文件 #hellworld.h</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void test();</span><br></pre></td></tr></table></figure><p>2、编写实现文件 #helloworld.c</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;  </span><br><span class="line">void test()&#123;  </span><br><span class="line">printf(&quot;helloworld\n&quot;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编译生成动态库，文件名:libhello.so</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -fpic -shared -o libhello.so helloworld.c</span><br></pre></td></tr></table></figure><p> 文件libhello.so生成。</p><h3 id="step2-添加maven配置"><a href="#step2-添加maven配置" class="headerlink" title="step2:添加maven配置"></a>step2:添加maven配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">     &lt;groupId&gt;com.sun.jna&lt;/groupId&gt;  </span><br><span class="line">     &lt;artifactId&gt;jna&lt;/artifactId&gt;  </span><br><span class="line">     &lt;version&gt;3.0.9&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="step3-编写测试类"><a href="#step3-编写测试类" class="headerlink" title="step3:编写测试类"></a>step3:编写测试类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.sun.jna.Library;  </span><br><span class="line">import com.sun.jna.Native;  </span><br><span class="line">  </span><br><span class="line">public class JnaTest &#123;  </span><br><span class="line">  </span><br><span class="line">//继承Library，用于加载库文件  </span><br><span class="line">public interface Clibrary extends Library&#123;  </span><br><span class="line">//加载libhello.so链接库  </span><br><span class="line">Clibrary INSTANTCE = (Clibrary) Native.loadLibrary(&quot;hello&quot;, Clibrary.class);  </span><br><span class="line">  </span><br><span class="line">//此方法为链接库中的方法  </span><br><span class="line">void test();  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public static void main(String[] args) &#123;  </span><br><span class="line">//调用  </span><br><span class="line">Clibrary.INSTANTCE.test();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step4-解决路径问题"><a href="#step4-解决路径问题" class="headerlink" title="step4:解决路径问题"></a>step4:解决路径问题</h3><p>比如复制libtest.so到公共库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;step1-生成动态库&quot;&gt;&lt;a href=&quot;#step1-生成动态库&quot; class=&quot;headerlink&quot; title=&quot;step1:生成动态库&quot;&gt;&lt;/a&gt;step1:生成动态库&lt;/h3&gt;&lt;p&gt;1、编写头文件 #hellworld.h&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="java调用C" scheme="https://janvia.github.io/categories/java%E8%B0%83%E7%94%A8C/"/>
    
    
      <category term="java调用C" scheme="https://janvia.github.io/tags/java%E8%B0%83%E7%94%A8C/"/>
    
  </entry>
  
  <entry>
    <title>jni</title>
    <link href="https://janvia.github.io/2019/06/03/jni/"/>
    <id>https://janvia.github.io/2019/06/03/jni/</id>
    <published>2019-06-03T13:27:30.000Z</published>
    <updated>2019-06-03T14:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="STEP1-编写java调用文件"><a href="#STEP1-编写java调用文件" class="headerlink" title="STEP1  编写java调用文件"></a>STEP1  编写java调用文件</h3><p>J2C.java</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.management.ManagementFactory;</span><br><span class="line">import java.lang.management.RuntimeMXBean;</span><br><span class="line"></span><br><span class="line">public class J2C</span><br><span class="line">&#123; </span><br><span class="line">     static </span><br><span class="line">     &#123; </span><br><span class="line">          try&#123; </span><br><span class="line">               // 此处即为本地方法所在链接库名</span><br><span class="line">               System.loadLibrary(&quot;j2c&quot;);</span><br><span class="line">          &#125; catch(UnsatisfiedLinkError e) </span><br><span class="line">          &#123; </span><br><span class="line">               System.err.println( &quot;Cannot load J2C library:\n &quot; + </span><br><span class="line">               e.toString() ); </span><br><span class="line">          &#125; </span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     //声明的本地方法</span><br><span class="line">     public static native int write2proc(int pid);</span><br><span class="line"></span><br><span class="line">     public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">          //获取本进程(即主线程)的pid</span><br><span class="line">          final RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();</span><br><span class="line">          final String info = runtime.getName();</span><br><span class="line">          final int index = info.indexOf(&quot;@&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          if (index != -1) &#123;</span><br><span class="line">               final int pid = Integer.parseInt(info.substring(0, index));</span><br><span class="line">               System.out.println(info);</span><br><span class="line">               System.out.println(pid);</span><br><span class="line"></span><br><span class="line">               write2proc(pid);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          try&#123;</span><br><span class="line">               Thread.sleep(8000);</span><br><span class="line">          &#125; catch(InterruptedException e)&#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step2-生成J2C-h"><a href="#Step2-生成J2C-h" class="headerlink" title="Step2 生成J2C.h"></a>Step2 生成J2C.h</h3><p>bash: javac -h ./ J2C.java</p><p>以下内容为自动生成：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* DO NOT EDIT THIS FILE - it is machine generated */</span><br><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">/* Header for class J2C */</span><br><span class="line"></span><br><span class="line">#ifndef _Included_J2C</span><br><span class="line">#define _Included_J2C</span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line">/*</span><br><span class="line"> * Class:     J2C</span><br><span class="line"> * Method:    write2proc</span><br><span class="line"> * Signature: (I)I</span><br><span class="line"> */</span><br><span class="line">JNIEXPORT jint JNICALL Java_J2C_write2proc</span><br><span class="line">  (JNIEnv *, jclass, jint);</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="Step3-编写J2C-c"><a href="#Step3-编写J2C-c" class="headerlink" title="Step3 编写J2C.c"></a>Step3 编写J2C.c</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;J2C.h&quot;</span><br><span class="line"></span><br><span class="line">JNIEXPORT int JNICALL Java_J2C_write2proc(JNIEnv * env, jobject arg, jint pid) </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">     printf(&quot;current pid is %d\n&quot;, pid);</span><br><span class="line"></span><br><span class="line">     return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step4-生成J2C-so"><a href="#Step4-生成J2C-so" class="headerlink" title="Step4 生成J2C.so"></a>Step4 生成J2C.so</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash: gcc J2C.c -fPIC -shared -o libJ2C.so</span><br></pre></td></tr></table></figure><p>利用gcc、g++编译源文件找不到jni.h头文件:</p><p>可以在编译时利用-I选项指定jni.h头文件所在目录：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc J2C.c -fPIC -shared -o libJ2C.so -I /usr/java/jdk-12.0.1/include/ -I /usr/java/jdk-12.0.1/include/linux/</span><br></pre></td></tr></table></figure><p>注意：cmake make 找不到jni.h的情况，可以将文件复制到公共库/usr/include/</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;STEP1-编写java调用文件&quot;&gt;&lt;a href=&quot;#STEP1-编写java调用文件&quot; class=&quot;headerlink&quot; title=&quot;STEP1  编写java调用文件&quot;&gt;&lt;/a&gt;STEP1  编写java调用文件&lt;/h3&gt;&lt;p&gt;J2C.java&lt;/p&gt;
      
    
    </summary>
    
      <category term="java调用C" scheme="https://janvia.github.io/categories/java%E8%B0%83%E7%94%A8C/"/>
    
    
      <category term="java调用C" scheme="https://janvia.github.io/tags/java%E8%B0%83%E7%94%A8C/"/>
    
  </entry>
  
  <entry>
    <title>30单元</title>
    <link href="https://janvia.github.io/2019/05/12/30%E5%8D%95%E5%85%83/"/>
    <id>https://janvia.github.io/2019/05/12/30单元/</id>
    <published>2019-05-12T14:36:35.000Z</published>
    <updated>2019-05-12T15:08:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="お／ごVです＜尊他＞"><a href="#お／ごVです＜尊他＞" class="headerlink" title="お／ごＶです＜尊他＞"></a>お／ごＶです＜尊他＞</h3><p>动词敬语表现形式之一，用来表示对动作主体的敬意。<br>接续：Ｖます形/サ変V词干<br> 中文翻译成：“您~~”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.シンポジウムには遠藤先生もご出席でした。</span><br><span class="line">２.お客様、何かお探しですか。</span><br><span class="line">３.遠藤先生！今、お帰りですか。</span><br><span class="line">４.佐藤部長はあしたから、ご旅行で3週間いらっしゃらないそうです。</span><br></pre></td></tr></table></figure><h3 id="V（ら）れる＜尊他＞"><a href="#V（ら）れる＜尊他＞" class="headerlink" title="V（ら）れる＜尊他＞"></a>V（ら）れる＜尊他＞</h3><p>表示对动作主体的敬意。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.佐藤さんは何時に帰られましたか。(2003年真题)</span><br><span class="line">２.この本は、遠藤先生が書かれた本です。</span><br><span class="line">３.昨日、胡先生が来られて、教えてくださいました。</span><br></pre></td></tr></table></figure><p>一类动词：将词尾う段假名变成相应行的あ段假名，再加 れる。<br>               書く　書かれる        読む　読まれる</p><p>二类动词：将词尾的る去掉，再加られる。<br>               　　　見る　見られる       ほめる　　褒められる</p><p>三类动词：　　来る　来られる（こられる）<br>                         する　　　　　　される　<br>　　　　          勉強する　　　　　勉強される</p><h3 id="Vていただけませんか＜请求＞"><a href="#Vていただけませんか＜请求＞" class="headerlink" title="Vていただけませんか＜请求＞"></a>Vていただけませんか＜请求＞</h3><p>表示请求时要使用授受动词来表示说话人受益，一种礼貌的方式。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.明日、こちらに来ていただけませんか。</span><br><span class="line">２.これを翻訳していただけませんか。</span><br><span class="line">３.お昼頃、来ていただけませんか。</span><br><span class="line">４.後5分、待っていただけませんか。</span><br></pre></td></tr></table></figure><p>如果想表示更加谦恭的请求，还可以使用：<br>“お/ご～いただけませんか”<br>もうすこし　お待ち　いただけないでしょうか。</p><h3 id="Nのところ-lt-处所化-gt"><a href="#Nのところ-lt-处所化-gt" class="headerlink" title="Nのところ&lt;处所化&gt;"></a>Nのところ&lt;处所化&gt;</h3><p>一、表示人或物的名词后加上“のところ”才可与移动动词或存在动词等搭配使用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.前にお借りした本を先生のところに返しにいきました。</span><br><span class="line">2.図書館に入ったら、高橋さんはまずパソコンのところに行って検索してみた。</span><br></pre></td></tr></table></figure><p>二、接在 “今、現在、この”等表示“现在”的名词后，表示“现阶段、现在时点”等现在的时间性状况。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.今のところ応募者は約100人ほどです。</span><br><span class="line">２.このところ雨の日が続いている。</span><br><span class="line">３.お忙しいところ、申し訳ありません。</span><br></pre></td></tr></table></figure><h3 id="V-よ-うとする-lt-意图-gt"><a href="#V-よ-うとする-lt-意图-gt" class="headerlink" title="V(よ)うとする&lt;意图&gt;"></a>V(よ)うとする&lt;意图&gt;</h3><p>接意志性动词后，表示为达到某目的而努力尝试进行该动作。<br>接续：Ｖようとする<br>汉语：想要~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.彼女は25歳になる前に何とか結婚しようとしている。</span><br><span class="line">2.いくら思い出そうとしても、名前が思い出せない。</span><br><span class="line">3.寝ようとすればするほど、目がさえてきてしまった。</span><br></pre></td></tr></table></figure><p>通常以「ｖ（よ）うとしたとき」「ｖ（よ）うとしたところ」的形式，表示正要实施该动作。“正要~（的候）”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.電車を降りようとしたとき、財布を忘れたことに気がついた。</span><br></pre></td></tr></table></figure><h3 id="うちに-lt-发生变化的时间范围-gt"><a href="#うちに-lt-发生变化的时间范围-gt" class="headerlink" title="~うちに &lt;发生变化的时间范围&gt;"></a>~うちに &lt;发生变化的时间范围&gt;</h3><p>表示在某一状态持续时或某一动作（反复）进行过程中，发生了某一变化。<br>接续： V-る / V-ている + うちに</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.彼女は話しているうちに顔が真っ赤になった。</span><br><span class="line">2.昨夜、部屋で小説を読んでいるうちに、寝てしまいました。</span><br><span class="line">3.日本人と話すうちに、日本語の発音がよくなった。</span><br></pre></td></tr></table></figure><h3 id="うちに＜时段＞"><a href="#うちに＜时段＞" class="headerlink" title="~うちに＜时段＞"></a>~うちに＜时段＞</h3><p>前接表示状态的词，表示在该状态持续期间内，发生了某件事或做某件事（有尽快进行该动作的语感）。</p><p>接续：<br>N + の　　　　　　　　　 + うちに<br>N + な　　　　　　　　　 + うちに<br>A-い  　　　　　　　　　  + うちに<br>V-る / V-ている  V-ない　 + うちに<br>汉语 ：趁着~、~时候、在~之内</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.どうぞ、温かいうちに食べてください。（2008年真题）</span><br><span class="line">2.父が元気なうちに、一度一緒に温泉に行きたいと思います。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;お／ごVです＜尊他＞&quot;&gt;&lt;a href=&quot;#お／ごVです＜尊他＞&quot; class=&quot;headerlink&quot; title=&quot;お／ごＶです＜尊他＞&quot;&gt;&lt;/a&gt;お／ごＶです＜尊他＞&lt;/h3&gt;&lt;p&gt;动词敬语表现形式之一，用来表示对动作主体的敬意。&lt;br&gt;接续：Ｖます形/サ変
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>29单元</title>
    <link href="https://janvia.github.io/2019/05/02/29%E5%8D%95%E5%85%83/"/>
    <id>https://janvia.github.io/2019/05/02/29单元/</id>
    <published>2019-05-02T02:11:54.000Z</published>
    <updated>2019-05-02T02:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="～てしかたがない＜极端的心理状态＞"><a href="#～てしかたがない＜极端的心理状态＞" class="headerlink" title="～てしかたがない＜极端的心理状态＞"></a>～てしかたがない＜极端的心理状态＞</h3><p>　多接在表示感情、感觉或者生理现象的词后，表示产生某种感情或感觉自然产生，难以控制。主语一般为第一人称。第三人称时需在句末加「らしい」「そうだ」「ようだ」<br>接续：Aくて・NAで・Ｖて<br>汉语：…得不得了，…得很<br>★也可为：～てしょうがない　～てしようがない</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 先生に褒められて、嬉しくてしかたがない。</span><br><span class="line">2. 夕べ徹夜したので、眠くてしょうがない。(2008年真题)</span><br><span class="line">3. この映画は見るたびに、涙が出てしかたがない。</span><br></pre></td></tr></table></figure><h3 id="Nさえ～ば、～-lt-充分条件-gt"><a href="#Nさえ～ば、～-lt-充分条件-gt" class="headerlink" title="Nさえ～ば、～&lt;充分条件&gt;　"></a>Nさえ～ば、～&lt;充分条件&gt;　</h3><p>强调只要具备该条件，后项就会得出某结论或进行某动作。 「が」「を」格名词后接「さえ」时，其常常省略。<br>汉语：只要…就…</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.日本語さえ使えれば、バイト代は安くてもいいんです。</span><br><span class="line">2.自分さえよければいい。(2004年真题)</span><br><span class="line">3.新しいパソコンさえあれば、あとは何も欲しくない。</span><br><span class="line">4.値段さえ安ければ買うつもりです。</span><br><span class="line">5.手続きさえ簡単なら(ば)もっと多くの人が利用できるだろう。</span><br></pre></td></tr></table></figure><h3 id="（Nに）Vてほしい-Vないでほしい"><a href="#（Nに）Vてほしい-Vないでほしい" class="headerlink" title="（Ｎに）Ｖてほしい/Vないでほしい"></a>（Ｎに）Ｖてほしい/Vないでほしい</h3><p>表说话人希望对方或他人为自己做某事。动作的主体用「に」提示。<br>汉语：希望……/希望不要……<br>★：＝ＮにＶてもらいたい</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.あしたの演奏会には、ぜひ多くの人に来て欲しいです。</span><br><span class="line">2.今忙しいから邪魔しないで欲しい。</span><br><span class="line">3.この歌が少し難しいから、ほかのにしてほしい。(2011年真题)</span><br></pre></td></tr></table></figure><p>谓语动词也可用非自主动词表希望某事发生或不发生。<br>动作的主体用「が」提示。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.早く夏休みが始まって欲しい。</span><br><span class="line">2.あしたは友達と遠足に行くので、雨が降らないで欲しい。</span><br></pre></td></tr></table></figure><h3 id="に（表示主体）"><a href="#に（表示主体）" class="headerlink" title="に（表示主体）"></a>に（表示主体）</h3><p>接表人的名词后，谓语为表能力的动词，表示能力的主体。<br>谓语部分为否定时，常用「には」提示主体。<br>★「疑问词+にも～～ない」表示全面的否定“谁也不能”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.私にできるかな…。</span><br><span class="line">2.みんなにわかるように、ゆっくり話してください。</span><br><span class="line">3.こんな難しい文章は、学生には翻訳できない。</span><br><span class="line">4.こんな難しいテスト、誰にもできないだろう。</span><br></pre></td></tr></table></figure><h3 id="N・Aでいらっしゃる＜尊他＞"><a href="#N・Aでいらっしゃる＜尊他＞" class="headerlink" title="Ｎ・Aでいらっしゃる＜尊他＞"></a>Ｎ・Aでいらっしゃる＜尊他＞</h3><p>「～です」的尊他表现形式，用于他人，表示尊敬。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.こちらは鈴木さんのお母様でいらっしゃいます。</span><br><span class="line">2.失礼ですが、どちらさまでいらっしゃいますか。</span><br><span class="line">3.お元気でいらっしゃいますか。</span><br><span class="line">4.いつもお若くていらっしゃいます。</span><br></pre></td></tr></table></figure><h3 id="Vていらっしゃる-lt-尊他-gt"><a href="#Vていらっしゃる-lt-尊他-gt" class="headerlink" title="Ｖていらっしゃる&lt;尊他&gt;"></a>Ｖていらっしゃる&lt;尊他&gt;</h3><p>「ている」的尊他表现形式，表示对动作主体的敬意。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.先生は今、新聞を読んでいらっしゃいます。</span><br><span class="line">2.お仕事は何をしていらっしゃいますか。</span><br></pre></td></tr></table></figure><h3 id="～とは限らない-lt-否定性可能-gt"><a href="#～とは限らない-lt-否定性可能-gt" class="headerlink" title="～とは限らない&lt;否定性可能&gt;"></a>～とは限らない&lt;否定性可能&gt;</h3><p>接在简体句后（N和AⅡ也可直接接）<br>表示事实未必如此、不能如此断定之意，暗示存在例外的情况。<br>常与副词「必ずしも」搭配<br>汉语：不一定…，未必…，并非…</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.高い料理が必ずしも美味しいとは限らない。</span><br><span class="line">2.実力のあるチームがいつも勝つとは限らない。 (2009年真题)</span><br></pre></td></tr></table></figure><h3 id="N-らしい-lt-风格、特征-gt"><a href="#N-らしい-lt-风格、特征-gt" class="headerlink" title="N+らしい&lt;风格、特征&gt;"></a>N+らしい&lt;风格、特征&gt;</h3><p>接在N后，按照A活用，表示具有该名词所示事物的特点、风格之意。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.鈴木さんは学生らしい格好で大学に来た。</span><br><span class="line">2.そんなことでくよくよするなんて、君らしくない。</span><br><span class="line">3.学生らしくもっと勉強しなさい。(2005年真题)</span><br><span class="line">4.自分らしさを見出してください。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;～てしかたがない＜极端的心理状态＞&quot;&gt;&lt;a href=&quot;#～てしかたがない＜极端的心理状态＞&quot; class=&quot;headerlink&quot; title=&quot;～てしかたがない＜极端的心理状态＞&quot;&gt;&lt;/a&gt;～てしかたがない＜极端的心理状态＞&lt;/h3&gt;&lt;p&gt;　多接在表示感情、感
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>28单元</title>
    <link href="https://janvia.github.io/2019/05/01/28%E5%8D%95%E5%85%83/"/>
    <id>https://janvia.github.io/2019/05/01/28单元/</id>
    <published>2019-05-01T15:38:40.000Z</published>
    <updated>2019-05-01T16:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ず-に-lt-否定性状态-gt"><a href="#ず-に-lt-否定性状态-gt" class="headerlink" title="ず(に)&lt;否定性状态&gt;"></a>ず(に)&lt;否定性状态&gt;</h3><p>「Vず(に)」是「Vないで」的书面语形式.接续方式与ない基本相同。注意「する」变为「せず」。表示动作，状态的否定，用于中顿或并列。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.彼は今は1日も休まずに、まじめに働いてる。</span><br><span class="line">２.昨日は忙しくて、夜10時まで何も食べずに働いた。(2009年真题)</span><br><span class="line">３.辞書を使わずに日本語の新聞を読むことができるか。(2007年真题)</span><br></pre></td></tr></table></figure><h3 id="～Vるには＜目的＞"><a href="#～Vるには＜目的＞" class="headerlink" title="～Vるには＜目的＞"></a>～Vるには＜目的＞</h3><p>①当主句谓语动词为非自主动词时，表示要达到该目的所必须的条件，<br>②当主句谓语动词为自主动词时，表示为达到该目的所采用的手段、方法或是必须付出的努力。（结尾多使用~なければならない；～べきだ）　　<br>与「Vるために」同义、也可以使用「Ｖるためには」形式。<br>接续：动词原形</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 会議で使う資料に間違いがあったが、今から作り直すには時間が足りない。(2013年7月真题)</span><br><span class="line">2. 日本語が上手になるには一生懸命勉強しなければなりません。　</span><br><span class="line">3. 東京駅に行くには、そこの角を右に曲がったほうがいいよ。(2002年真题)</span><br></pre></td></tr></table></figure><h3 id="Vる-ようになる-lt-变化-gt"><a href="#Vる-ようになる-lt-变化-gt" class="headerlink" title="Vる　ようになる&lt;变化&gt;"></a>Vる　ようになる&lt;变化&gt;</h3><p>表示事物的变化。<br>汉语：变得可以了···；逐渐会····</p><h4 id="a-能力的从无到有"><a href="#a-能力的从无到有" class="headerlink" title="a.  能力的从无到有"></a>a.  能力的从无到有</h4><p>​      表示获得了该能力，即由原来不具备该能力、变得开始具备该能力。否定形式「Vるようにならない」表示尚未获得该能力。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.私は日本語が話せるようになった。</span><br><span class="line">２.日本へ来てから、日本料理が作れるようになった。</span><br></pre></td></tr></table></figure><h4 id="b-现象的出现（从无到有）"><a href="#b-现象的出现（从无到有）" class="headerlink" title="b.  现象的出现（从无到有）"></a>b.  现象的出现（从无到有）</h4><p>否定形式「Vるようにならない」表示该现象尚未出现。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.小学校は入学したころから、だんだん風邪を引いたり熱を出したりしないようになった。(2011年真题)</span><br><span class="line">２.日本では、なかなか女性と男性が同じ条件で働けるようにならない。</span><br></pre></td></tr></table></figure><h4 id="c-动作行为的习惯化（习惯的从无到有）"><a href="#c-动作行为的习惯化（习惯的从无到有）" class="headerlink" title="c.动作行为的习惯化（习惯的从无到有）"></a>c.动作行为的习惯化（习惯的从无到有）</h4><p> 否定形式「Vるようにならない」表示该习惯尚未养成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.父は最近散歩をするようになった。</span><br><span class="line">2.父はなかなか散歩するようにならない。</span><br><span class="line">3.子供が生まれたことで、食べ物の安全を気にするようになった。(2010年真题)</span><br></pre></td></tr></table></figure><h3 id="やる／Vてやる-lt-授受、受益-gt"><a href="#やる／Vてやる-lt-授受、受益-gt" class="headerlink" title="やる／Vてやる&lt;授受、受益&gt;"></a>やる／Vてやる&lt;授受、受益&gt;</h3><p> 用法与「あげる」大体相同，表示说话人自己或自己这一方的人将物品赠与他人，或者为别人做某事。<br>★仅限于人对动植物、父母对子女、夫妻之间、兄弟姐妹之间或上对下的场合</p><h4 id="①N1はN2にN3をやる"><a href="#①N1はN2にN3をやる" class="headerlink" title="①Ｎ1はＮ2にＮ3をやる"></a>①Ｎ1はＮ2にＮ3をやる</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.花に水をやる。</span><br><span class="line">2.息子の誕生日に、ネクタイをやろうと思っている。</span><br></pre></td></tr></table></figure><h4 id="②N1はN2にVてやる"><a href="#②N1はN2にVてやる" class="headerlink" title="②Ｎ1はＮ2にＶてやる"></a>②Ｎ1はＮ2にＶてやる</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.水泳は僕が教えてやるよ。(2000年真题)</span><br><span class="line">2.私は弟のシャツを洗ってやる。(2004年真题)</span><br></pre></td></tr></table></figure><h3 id="Vるといい-lt-建议-gt"><a href="#Vるといい-lt-建议-gt" class="headerlink" title="Vるといい&lt;建议&gt;"></a>Vるといい&lt;建议&gt;</h3><p> 表示给对方所提的建议、劝别人进行那种行为之意。<br>★对年长者，上级一般使用：Ｖたらいかがですか<br>★建议不要做某事时使用： Vないほうがいい<br>汉语：~比较好；最好是~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.日本語の辞書はこれを使うといい。</span><br><span class="line">２.疲れたでしょう。少し休むといいですよ。</span><br></pre></td></tr></table></figure><h3 id="Vて来る＜客体，信息的移动＞"><a href="#Vて来る＜客体，信息的移动＞" class="headerlink" title="Ｖて来る＜客体，信息的移动＞"></a>Ｖて来る＜客体，信息的移动＞</h3><p>表示物品或信息的移动是向着说话人一方进行。「が」：表示动作者，「に」：表示动作接受者。接受者是第一人称时，常常省略。</p><p>★「Ｖていく」はない<br>　　 ✖電話していく。<br>　　 ●電話する。<br>★动作者是公司这样一些场所名词时用：「から」</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.注文した本はもう送ってきた。</span><br><span class="line">２.会社から依頼を頼んできた。</span><br><span class="line">３.化粧品を買った客が苦情を言ってきた。</span><br></pre></td></tr></table></figure><h3 id="Vて行く-Vて来る"><a href="#Vて行く-Vて来る" class="headerlink" title="~Vて行く　Vて来る"></a>~Vて行く　Vて来る</h3><h4 id="表示事物的＜动作、变化的持续＞。"><a href="#表示事物的＜动作、变化的持续＞。" class="headerlink" title="表示事物的＜动作、变化的持续＞。"></a>表示事物的＜动作、变化的持续＞。</h4><p>①ｖてくる过去到现在（~来、~起来、一直~）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.この伝統はもう５００年も続いてきた。</span><br><span class="line">2.今まで一生懸命頑張ってきたんだから、大丈夫だ。</span><br></pre></td></tr></table></figure><p>②ｖていく现在到将来（~下去、继续~）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.今後もさらに進歩していくだろうと思う。</span><br><span class="line">2.これからも続けていきたいと思う。</span><br></pre></td></tr></table></figure><h4 id="表示事物，现象的出现或消失。"><a href="#表示事物，现象的出现或消失。" class="headerlink" title="表示事物，现象的出现或消失。"></a>表示事物，现象的出现或消失。</h4><p>①ｖてくる出现</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.赤ちゃんの歯が生えてきた。</span><br><span class="line">2.雲の間から月が出てきた。</span><br><span class="line">3.雨が降ってきた。</span><br></pre></td></tr></table></figure><p>②ｖていく消失</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.星が消えていく。</span><br><span class="line">2.習慣がなくなっていく。</span><br><span class="line">3.ボートは渦の中に沈んでいった。</span><br></pre></td></tr></table></figure><h3 id="Vる／N-につれて-につれ＜相应的变化＞"><a href="#Vる／N-につれて-につれ＜相应的变化＞" class="headerlink" title="Vる／Ｎ　につれて/につれ＜相应的变化＞"></a>Vる／Ｎ　につれて/につれ＜相应的变化＞</h3><p> 　表示随着某一事态或情况的变化和发展，相应的其他情况也随之发生变化或发展。主句常搭配「てきた」。<br>汉语：随着…、伴随着…</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.時間が経つにつれて、悲しみは薄らいできた。</span><br><span class="line">2.工業の発展につれて、大気汚染も深刻になってきた。</span><br><span class="line">3.技術が発達するにつれて、人々の暮らしは豊かになってきた。（2009年真题）</span><br></pre></td></tr></table></figure><h3 id="Vる／Nの-たびに＜同一情况的反复＞"><a href="#Vる／Nの-たびに＜同一情况的反复＞" class="headerlink" title="Vる／Ｎの　たびに＜同一情况的反复＞"></a>Vる／Ｎの　たびに＜同一情况的反复＞</h3><p>表示某种动作行为反复进行，或某种现象反复出现时所发生的情况。<br>汉语：每当…就、每次…都…</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.近所のおばさんは、会うたびに自分の子供の自慢話をする。</span><br><span class="line">2.うちの犬は、私が出かけようとするたびに、寂しそうな目で私を見る。(2013年真题)</span><br><span class="line">3.山田さんに会うたびに素敵な人だといつも思う。(2010年真题)</span><br></pre></td></tr></table></figure><h3 id="ながら-も-lt-转折-gt"><a href="#ながら-も-lt-转折-gt" class="headerlink" title="ながら(も)&lt;转折&gt;"></a>ながら(も)&lt;转折&gt;</h3><p>用于连接内容相反的两个分句，表示转折关系。从句多表示状态。<br>接续：R／A1／A2／N　+ ながら<br>汉语：虽然~，但是~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">私は、悪いと知りながら、連絡しないで仕事を休んだ。</span><br><span class="line">体は小さいながら、なかなか力がある。</span><br><span class="line">全力を出しましたが、残念ながら、優勝できませんでした。(2007年真题)</span><br></pre></td></tr></table></figure><h3 id="Vるべきだ-べきではない-lt-义务-gt"><a href="#Vるべきだ-べきではない-lt-义务-gt" class="headerlink" title="Vるべきだ/べきではない&lt;义务&gt;"></a>Vるべきだ/べきではない&lt;义务&gt;</h3><p>表示行为规范、原则道理以及事物的本质来看，应该不应该去做<br>某事。多为说话人对一般事件发表意见，用于劝告，禁止，命令等。<br>汉语：应当……/不应当……<br>接续：する　=&gt;　すべき（するべき）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.約束は守るべきだ。そうしないと、信用を失うよ。(2008年真题)</span><br><span class="line">2.大学生はまず第一に勉強すべきだ。</span><br><span class="line">3.これからやるべきことはたくさんある。</span><br></pre></td></tr></table></figure><h3 id="だけ＜程度＞"><a href="#だけ＜程度＞" class="headerlink" title="だけ＜程度＞"></a>だけ＜程度＞</h3><p>表示按照动作主体的能力、主观愿望或客观需要的程度以及进行后项的动作。<br>汉语：尽量，尽可能；想~就~；能够~都</p><h4 id="a-V-れる-＋-だけV（同一动词）-尽量、尽可能"><a href="#a-V-れる-＋-だけV（同一动词）-尽量、尽可能" class="headerlink" title="a.V-れる　＋　だけV（同一动词）   　　尽量、尽可能"></a>a.V-れる　＋　だけV（同一动词）   　　尽量、尽可能</h4><p>将动词反复使用，表示“尽最大程度···”的意思。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.食べられるだけ食べた。</span><br><span class="line">2.頑張れるだけ頑張ってみる。</span><br></pre></td></tr></table></figure><h4 id="b-V-たい-＋-だけV（同一动词）-想-就-、-够"><a href="#b-V-たい-＋-だけV（同一动词）-想-就-、-够" class="headerlink" title="b. V-たい　＋　だけV（同一动词）　　　想~就~、~够"></a>b. V-たい　＋　だけV（同一动词）　　　想~就~、~够</h4><p>将动词反复使用，表示一直做到尽兴为止的意思。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.日曜日は寝たいだけ寝ることができる。</span><br><span class="line">2.遠慮しないで、食べたいだけ食べなさい。</span><br></pre></td></tr></table></figure><h4 id="c-A（少部分）-＋-だけV-客观需要"><a href="#c-A（少部分）-＋-だけV-客观需要" class="headerlink" title="c. A（少部分） ＋　だけV　　客观需要"></a>c. A（少部分） ＋　だけV　　客观需要</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.そうぞ、お好きなだけ召し上がってください。</span><br><span class="line">2.どうしたらお金が欲しいだけ手に入るのか。</span><br><span class="line">3.必要なだけ取りなさい。</span><br></pre></td></tr></table></figure><h3 id="Nには及ばない-lt-比较-gt"><a href="#Nには及ばない-lt-比较-gt" class="headerlink" title="Nには及ばない&lt;比较&gt;"></a>Nには及ばない&lt;比较&gt;</h3><p>表示主语所指称的事物或人在性质上或能力上比不过该名词所指称的事物或人。<br>汉语：~不及~、~比不过~<br>惯用表达：远不及：～には遠く及ばない<br>　　　　　　　　　～の足元にも及ばない</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.私がどんなに頑張っても、彼の実力には及ばない。</span><br><span class="line">2.CDは生の演奏には遠く及ばない。</span><br><span class="line">3.自動車がいくら速く走れても飛行機の足元にも及ばない。</span><br></pre></td></tr></table></figure><h3 id="Nに加えて-lt-递进、累加-gt"><a href="#Nに加えて-lt-递进、累加-gt" class="headerlink" title="Ｎに加えて&lt;递进、累加&gt;"></a>Ｎに加えて&lt;递进、累加&gt;</h3><p>表示在该事物、事件的基础上增加了别的事物或发生了别的事件。含有整个事件程度的加深的语感，主句常与「も」搭配。<br>汉语：加之…、除了…以外，还…</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.夏の低温に加えて、雨が少なかった。(1999年真题)</span><br><span class="line">2.お祭りは見る楽しさに加えて元気も与えてくれる。</span><br><span class="line">3.大雨に加えて、風まで吹いてきた。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ず-に-lt-否定性状态-gt&quot;&gt;&lt;a href=&quot;#ず-に-lt-否定性状态-gt&quot; class=&quot;headerlink&quot; title=&quot;ず(に)&amp;lt;否定性状态&amp;gt;&quot;&gt;&lt;/a&gt;ず(に)&amp;lt;否定性状态&amp;gt;&lt;/h3&gt;&lt;p&gt;「Vず(に)」是「Vないで」
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>27单元</title>
    <link href="https://janvia.github.io/2019/04/14/27%E5%8D%95%E5%85%83/"/>
    <id>https://janvia.github.io/2019/04/14/27单元/</id>
    <published>2019-04-14T01:20:08.000Z</published>
    <updated>2019-04-14T01:59:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命令句1"><a href="#命令句1" class="headerlink" title="命令句1"></a>命令句1</h3><p>表示绝对的命令，其使用范围比较窄，常用于发号施令、交通标志等，多为男性使用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.お父さんも「頑張れ。諦めるな。」って言ってるわよ。</span><br><span class="line">2.あそこに、「スピードを落とせ。」と書いてあります。</span><br><span class="line">3.危ないから部屋の中でボールを投げるのはやめろ。</span><br></pre></td></tr></table></figure><h3 id="V-Rなさい＜命令・敬体＞"><a href="#V-Rなさい＜命令・敬体＞" class="headerlink" title="Ｖ-Rなさい＜命令・敬体＞"></a>Ｖ-Rなさい＜命令・敬体＞</h3><p>接续：动词第一连用形+なさい<br>       一般用于大人对小孩，老师对学生，上级对下级，或者亲密关系者间。语气比动词命令形较缓和。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">もっとゆっくり食べなさい。</span><br><span class="line">早く学校に行きなさい。</span><br></pre></td></tr></table></figure><p>★更为客气的命令：お・ご~なさい</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">薬をお飲みなさい。</span><br><span class="line">この本をお読みなさい。</span><br></pre></td></tr></table></figure><p>★口语简化为「Ｖな」,语气不太客气，用于关系非常亲密的人之间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">早く起きな。</span><br><span class="line">早く来な。</span><br></pre></td></tr></table></figure><h3 id="命令句3"><a href="#命令句3" class="headerlink" title="命令句3"></a>命令句3</h3><p>★「テ形」也可以表达命令，用于上下级和亲密者之间。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.ここに座って。</span><br><span class="line">２.これを持って。</span><br></pre></td></tr></table></figure><p>Ｖてくれ　　也是一种命令式，</p><pre><code> 教えてくれ～ 出てくれ～</code></pre><h3 id="Vる＋な＜动词禁止形＞"><a href="#Vる＋な＜动词禁止形＞" class="headerlink" title="Vる＋な＜动词禁止形＞"></a>Vる＋な＜动词禁止形＞</h3><p>接续：动词基本型+な<br>        这种形式也可以说就是动词简体命令形的否定形式，用于表示要求对方不要做某一行为动作。多为男性使用。<br>汉语翻译：不要~、别~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）そんなつまらないことを人に頼むな。</span><br><span class="line">2）タバコを吸うな。</span><br><span class="line">3）ここに車を止めるな。</span><br></pre></td></tr></table></figure><h3 id="Vて来る＜客体，信息的移动＞"><a href="#Vて来る＜客体，信息的移动＞" class="headerlink" title="Ｖて来る＜客体，信息的移动＞"></a>Ｖて来る＜客体，信息的移动＞</h3><p>表示物品或信息的移动是向着说话人一方进行。「が」：表示动作者，「に」：表示动作接受者。接受者是第一人称时，常常省略。</p><p>★「Ｖていく」はない<br>　　 ✖電話していく。<br>　　 ●電話する。<br>★动作者是公司这样一些场所名词时用：「から」</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.注文した本はもう送ってきた。</span><br><span class="line">２.会社から依頼を頼んできた。</span><br><span class="line">３.化粧品を買った客が苦情を言ってきた。</span><br></pre></td></tr></table></figure><h3 id="Vてしまう＜完成体＞"><a href="#Vてしまう＜完成体＞" class="headerlink" title="Vてしまう＜完成体＞"></a>Vてしまう＜完成体＞</h3><p>①＜完了＞<br>强调动作的结束完成；状态的完成。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.この宿題をしてしまったら、遊びに行ける。</span><br><span class="line">２.もうすっかり疲れてしまって、動けない。</span><br></pre></td></tr></table></figure><p>②＜感慨消极结果＞<br>表示说话人对已结束动作的“后悔，遗憾，无法挽回弥补”的感情。<br>句尾使用过去式「Ｖてしまった」动词多为非自主动词。<br>口语：「Ｖちゃった」第二册20课2单元4.P124</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.急いで来たから財布を落としてしまった。(2005年真题)</span><br><span class="line">２.また授業に遅刻してしまった。</span><br></pre></td></tr></table></figure><p>③＜强行做某事的意志＞<br>表示不顾客观情况和别人的意愿，而要强行进行该动作的意志，动词多为自主动词，后项常用意志形（Ｖてしまおう・Ｖちゃおう）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.先生に言っちゃうよ。</span><br><span class="line">2.このジュース、あと少しだから、全部飲んじゃおうかな</span><br><span class="line">3.まだ帰らないの？先に帰っちゃうよ。</span><br></pre></td></tr></table></figure><h4 id="回顾对比"><a href="#回顾对比" class="headerlink" title="回顾对比"></a>回顾对比</h4><p>①Vてしまう＜强行做某事的意志＞<br>说话人不顾客观情况和他人意愿，而要强行进行某动作的意志。<br>②ましょう(か)＜意志，征求同意＞<br>说话人进行某动作的意志，含有征求对方同意的语气。(第一册P203)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A：電話しましょうか。</span><br><span class="line">B：そうですね。じゃあ、私がしましょう。</span><br><span class="line"></span><br><span class="line">　あの人は何度もメールしても返事来ないから、電話しちゃおう。</span><br></pre></td></tr></table></figure><h3 id="～がる-lt-形容词的动词化-gt"><a href="#～がる-lt-形容词的动词化-gt" class="headerlink" title="～がる&lt;形容词的动词化&gt;"></a>～がる&lt;形容词的动词化&gt;</h3><p>日语的感情、感觉形容词在句中主要用于第一人称，当要表示<br>第三人称的状态时，就在形容词的词干后面接上该后缀「がる」。变化后该词词性也从形容词变为动词。从而感情描述变为客观叙述。<br>接続：A・Ｎa+がる　<br>汉语：①感到，觉得（~心情或样子）<br>　　　②装作（~样子）<br>★Ｖたい・Ｎがほしい</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.あそこで泣いて、お菓子を欲しがっているようだ。(2011年真题)</span><br><span class="line">2.これを見たら、皆が面白がるだろうと思います。</span><br><span class="line">3.最近は数学を嫌がる子供が多いようです。</span><br><span class="line">4.弱いものに限って強がるものだ。</span><br></pre></td></tr></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><h4 id="N1はN2より～＜比较＞"><a href="#N1はN2より～＜比较＞" class="headerlink" title="N1はN2より～＜比较＞"></a>N1はN2より～＜比较＞</h4><p>格助词より，表示比较的基准、对象。该句式表示N1比N2具有谓语所示的特征，相当于汉语“N1比N2更~”(第一册P291)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">中国は日本より広い。</span><br></pre></td></tr></table></figure><h4 id="N２よりN１のほうが～-＜比较＞"><a href="#N２よりN１のほうが～-＜比较＞" class="headerlink" title="N２よりN１のほうが～ ＜比较＞"></a>N２よりN１のほうが～ ＜比较＞</h4><p>比起N2 ，N1 更（具有某种倾向）(第一册P293)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">日本より中国のほうが広い。</span><br></pre></td></tr></table></figure><h4 id="③-N1はN２ほど～ない＜比较＞"><a href="#③-N1はN２ほど～ない＜比较＞" class="headerlink" title="③ Ｎ1はＮ２ほど～ない＜比较＞"></a>③ Ｎ1はＮ２ほど～ない＜比较＞</h4><p>副助词ほど：表示比较的基准，句尾必须接否定，<br>Ｎ1在某方面程度上不及Ｎ２<br>汉语：……不如……（程度高）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.日本は中国ほど広くない。</span><br><span class="line">２.今日は昨日ほど風が強くない。(2009年真题)</span><br><span class="line">３.私の部屋は姉の部屋ほど広くない。(2006年真题)</span><br></pre></td></tr></table></figure><h3 id="Nなら＜主题＞"><a href="#Nなら＜主题＞" class="headerlink" title="Ｎなら＜主题＞"></a>Ｎなら＜主题＞</h3><p>接在名词后面用于凸显主题，就对方提出的话题或者问题做出回答或是进一步加以解释说明；提出意见建议。<br>汉语：就····方面说；就····来说</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１A：メガネはどこかな。</span><br><span class="line">　B：メガネなら、たんすの上に置いてあったよ。</span><br><span class="line">２A：もしもし、美智子さん、いらっしゃいますか</span><br><span class="line">　B：美智子ですか。</span><br><span class="line">　　　美智子なら、もう出かけましたけど。(2000年真题)</span><br></pre></td></tr></table></figure><h4 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h4><h5 id="Nなら-ば-lt-凸显，条件-gt"><a href="#Nなら-ば-lt-凸显，条件-gt" class="headerlink" title="Ｎなら(ば)&lt;凸显，条件&gt;"></a>Ｎなら(ば)&lt;凸显，条件&gt;</h5><p>接在名词后面用于凸显,强调所指的事物，表示前项是后项成立的前提，后项为说话人的判断或决定。如果该话题成立的话。<br>汉语：如果是·····的话               （第二册P115）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">風邪なら早く帰って休んだほうがいいよ。</span><br></pre></td></tr></table></figure><h5 id="は＜主题＞"><a href="#は＜主题＞" class="headerlink" title="は＜主题＞"></a>は＜主题＞</h5><p>第一册的名词谓语句与形容词谓语句中的实质都是提示主题的作用。但本册なら＜主题＞是具有“以Ｎ为话题的话”的假定意思。不可互换。(第一册P41，P98)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①高橋は日本人だ。</span><br><span class="line">②日本語は難しい。</span><br><span class="line">③高橋は今小説を読んでいる。</span><br></pre></td></tr></table></figure><h3 id="で＜时间量的限定＞"><a href="#で＜时间量的限定＞" class="headerlink" title="で＜时间量的限定＞"></a>で＜时间量的限定＞</h3><p>接在表示时间量的名词后面时，表示对时间量的限定。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.  いろいろ考えた結果、一年で休学しました。</span><br><span class="line">2.  ３日でその仕事を仕上げた。</span><br></pre></td></tr></table></figure><p>①&lt;处所&gt;図書館で本を読む<br>②&lt;范围&gt;日本でも有名だよ。<br>③&lt;限定数量&gt;駅まで五分で行ける<br>④&lt;原材料&gt;シルクでできたドレス。<br>⑤&lt;工具手段&gt;バスで学校へ通う<br>⑥&lt;限定动作主体&gt;みんなで歌おう。<br>⑦＜动态的存在＞五階で会議がある。</p><h3 id="ず-に-lt-否定性状态-gt"><a href="#ず-に-lt-否定性状态-gt" class="headerlink" title="ず(に)&lt;否定性状态&gt;"></a>ず(に)&lt;否定性状态&gt;</h3><p>「Vず(に)」是「Vないで」的书面语形式.接续方式与ない基本相同。注意「する」变为「せず」。表示动作，状态的否定，用于中顿或并列。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.彼は今は1日も休まずに、まじめに働いてる。</span><br><span class="line">２.昨日は忙しくて、夜10時まで何も食べずに働いた。(2009年真题)</span><br><span class="line">３.辞書を使わずに日本語の新聞を読むことができるか。(2007年真题)</span><br></pre></td></tr></table></figure><h3 id="～Vるには＜目的＞"><a href="#～Vるには＜目的＞" class="headerlink" title="～Vるには＜目的＞"></a>～Vるには＜目的＞</h3><p>①当主句谓语动词为非自主动词时，表示要达到该目的所必须的条件，<br>②当主句谓语动词为自主动词时，表示为达到该目的所采用的手段、方法或是必须付出的努力。（结尾多使用~なければならない；～べきだ）　　<br>与「Vるために」同义、也可以使用「Ｖるためには」形式。<br>接续：动词原形</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 会議で使う資料に間違いがあったが、今から作り直すには時間が足りない。(2013年7月真题)</span><br><span class="line">2. 日本語が上手になるには一生懸命勉強しなければなりません。　</span><br><span class="line">3. 東京駅に行くには、そこの角を右に曲がったほうがいいよ。(2002年真题)</span><br></pre></td></tr></table></figure><h3 id="Vるようになる-lt-变化-gt"><a href="#Vるようになる-lt-变化-gt" class="headerlink" title="Vるようになる&lt;变化&gt;"></a>Vるようになる&lt;变化&gt;</h3><p>表示事物的变化。<br>汉语：变得可以了···；逐渐会····</p><p>a.  能力的从无到有<br>      表示获得了该能力，即由原来不具备该能力、变得开始具备该能力。否定形式「Vるようにならない」表示尚未获得该能力。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.私は日本語が話せるようになった。</span><br><span class="line">２.日本へ来てから、日本料理が作れるようになった。</span><br></pre></td></tr></table></figure><p>b.  现象的出现（从无到有）<br>否定形式「Vるようにならない」表示该现象尚未出现。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.小学校は入学したころから、だんだん風邪を引いたり熱を出したりしないようになった。(2011年真题)</span><br><span class="line">２.日本では、なかなか女性と男性が同じ条件で働けるようにならない。</span><br></pre></td></tr></table></figure><p>c.动作行为的习惯化（习惯的从无到有）<br> 否定形式「Vるようにならない」表示该习惯尚未养成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.父は最近散歩をするようになった。</span><br><span class="line">2.父はなかなか散歩するようにならない。</span><br><span class="line">3.子供が生まれたことで、食べ物の安全を気にするようになった。(2010年真题)</span><br></pre></td></tr></table></figure><h3 id="やる／Vてやる-lt-授受、受益-gt"><a href="#やる／Vてやる-lt-授受、受益-gt" class="headerlink" title="やる／Vてやる&lt;授受、受益&gt;"></a>やる／Vてやる&lt;授受、受益&gt;</h3><p>用法与「あげる」大体相同，表示说话人自己或自己这一方的人将物品赠与他人，或者为别人做某事。<br>★仅限于人对动植物、父母对子女、夫妻之间、兄弟姐妹之间或上对下的场合<br>①Ｎ1はＮ2にＮ3をやる</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.花に水をやる。</span><br><span class="line">2.息子の誕生日に、ネクタイをやろうと思っている。</span><br></pre></td></tr></table></figure><p>②Ｎ1はＮ2にＶてやる</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.水泳は僕が教えてやるよ。(2000年真题)</span><br><span class="line">2.私は弟のシャツを洗ってやる。(2004年真题)</span><br></pre></td></tr></table></figure><h3 id="Vるといい-lt-建议-gt"><a href="#Vるといい-lt-建议-gt" class="headerlink" title="Vるといい&lt;建议&gt;"></a>Vるといい&lt;建议&gt;</h3><p>表示给对方所提的建议、劝别人进行那种行为之意。<br>★对年长者，上级一般使用：Ｖたらいかがですか<br>★建议不要做某事时使用： Vないほうがいい<br>汉语：~比较好；最好是~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.日本語の辞書はこれを使うといい。</span><br><span class="line">２.疲れたでしょう。少し休むといいですよ。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;命令句1&quot;&gt;&lt;a href=&quot;#命令句1&quot; class=&quot;headerlink&quot; title=&quot;命令句1&quot;&gt;&lt;/a&gt;命令句1&lt;/h3&gt;&lt;p&gt;表示绝对的命令，其使用范围比较窄，常用于发号施令、交通标志等，多为男性使用。&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>26单元</title>
    <link href="https://janvia.github.io/2019/03/26/26%E5%8D%95%E5%85%83/"/>
    <id>https://janvia.github.io/2019/03/26/26单元/</id>
    <published>2019-03-26T11:51:37.000Z</published>
    <updated>2019-03-26T11:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="～ような気（感じ）がする"><a href="#～ような気（感じ）がする" class="headerlink" title="～ような気（感じ）がする"></a>～ような気（感じ）がする</h3><p>用于表示说话人的某种感觉。<br>接续： 句子的简体形     名词＋の　<br>翻译：觉得……；好像……；放佛……</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.あの人とどこかで会ったような気がする。</span><br><span class="line">2.何となく不吉なことが起こるような気がする。</span><br></pre></td></tr></table></figure><h3 id="N次第だ＜决定性的事物＞"><a href="#N次第だ＜决定性的事物＞" class="headerlink" title="Ｎ次第だ＜决定性的事物＞"></a>Ｎ次第だ＜决定性的事物＞</h3><p>表示事物发展的结果取决于该名词所表示的情况或状态。<br>翻译：全凭……；全看……；视……而定</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.万事はきみの決心次第だ。</span><br><span class="line">2.宝くじに当たるかどうかは運次第だ。</span><br><span class="line">3.結婚した相手次第で人生が決まってしまうこともある。</span><br></pre></td></tr></table></figure><h3 id="使动句（使役句）"><a href="#使动句（使役句）" class="headerlink" title="使动句（使役句）"></a>使动句（使役句）</h3><p>a.他动词使动句<br>主语は/が　使动对象に　Ｎを　Vせる(他动词)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.主动句：子供がご飯を食べる。    </span><br><span class="line">　使动句：母  は子供にご飯を食べさせる。</span><br><span class="line"></span><br><span class="line">２.主动句：学生はテープを聞く。</span><br><span class="line">　使动句：先生は学生にテープを聞かせる。</span><br><span class="line"></span><br><span class="line">3.主动句：お皿を洗ったり、部屋を掃除したりする。 </span><br><span class="line">  使动句：お皿を洗わせたり、部屋を掃除させたリする。</span><br></pre></td></tr></table></figure><p>b.自动词使动句</p><p>​    主语A   は/が　使动对象Bに/を　Vせる(自动词)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主动句：子供がアメリカに行く</span><br><span class="line"> 使役句：</span><br><span class="line">b-1両親 が  子供 に　アメリカに行かせる</span><br><span class="line">b-2両親 が  子供 を　アメリカに行かせる</span><br></pre></td></tr></table></figure><p>に：表示该动作是尊重使役对象B的意愿而进行的<br>を：与使役对象B的意愿无关，强调是使役者A的意思</p><p>b.自动词使动句</p><p>​          主语Aは/が　使动对象Bに/を　Vせる(自动词)</p><p>※如果原句中已经有「を」就只能用「に」为避免重复，这时，和是否是遵照使役对象B的意愿无关。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主动句：学生たち が  走りました。</span><br><span class="line">使役句：先生  が  学生たち  に/を　走らせました。</span><br><span class="line"></span><br><span class="line">主动句：学生たち が  運動場 を 走りました。　　　　</span><br><span class="line">使役句：先生 は 学生たち に　運動場を走らせました。</span><br></pre></td></tr></table></figure><p>c.由使动态构成的请求句（敬语）,表示说话人以询问的口吻，请求对方应许我想做的事情。<br>    请让我……、请允许我……<br>Ｖさせてもらう/いただく<br>Ｖさせてくれる/くださる</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 早く帰ってもいいですか。</span><br><span class="line">→早く帰らせてもらえませんか。</span><br><span class="line"></span><br><span class="line">2ちょっと休んでもいいですか。</span><br><span class="line">→ちょっと休ませてくださいませんか。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;～ような気（感じ）がする&quot;&gt;&lt;a href=&quot;#～ような気（感じ）がする&quot; class=&quot;headerlink&quot; title=&quot;～ような気（感じ）がする&quot;&gt;&lt;/a&gt;～ような気（感じ）がする&lt;/h3&gt;&lt;p&gt;用于表示说话人的某种感觉。&lt;br&gt;接续： 句子的简体形   
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>25单元</title>
    <link href="https://janvia.github.io/2019/03/19/25%E5%8D%95%E5%85%83/"/>
    <id>https://janvia.github.io/2019/03/19/25单元/</id>
    <published>2019-03-19T15:03:50.000Z</published>
    <updated>2019-03-19T15:11:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="V-Rながら-lt-同时-gt"><a href="#V-Rながら-lt-同时-gt" class="headerlink" title="V-Rながら&lt;同时&gt;"></a>V-Rながら&lt;同时&gt;</h3><p>表示前后两个动作同时进行或持续交替进行。其中后面的动作是主要动作。<br>翻译：一边~一边~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 弟はいつもテレビを見ながら、宿題をしています。</span><br><span class="line">2. 音楽を聴きながら、勉強や仕事をする人のことを「ながら族」と言う。</span><br><span class="line">3. 働きながら、学校に通う。</span><br></pre></td></tr></table></figure><h3 id="ながら"><a href="#ながら" class="headerlink" title="ながら"></a>ながら</h3><p>1.表示前后两个动作同时进行或持续交替进行。一边~一边~<br>V-Rながら</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">弟はいつもテレビを見ながら、宿題をしています。</span><br></pre></td></tr></table></figure><p>2.表示原封不动、一如既往等意思。中译时需灵活处理。<br>名词+ながら</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">皮ながら食べる。</span><br><span class="line">生まれながらの音楽家</span><br></pre></td></tr></table></figure><p>3.表示前后事项相互矛盾。虽然~但是~<br>名词+  二类形容词词干+    一类形容词基本形  V-Rながら</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">知っていながら、何も教えてくれない。</span><br></pre></td></tr></table></figure><h3 id="ようだ-lt-推测-gt-：大概-吧、好像"><a href="#ようだ-lt-推测-gt-：大概-吧、好像" class="headerlink" title="~ようだ&lt;推测&gt; ：大概~吧、好像~"></a>~ようだ&lt;推测&gt; ：大概~吧、好像~</h3><p>接续：连体形<br>表示说话人根据自己的印象或感觉对事物作出的推测。 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 体がだるいんです。風邪を引いてしまったようです。</span><br><span class="line">2. 明日は雨のようです。</span><br><span class="line">3. あの声は、誰かが外で喧嘩しているようだ。</span><br></pre></td></tr></table></figure><p>このお風呂、温そうだね。　　　そうだ：第一印象，直觉<br>このお風呂、温いようだね。　　ようだ：感觉，思维（有依据）</p><h3 id="「らしい」「ようだ」「そうだ」"><a href="#「らしい」「ようだ」「そうだ」" class="headerlink" title="「らしい」「ようだ」「そうだ」"></a>「らしい」「ようだ」「そうだ」</h3><p>「ようだ」   自己所见，所体验。表示说话人的判断意见。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">天気図を見て、  あすは雨が降るようだ</span><br></pre></td></tr></table></figure><p>「そうだ」  多表示自己所见。表示某种状况，眼看就要发生，看起来要发生。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">急に暗くなった空を見て、 今にも雨が降りそうだ</span><br></pre></td></tr></table></figure><p>「らしい」 听说、通过书、媒体等间接得到。确信度高（有依据）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">天気予報を見た人から聞いて、明日は雨が降るらしいよ</span><br></pre></td></tr></table></figure><p>雨が降るそうだ。　　传闻</p><p>まるで夢のようだ　　比喻</p><h3 id="Vたばかりだ-lt-刚刚-gt-：刚-不久"><a href="#Vたばかりだ-lt-刚刚-gt-：刚-不久" class="headerlink" title="Vたばかりだ&lt;刚刚&gt; ：刚~不久"></a>Vたばかりだ&lt;刚刚&gt; ：刚~不久</h3><p>表示动作完成或某事情发生后时间不太长。（主观判断）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.その言葉は習ったばかりで、まだ上手に使えません。</span><br><span class="line">2.あの頃は、私は北京に来たばかりで、中国語もあまり分からなくて…</span><br></pre></td></tr></table></figure><h3 id="たところだ・たばかりだ"><a href="#たところだ・たばかりだ" class="headerlink" title="たところだ・たばかりだ"></a>たところだ・たばかりだ</h3><p>不同点：<br>（1）たところだ一般不直接接在明确表示过去某时间的词语后面。<br>先週、結婚したばかりだ（ところだ？）。</p><p>（2）たばかりだ可以表示动作行为结束后经过了较长一段时间的事态；与此相反，たところだ一般用于表示动作结束后经过的时间较短的事态。<br>あの二人は去年結婚したばかりだ（ところだｘ）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;V-Rながら-lt-同时-gt&quot;&gt;&lt;a href=&quot;#V-Rながら-lt-同时-gt&quot; class=&quot;headerlink&quot; title=&quot;V-Rながら&amp;lt;同时&amp;gt;&quot;&gt;&lt;/a&gt;V-Rながら&amp;lt;同时&amp;gt;&lt;/h3&gt;&lt;p&gt;表示前后两个动作同时进行或持续交
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>24单元</title>
    <link href="https://janvia.github.io/2019/03/13/24%E5%8D%95%E5%85%83/"/>
    <id>https://janvia.github.io/2019/03/13/24单元/</id>
    <published>2019-03-13T06:06:04.000Z</published>
    <updated>2019-03-18T00:27:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="被动态"><a href="#被动态" class="headerlink" title="被动态"></a>被动态</h3><p>定义：以中心动词的行为者以外的非积极参与者为主语进行描写的句式叫做被动态。多伴有受到危害、损害、伤害之意，但在现代日语中，主体受益、中立（既非受害也非受益）、间接受到影响时也常用被动句式来表示。</p><p> 1类动词：将词尾う段假名    =&gt;   あ段假名 + れる<br>               書く　　　=&gt;         書かれる</p><p> 2类动词：去掉词尾 る   +  られる<br>　　　　 食べる　　  =&gt;　        食べられる</p><p> 3类动词：来（く）る　      来（こ）られる　<br>   　　　 する　　　　  =&gt;         される</p><h3 id="被动句"><a href="#被动句" class="headerlink" title="被动句"></a>被动句</h3><p>日语被动句根据其意义和句子结构的特点可以分为三类：<br>A  直接被动句       B  物主被动句       C  间接被动句</p><h3 id="直接被动句"><a href="#直接被动句" class="headerlink" title="直接被动句"></a>直接被动句</h3><h4 id="（人物）N1は-が-N2-人-にV-ら-れる"><a href="#（人物）N1は-が-N2-人-にV-ら-れる" class="headerlink" title="（人物）N1は/が  N2 (人)にＶ(ら)れる"></a>（人物）N1は/が  N2 (人)にＶ(ら)れる</h4><p>主语一般为表人的名词，谓语动词为他动词  受到~，被~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1　母が子供を叱る。</span><br><span class="line">→子供が母に叱られる。</span><br><span class="line"></span><br><span class="line">２　犬はおばあさんを噛んだ。（噛む：かむ０）</span><br><span class="line">→おばあさんは犬に噛まれた。</span><br></pre></td></tr></table></figure><h4 id="N1-物-は-が-N2-人-にV-ら-れる"><a href="#N1-物-は-が-N2-人-にV-ら-れる" class="headerlink" title="N1(物)は/が  N2(人)にＶ(ら)れる"></a>N1(物)は/が  N2(人)にＶ(ら)れる</h4><p> 主语一般为事物性名词，动作的主体一般为非特定的个人（某一不确定的人的群体），有时会省略，多用于客观的描述某一现象。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.この本は多くの人に読まれている。</span><br><span class="line">２.きのう、駅前のデパートでネックレスが盗まれた。</span><br><span class="line">３.日本語能力試験は７月３日に行われる。</span><br></pre></td></tr></table></figure><h4 id="N1-物・こと-は-がN2-人-によってV-ら-れる"><a href="#N1-物・こと-は-がN2-人-によってV-ら-れる" class="headerlink" title="N1(物・こと)は/がN2(人)によってＶ(ら)れる"></a>N1(物・こと)は/がN2(人)によってＶ(ら)れる</h4><p>主语：事物名词<br>谓语是表示发明、创造、创作或发现一类（作る、発明する、設計する、書く）的动词，<br>动作主体用によって表示。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.この建物は有名な建築家によって設計された。</span><br><span class="line">２.この製品はイギリス人のデザイナーによって作られた。</span><br></pre></td></tr></table></figure><h4 id="N1-人-は-が-N2-人-に-から-N3-こと・もの-をV-ら-れる"><a href="#N1-人-は-が-N2-人-に-から-N3-こと・もの-をV-ら-れる" class="headerlink" title="N1(人)は/が (N2(人)に/から)N3(こと・もの)をＶ(ら)れる"></a>N1(人)は/が (N2(人)に/から)N3(こと・もの)をＶ(ら)れる</h4><p>原动作主体充当补语，有时省略；原动作客体不变。<br>一般为表示语言行为或感情、态度的他动词。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.友達が私に将来の仕事について相談した。</span><br><span class="line">→友達に将来の仕事について相談された。</span><br><span class="line"></span><br><span class="line">２.周りの人が反対した。</span><br><span class="line">→周りの人に反対されても、自分がどうしたいかということ</span><br><span class="line">  が一番大事だと思う。</span><br></pre></td></tr></table></figure><h3 id="物主被动句"><a href="#物主被动句" class="headerlink" title="物主被动句"></a>物主被动句</h3><h3 id="N1-所有者-は-が-N2に-N3を-V（ら）れる"><a href="#N1-所有者-は-が-N2に-N3を-V（ら）れる" class="headerlink" title="N1(所有者)は/が  N2に N3を　Ｖ（ら）れる"></a>N1(所有者)は/が  N2に N3を　Ｖ（ら）れる</h3><p> 某事物的拥有者在被动句里做主语，而该事物在被动句里仍然充当宾语。这种被动句通常明显地表现出受害的意识。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.　弟は私のパソコンを壊しました。</span><br><span class="line">→私は弟にパソコンを壊されました。</span><br><span class="line"></span><br><span class="line">２.　私は電車の中で（男の人に）足を踏まれました。</span><br></pre></td></tr></table></figure><h3 id="间接被动句"><a href="#间接被动句" class="headerlink" title="间接被动句"></a>间接被动句</h3><h4 id="N1-人-は-が-N2に-N3を-V-ら-れる"><a href="#N1-人-は-が-N2に-N3を-V-ら-れる" class="headerlink" title="N1(人)は/が N2に (N3を)Ｖ(ら)れる"></a>N1(人)は/が N2に (N3を)Ｖ(ら)れる</h4><p>间接被动句中做主语的一般是在原主动句不曾出现的名词，谓语动词多为自动词，表示某一事态的发生间接地给另一方（多为说话人）带来了不良的影响或损害。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.自动词作谓语</span><br><span class="line">１.   3年前に母親が死んだ。</span><br><span class="line">        →彼は3年前に母親に死なれた。</span><br><span class="line">２.    遠足の日に、雨に降られて困った。</span><br><span class="line"></span><br><span class="line">b.他动词作谓语</span><br><span class="line">１.     一年生が先に運動場を占領した。</span><br><span class="line">         →私たちは一年生に運動場を占領された。</span><br><span class="line">２.     レストランで、隣のテーブルの人にタバコを吸われて、気   </span><br><span class="line">          分が悪くなった。</span><br></pre></td></tr></table></figure><h3 id="没有被动形式的动词"><a href="#没有被动形式的动词" class="headerlink" title="没有被动形式的动词"></a>没有被动形式的动词</h3><p>1、表示能力的动词（できる、わかる等）及动词的可能态。<br>2、状态动词。（ある、いる等）<br>3、本身含有被动意义的动词.(見つける、捕まる、教わる等)<br>4、含有自发意义的动词。（聞こえる、見える、等）</p><h3 id="Nをきっかけに-して-lt-契机-gt"><a href="#Nをきっかけに-して-lt-契机-gt" class="headerlink" title="Ｎをきっかけに(して)&lt;契机&gt;"></a>Ｎをきっかけに(して)&lt;契机&gt;</h3><p>表示以某事为机会、线索、契机等，后项发生前所未有的重大转折。<br>汉语 ：以…为契机、以…为开端<br>★：其他形式：～がきっかけで<br>　　　　　　　～がきっかけになって</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.姉は結婚をきっかけに、仕事をやめた。</span><br><span class="line">2.恵まれない子供たちの姿を見たのがきっかけで、この支援活動を始めたのです。(2008年真题)</span><br></pre></td></tr></table></figure><h3 id="らしい-lt-传闻、推测-gt"><a href="#らしい-lt-传闻、推测-gt" class="headerlink" title="らしい&lt;传闻、推测&gt;"></a>らしい&lt;传闻、推测&gt;</h3><p>表示间接的传闻或有客观依据的推测，说话人对所述内容的确信程度相当高。程度比「ようだ」更可靠。<br>接续： A1、Ｖ连体形   A2+、N+<br>汉语：似乎、好像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.天気予報によると明日は雨らしい。</span><br><span class="line">2.二人は来年結婚するらしい。(2007年真题)</span><br><span class="line">3.彼は自分で会社を作るらしい。</span><br><span class="line">4.明日はいい天気らしい。(2002年真题)</span><br></pre></td></tr></table></figure><h3 id="ところだ"><a href="#ところだ" class="headerlink" title="ところだ"></a>ところだ</h3><p>作为形式名词接在动词的肯定简体形式后，表示动作所处的阶段。</p><h4 id="a-Vるところだ：正要…、刚要…"><a href="#a-Vるところだ：正要…、刚要…" class="headerlink" title="a.　Vるところだ：正要…、刚要…"></a>a.　Vるところだ：正要…、刚要…</h4><p>表示该动作行为在说话时即将开始进行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.　今、出かけるところだ。</span><br><span class="line">２.　ご飯を食べに行くところだ。</span><br></pre></td></tr></table></figure><h4 id="b-Vているところだ：现在正在…"><a href="#b-Vているところだ：现在正在…" class="headerlink" title="b.　Vているところだ：现在正在…"></a>b.　Vているところだ：现在正在…</h4><p>表示该动作行为在说话时正在进行中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.　彼女は今ギョーザを作っているところだ。</span><br><span class="line">２.　私はちょうどお風呂に入っているところだ。</span><br></pre></td></tr></table></figure><h4 id="c-Vたところだ：刚刚…、刚…完"><a href="#c-Vたところだ：刚刚…、刚…完" class="headerlink" title="c.　Vたところだ：刚刚…、刚…完"></a>c.　Vたところだ：刚刚…、刚…完</h4><p>表示该动作行为在说话时刚刚结束。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.　授業が終わったところだ。</span><br><span class="line">２.　私が病院に駆けつけたとき、彼女は息を吹き返したところでした。</span><br></pre></td></tr></table></figure><h4 id="d-Vていたところだ"><a href="#d-Vていたところだ" class="headerlink" title="d.　Vていたところだ"></a>d.　Vていたところだ</h4><p>表示从过去某一时点到说话之前该状态一直在持续。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.　なかなか連絡がないから心配していたところだ。</span><br><span class="line">２.　休もうかどうしようかと考えていたところだ。</span><br></pre></td></tr></table></figure><h4 id="Vるところだ・Vるところだった"><a href="#Vるところだ・Vるところだった" class="headerlink" title="Ｖるところだ・Ｖるところだった"></a>Ｖるところだ・Ｖるところだった</h4><p>Vるところだ：正要…、刚要…<br>表示该动作行为在说话时即将开始进行</p><p>Ｖるところだった<br>表示某情况险些发生，多用于庆幸、懊恼、遗憾等的情绪表现，相当于：差一点儿······；险些······</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">車道を歩いたので、もう少しでひき殺されるところだった。</span><br></pre></td></tr></table></figure><h3 id="やすい-にくい"><a href="#やすい-にくい" class="headerlink" title="やすい/にくい"></a>やすい/にくい</h3><h4 id="a-V-R＋やすい"><a href="#a-V-R＋やすい" class="headerlink" title="a.V-R＋やすい"></a>a.V-R＋やすい</h4><p>表示该动作很容易做，该事情很容易发生。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.　その町は物価も安く、人も親切で住みやすいところです。</span><br><span class="line">２.　彼は太りやすい体質なので、食べ過ぎないようにしているそうだ。</span><br></pre></td></tr></table></figure><h4 id="b-V-R＋にくい"><a href="#b-V-R＋にくい" class="headerlink" title="b. V-R＋にくい"></a>b. V-R＋にくい</h4><p>表示该动作很困难，轻易做不到的意思。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.　これはちょっと言いにくい話なんですが。</span><br><span class="line">２.　砂利道はハイヒールでは歩きにくい。</span><br></pre></td></tr></table></figure><h3 id="～ば～ほど：越…越…"><a href="#～ば～ほど：越…越…" class="headerlink" title="～ば～ほど：越…越…"></a>～ば～ほど：越…越…</h3><p>接续:  Nなら/であれば，(名词で)ある＋ほど<br>           Na ならば/であれば， Naな/である＋ほど<br>           A-ければ， A-い＋ほど<br>           V-ば＋，V‐る＋ほど</p><p>表示随着前句所述的动作、行为或性质状态的发展变化，主句所述的性质状态就越典型或随之发生相应的变化。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.　厳しい時代であればあるほど、自分を磨くのができるんだ。</span><br><span class="line">2.　子供は元気であれば元気なほどいいです。</span><br><span class="line">3.　給料は高ければ高いほどいいです。</span><br><span class="line">4.　会話は練習すれば(練習)するほど上手になります。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;被动态&quot;&gt;&lt;a href=&quot;#被动态&quot; class=&quot;headerlink&quot; title=&quot;被动态&quot;&gt;&lt;/a&gt;被动态&lt;/h3&gt;&lt;p&gt;定义：以中心动词的行为者以外的非积极参与者为主语进行描写的句式叫做被动态。多伴有受到危害、损害、伤害之意，但在现代日语中，主体受益、
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo系统重装恢复</title>
    <link href="https://janvia.github.io/2019/03/12/hexo%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%81%A2%E5%A4%8D/"/>
    <id>https://janvia.github.io/2019/03/12/hexo系统重装恢复/</id>
    <published>2019-03-12T09:13:01.000Z</published>
    <updated>2023-06-27T15:40:41.354Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装node-js和npm"><a href="#安装node-js和npm" class="headerlink" title="安装node.js和npm"></a>安装node.js和npm</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure><p>新版本安装(hexo不支持)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - &amp;&amp;\</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure></p><p>nvm指定版本安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains4 wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | proxychains4 bash</span><br><span class="line">source ~/.zshrc</span><br><span class="line">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node/</span><br><span class="line">export NVM_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs</span><br><span class="line">nvm install 12.16.2</span><br><span class="line">nvm use 12.16.2</span><br></pre></td></tr></table></figure></p><p>换源<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g nrm</span><br><span class="line">nrm ls</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure></p><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`sudo npm install -g hexo-cli`</span><br></pre></td></tr></table></figure><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><h4 id="配置github-git"><a href="#配置github-git" class="headerlink" title="配置github-git"></a>配置github-git</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your github name&quot;</span><br><span class="line">git config --global user.email &quot;example@email.com&quot;</span><br></pre></td></tr></table></figure><p>填写github账户名和注册邮箱</p><h4 id="创建公钥"><a href="#创建公钥" class="headerlink" title="创建公钥"></a>创建公钥</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;example@email.com&quot;</span><br></pre></td></tr></table></figure><p>将在~/.ssh/文件夹下生成github_name 和 github_name.pub两个文件，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit github_name.pub</span><br></pre></td></tr></table></figure><p>打开github登录，点击头像setting -&gt; SSH and GPG keys，将.pub 文件内容复制到 SSH keys中</p><p>测试是否设置成功<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>测试是否成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装node-js和npm&quot;&gt;&lt;a href=&quot;#安装node-js和npm&quot; class=&quot;headerlink&quot; title=&quot;安装node.js和npm&quot;&gt;&lt;/a&gt;安装node.js和npm&lt;/h4&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
      <category term="工具" scheme="https://janvia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="https://janvia.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>23单元</title>
    <link href="https://janvia.github.io/2019/02/27/23%E5%8D%95%E5%85%83/"/>
    <id>https://janvia.github.io/2019/02/27/23单元/</id>
    <published>2019-02-27T09:01:33.000Z</published>
    <updated>2019-03-13T05:54:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自动词、他动词"><a href="#自动词、他动词" class="headerlink" title="自动词、他动词"></a>自动词、他动词</h3><p>自动词：表示状态，能力，现象的动词集合，不涉及人为的影响。</p><p>他动词：表示具有意志性的、指向某对象物体的行为动词集合。</p><p>1）以す结尾的动词，都是五段他动词，与它对应的动词是自动词；<br>     　　鳴らすー鳴る　　倒すー倒れる<br>2）大多数下一段动词（不含れる）是他动词，与它对应的五段动词是自动词；<br>如：　　始めるー始まる　　かけるーかかる　つけるーつく　<br>3）可能动词及表示能力的动词，都是自动词；<br>　　如：書ける、見える、聞こえる　できる　　<br>4）大多「れる」结尾的下一段动词是自动词，与它相对的是他动词，「れる」结尾的下一段动词，其对应的动词70%以上是以「す」结尾的他动词　　　<br>　　崩れる—崩す　離れるー離す　、倒れる—倒す<br>只有自动词没有他动词的动词<br> 居る、ある、咲く、行く、来る、寝る、眠る、泣く<br>只有他动词没有自动词的动词<br>買う、売る、書く　打つ、殺す、聞く､話す、読む、見る、思う、考える</p><h3 id="Vておく-lt-动作结果的存续-gt"><a href="#Vておく-lt-动作结果的存续-gt" class="headerlink" title="Vておく&lt;动作结果的存续&gt;"></a>Vておく&lt;动作结果的存续&gt;</h3><p> 口语形式：～とく<br> 表示采取某种行为，<br> A、为后面要做的事情，事先做好某种准备。<br>Ｂ、将其结果状态保持下去。<br>Ｃ、有时表示一种临时的措施。<br>汉语：预先~；先~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.後で捨てるから、ゴミを集めておいてください。(2006年真题)</span><br><span class="line">2.先生が来るからテーブルの上にお皿を並べておく(2004年真题)</span><br><span class="line">3.教室のドア、開けておきましょう。</span><br></pre></td></tr></table></figure><h3 id="V（他动词）てある-lt-客体存续的状态-gt"><a href="#V（他动词）てある-lt-客体存续的状态-gt" class="headerlink" title="V（他动词）てある&lt;客体存续的状态&gt;"></a>V（他动词）てある&lt;客体存续的状态&gt;</h3><p>表示主体有意图的动作行为完成之后的结果存在的状态。<br>★因为是表示存续的状态，句中主语为动作的客体，动词多使用自主的他动词，他动词的“を格” 要换成“が格”形式。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.教室に試験の時間割が貼ってある。(2010年真题)</span><br><span class="line">2.起きてみると、朝ご飯がもう作ってあった。</span><br><span class="line">3.部屋に花が飾ってある。</span><br></pre></td></tr></table></figure><p>窓が開けてある（窗户打开着）<br>       动作者不出现在句子中，但是能让人感受到动作者的存在</p><p>窓が開いている（窗户开着）<br>        使人感受不到动作者的存在。</p><p>a　会議の資料はコピーしておいた。<br>b　会議の資料はコピーしてあった。</p><p>1二者着重点不同。<br>「ておく」叙述者多为动作执行者，着重于动作本身；<br>「てある」着重动作完成后的结果状态。</p><p>2「ておく」和前面的动词结合，表示某项行为，而不是某种结果，<br>     所以可以表示意志「～ておこう」，命令「～ておきなさい」，<br>   「てある」则没有这样的用法。<br>    電気を消さないで、朝までつけておこう。</p><p>3「ておく」作为一种“事先准备”， 用“非过去时”，表示动作将要着手；用“过去时”，表示准备动作已经完成，其动作的结果保存了下来。；<br>  「てある」则表示动作完成后达到的结果，即其动作对象所处的一种状态。因此其“现在时”和“过去时”的差别并不太大。</p><p>   「てある」表示这种准备已经做好的状态<br>　「ておく」表示作为准备采取了某种行为</p><h3 id="Vてよかった-lt-积极评价-gt"><a href="#Vてよかった-lt-积极评价-gt" class="headerlink" title="Ｖてよかった&lt;积极评价&gt;"></a>Ｖてよかった&lt;积极评价&gt;</h3><p>说明：表示对已经发生的事情的积极评价，含有两种意思:<br>一是“独自庆幸”，<br>二是“感激+庆幸”。都是说现在的心情。<br>汉语：幸好…、…真好</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１.とてもいい映画で、見てよかったと思う。</span><br><span class="line">２.王さんがいてくれてよかった。</span><br></pre></td></tr></table></figure><h3 id="Vばよかった-lt-后悔、遗憾-gt"><a href="#Vばよかった-lt-后悔、遗憾-gt" class="headerlink" title="Vばよかった&lt;后悔、遗憾&gt;"></a>Vばよかった&lt;后悔、遗憾&gt;</h3><p>表示对实际未能发生的事情或期待落空时的遗憾心情，既可以是说话人自身的后悔，也可以是对对方的遗憾或责难。<br>汉语：如果~~就好了<br>★：常和「のに」搭配使用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.私も行けばよかったと後悔している。</span><br><span class="line">2.旅行は楽しかったよ。高橋さんも来ればよかったのに。</span><br><span class="line">3.あなたに会わなければよかったのに。</span><br></pre></td></tr></table></figure><h3 id="Nをはじめ-lt-代表性事物-gt"><a href="#Nをはじめ-lt-代表性事物-gt" class="headerlink" title="Ｎをはじめ&lt;代表性事物&gt;"></a>Ｎをはじめ&lt;代表性事物&gt;</h3><p>提出具有代表性或典型的人或物，表明该人或物是同类事物中最为重要，具有代表性。<br>汉语：以~为首<br>★：常用形式：Ｎをはじめとして<br>　　　　　　　Ｎをはじめとする</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.日本滞在中は北川先生をはじめ多くの方々にお世話になり、　本当にありがとうございました。(2013年真题)</span><br><span class="line">2.私たちの町にはこのお寺をはじめ、いろいろな古い建物がある。(2005年真题)</span><br></pre></td></tr></table></figure><h3 id="V-ることになる-lt-事态发展的结果-gt"><a href="#V-ることになる-lt-事态发展的结果-gt" class="headerlink" title="V-ることになる&lt;事态发展的结果&gt;"></a>V-ることになる&lt;事态发展的结果&gt;</h3><p>表客观存在的规定（由于某种外在的原因导致形成了某种决定）或事态自然发展、变化所产生的结果。</p><p>接续：V-る/Ｖ－ない<br>            决定~~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.明日は停電なので、会社は休むことになった。</span><br><span class="line">2.来年帰国することになると思う。</span><br><span class="line">3.わたしたち、結婚することになりました。</span><br></pre></td></tr></table></figure><h3 id="V-ることにする-lt-决定-gt"><a href="#V-ることにする-lt-决定-gt" class="headerlink" title="V-ることにする&lt;决定&gt;"></a>V-ることにする&lt;决定&gt;</h3><p>表示动作主体决定或下决心做（或不做）某事。</p><p>接续：V-る/Ｖ－ない</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.王さんはダイエットすることにした。</span><br><span class="line">2.私は今日からタバコをやめることにした。</span><br></pre></td></tr></table></figure><h3 id="Nをもとに-して-lt-题材，话题-gt"><a href="#Nをもとに-して-lt-题材，话题-gt" class="headerlink" title="Ｎをもとに(して)&lt;题材，话题&gt;"></a>Ｎをもとに(して)&lt;题材，话题&gt;</h3><p>表示以某一事物为题材或话题进行言语行为或创作活动。</p><p>汉语：以…为基础、根据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.昨日見たドラマは、実際にあった話をもとに作られたそうだ。(2008年真题)</span><br><span class="line">2.漢字をもとにして仮名が作り出された。</span><br><span class="line">3.日本語のクラスは、テストの点数と今までの学習期間をもとに決定される。(2003年真题)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;自动词、他动词&quot;&gt;&lt;a href=&quot;#自动词、他动词&quot; class=&quot;headerlink&quot; title=&quot;自动词、他动词&quot;&gt;&lt;/a&gt;自动词、他动词&lt;/h3&gt;&lt;p&gt;自动词：表示状态，能力，现象的动词集合，不涉及人为的影响。&lt;/p&gt;
&lt;p&gt;他动词：表示具有意志性的、
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>函数基础和函数参数</title>
    <link href="https://janvia.github.io/2019/01/29/%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80%E5%92%8C%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/"/>
    <id>https://janvia.github.io/2019/01/29/函数基础和函数参数/</id>
    <published>2019-01-29T05:49:24.000Z</published>
    <updated>2019-01-29T06:11:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数基础和函数参数"><a href="#函数基础和函数参数" class="headerlink" title="函数基础和函数参数"></a>函数基础和函数参数</h3><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><p>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。</p><h3 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h3><h4 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h4><blockquote><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul></blockquote><p><strong>演示</strong>：</p><blockquote><p>我们打印几个列表</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------'</span>)</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="string">'A'</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------'</span>)</span><br><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="string">'s'</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">---------</span><br><span class="line">1</span><br><span class="line">A</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">---------</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">s</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><blockquote><p>有没有更简单的呢？</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l1 = [1, 0, 5, 7, 9]</span><br><span class="line">l2 = [1, &apos;A&apos;, 5, 7, 9]</span><br><span class="line">l3 = [1, 0, &apos;S&apos;, 7, 9]</span><br><span class="line"></span><br><span class="line">def demo(li):</span><br><span class="line">for i in li:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">demo(l1)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">demo(l2)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">demo(l3)</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">---------</span><br><span class="line">1</span><br><span class="line">A</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">---------</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">S</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><blockquote><p>上述就是使用函数的形式来实现多个列表的打印，是不是比前面的更简单。</p></blockquote><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><blockquote><p>def 函数名(参数)：</p><p> pass</p><p> return 表达式</p><p>函数名命名规则： 字母、数字和下划线组成，和变量命名规则一致</p><p>return 后面可以返回任意表达式，但不能是赋值语句</p><p>注意：函数名定义和变量名的定义是一样的，只能使用字母、数字和下划线定义，不能以数字开头。</p></blockquote><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><blockquote><p>关键字是不能拿来做变量定义的。</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: a</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-3</span><span class="number">-3</span>f786850e387&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 a</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'a'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="function"><span class="keyword">def</span></span></span><br><span class="line">  File "&lt;ipython-input-4-7b18d017f89f&gt;", line 1</span><br><span class="line">    <span class="function"><span class="keyword">def</span></span></span><br><span class="line"><span class="function">       ^</span></span><br><span class="line"><span class="function"><span class="title">SyntaxError</span>:</span> invalid syntax</span><br></pre></td></tr></table></figure><blockquote><p>如果把关键字拿来定义，是会报语法错误的。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [1]: import keyword</span><br><span class="line"></span><br><span class="line">In [2]: print(keyword.kwlist)</span><br><span class="line">[&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>上述就是整个Python编程语言的全部关键字，在基础阶段都会提到的。</p></blockquote><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l1 = [1, 0, &apos;S&apos;, 7, 9]</span><br><span class="line"></span><br><span class="line">def demo(li):</span><br><span class="line">    for i in li:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line">demo(l1)</span><br></pre></td></tr></table></figure><blockquote><p>调用方式：函数名（参数）</p></blockquote><h4 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l1 = [1, 0, &apos;S&apos;, 7, 9]</span><br><span class="line"></span><br><span class="line">def demo(li):</span><br><span class="line">    for i in li:</span><br><span class="line">        print(i)</span><br><span class="line">    return &apos;ok&apos;</span><br><span class="line"></span><br><span class="line">print(demo(l1))</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">S</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><blockquote><p>return：</p><p>注意 return 和 print 的区别，return是函数的返回值，返回值可以赋值给变量，而print只是打印出来</p></blockquote><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><blockquote><p>那函数里面可以传入哪些对象呢？</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def demo(x):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">demo(&apos;demo&apos;)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">demo</span><br></pre></td></tr></table></figure><blockquote><p>如果我们不传值呢？</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def demo(x):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">demo()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TypeError: demo() missing 1 required positional argument: &apos;x&apos;</span><br></pre></td></tr></table></figure><blockquote><p>TypeError：demo()缺少一个必需的位置参数：’x’。</p><p>传入几个参数呢？</p></blockquote><h4 id="必备参数"><a href="#必备参数" class="headerlink" title="必备参数"></a>必备参数</h4><blockquote><p>def func(x):</p><p>pass</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def demo(x):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">demo(1, 2)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TypeError: demo() takes 1 positional argument but 2 were given</span><br></pre></td></tr></table></figure><blockquote><p>一个参数对应一个数值</p></blockquote><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><blockquote><p>def func(x, y=None):</p><p>pass</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def demo(x, y=1):</span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">demo(1, 2)</span><br><span class="line">demo(3)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2</span><br><span class="line">3 1</span><br></pre></td></tr></table></figure><blockquote><p>y=1.就是默认参数，没有传入新参数的时候，就使用默认参数。</p></blockquote><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x, y=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">demo(y=<span class="string">"q"</span>, x=<span class="string">'s'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2</span><br><span class="line">s q</span><br></pre></td></tr></table></figure><blockquote><p>关键字参数，调用的时候带上参数名。</p></blockquote><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><blockquote><p>def func(<em>args, *</em>kwargs):</p><p>pass</p><p>注意：*+参数名</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def demo(*args):</span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">demo(1, 2, 3, 4)</span><br><span class="line">demo(1)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1, 2, 3, 4)</span><br><span class="line">(1,)</span><br></pre></td></tr></table></figure><blockquote><p>参数名前面加<code>*号</code>是不定长参数，输出是一个元组。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*a)</span>:</span></span><br><span class="line">    print(*a)  <span class="comment"># 加*：去除括号</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(<span class="string">'-------'</span>)</span><br><span class="line">demo((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="string">'-------'</span>)</span><br><span class="line">demo(*(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3 4</span><br><span class="line">(1, 2, 3, 4)</span><br><span class="line">-------</span><br><span class="line">(1, 2, 3, 4)</span><br><span class="line">((1, 2, 3, 4),)</span><br><span class="line">-------</span><br><span class="line">1 2 3 4</span><br><span class="line">(1, 2, 3, 4)</span><br></pre></td></tr></table></figure><blockquote><p>加*：去除括号</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def demo(**a):</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">demo(x=1, y=2, s=2)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&apos;x&apos;: 1, &apos;y&apos;: 2, &apos;s&apos;: 2&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参数名前面加<code>**号</code>是不定长参数，输出是一个字典。</p><p>注意：传入的参数是键值对。</p></blockquote><h4 id="演示："><a href="#演示：" class="headerlink" title="演示："></a><strong>演示：</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def demo(*args, **kwargs):</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">demo(1, 2, 3, x=1, y=2, s=2)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1, 2, 3)</span><br><span class="line">&#123;&apos;x&apos;: 1, &apos;y&apos;: 2, &apos;s&apos;: 2&#125;</span><br></pre></td></tr></table></figure><blockquote><p>传入的键值对，只能放在最后。</p></blockquote><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>必备参数：在函数调用的时候，必备参数必须要传入</p><p>默认参数： 在函数调用的时候，默认参数可以不传入值，不传入值时，会使用默认参数</p><p>不定长参数：在函数调用的时候，不定长参数可以不传入，也可以传入任意长度。其中定义时，元组形式可以放到参数最前面，字典形式只能放到最后面</p></blockquote><h3 id="常见的内置函数"><a href="#常见的内置函数" class="headerlink" title="常见的内置函数"></a>常见的内置函数</h3><p>常见内置函数提供了一些处理的数据的方法，可以帮助我们提高开发速度</p><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><h5 id="len"><a href="#len" class="headerlink" title="len"></a><code>len</code></h5><blockquote><p>求长度</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">li = [2,8,5]</span><br><span class="line">In [6]: len(li)</span><br><span class="line">Out[6]: 3</span><br></pre></td></tr></table></figure><h5 id="min"><a href="#min" class="headerlink" title="min"></a><code>min</code></h5><blockquote><p>求最小值</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">li = [2,8,5]</span><br><span class="line">In [6]: min(li)</span><br><span class="line">Out[6]: 2</span><br></pre></td></tr></table></figure><h5 id="max"><a href="#max" class="headerlink" title="max"></a><code>max</code></h5><blockquote><p>求最大值</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">li = [2,8,5]</span><br><span class="line">In [8]: max(li)</span><br><span class="line">Out[8]: 8</span><br></pre></td></tr></table></figure><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a><code>sorted</code></h5><blockquote><p>排序</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">li = [2,8,5]</span><br><span class="line">In [9]: sorted(li)</span><br><span class="line">Out[9]: [2, 5, 8]</span><br></pre></td></tr></table></figure><h5 id="reversed"><a href="#reversed" class="headerlink" title="reversed"></a><code>reversed</code></h5><blockquote><p>反向</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">li = [2,8,5]</span><br><span class="line">In [10]: reversed(li)</span><br><span class="line">Out[10]: &lt;list_reverseiterator at 0x7f68aa81af98&gt;</span><br><span class="line"></span><br><span class="line">In [11]: list(reversed(li))</span><br><span class="line">Out[11]: [5, 8, 2]</span><br></pre></td></tr></table></figure><h5 id="sum"><a href="#sum" class="headerlink" title="sum"></a><code>sum</code></h5><blockquote><p>求和</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">li = [2,8,5]</span><br><span class="line">In [12]: sum(li)</span><br><span class="line">Out[12]: 15</span><br></pre></td></tr></table></figure><h4 id="进制转换函数"><a href="#进制转换函数" class="headerlink" title="进制转换函数"></a>进制转换函数</h4><h5 id="bin"><a href="#bin" class="headerlink" title="bin"></a><code>bin</code></h5><blockquote><p>二进制</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [13]: bin(12)</span><br><span class="line">Out[13]: &apos;0b1100&apos;</span><br></pre></td></tr></table></figure><h5 id="oct"><a href="#oct" class="headerlink" title="oct"></a><code>oct</code></h5><blockquote><p>八进制</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [16]: oct(18)</span><br><span class="line">Out[16]: &apos;0o22</span><br></pre></td></tr></table></figure><h5 id="hex"><a href="#hex" class="headerlink" title="hex"></a><code>hex</code></h5><blockquote><p>十六进制</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [17]: hex(12)</span><br><span class="line">Out[17]: &apos;0xc&apos;</span><br></pre></td></tr></table></figure><h5 id="ord"><a href="#ord" class="headerlink" title="ord"></a><code>ord</code></h5><blockquote><p>字符转ASCII码</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [19]: ord(&apos;a&apos;)</span><br><span class="line">Out[19]: 97</span><br></pre></td></tr></table></figure><h5 id="chr"><a href="#chr" class="headerlink" title="chr"></a><code>chr</code></h5><blockquote><p>ASCII码转字符</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [20]: chr(97)</span><br><span class="line">Out[20]: &apos;a&apos;</span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a><code>enumerate</code></h5><blockquote><p>返回一个可以枚举的对象</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [21]: li = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</span><br><span class="line"></span><br><span class="line">In [22]: enumerate(li)</span><br><span class="line">Out[22]: &lt;enumerate at 0x7f68aa877d80&gt;</span><br><span class="line"></span><br><span class="line">In [23]: list(enumerate(li))</span><br><span class="line">Out[23]: [(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;), (3, &apos;d&apos;)]</span><br><span class="line"></span><br><span class="line">In [24]: dict(enumerate(li))</span><br><span class="line">Out[24]: &#123;0: &apos;a&apos;, 1: &apos;b&apos;, 2: &apos;c&apos;, 3: &apos;d&apos;&#125;</span><br></pre></td></tr></table></figure><h5 id="eval"><a href="#eval" class="headerlink" title="eval"></a><code>eval</code></h5><blockquote><p>取出字符串中内容</p><p>将字符串str当成有效的表达式来求值并返回计算结果</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [25]: a = &quot;&#123;&apos;a&apos;:1&#125;&quot;</span><br><span class="line"></span><br><span class="line">In [26]: eval(a)</span><br><span class="line">Out[26]: &#123;&apos;a&apos;: 1&#125;</span><br><span class="line"></span><br><span class="line">In [27]: b = &apos;1 + 2 + 3&apos;</span><br><span class="line"></span><br><span class="line">In [28]: eval(b)</span><br><span class="line">Out[28]: 6</span><br></pre></td></tr></table></figure><h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h5><blockquote><p>执行字符串或complie方法编译过的字符串，没有返回值</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">29</span>]: s = <span class="string">'''</span></span><br><span class="line"><span class="string">    ...: z = 10</span></span><br><span class="line"><span class="string">    ...: su = x + y + z</span></span><br><span class="line"><span class="string">    ...: print(su)</span></span><br><span class="line"><span class="string">    ...: print('OK')</span></span><br><span class="line"><span class="string">    ...: '''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: exec(s)</span><br><span class="line"><span class="number">13</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: exec(s,&#123;<span class="string">'x'</span>:<span class="number">0</span>,<span class="string">'y'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="number">10</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: exec(s,&#123;<span class="string">'x'</span>:<span class="number">0</span>,<span class="string">'y'</span>:<span class="number">0</span>&#125;,&#123;<span class="string">'y'</span>:<span class="number">10</span>,<span class="string">'z'</span>:<span class="number">0</span>&#125;)  <span class="comment">#以字符串为主,以最后的为主</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p>注意：eval 和 exec 是炸弹 能不能就不用，就好像你从不知道这东西一样，除非你足够的熟悉</p></blockquote><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h5><blockquote><p>过滤器</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [38]: def test1(x):</span><br><span class="line">    ...:     return x&gt;10</span><br><span class="line">    ...: l1 = [10,2,20,13,5]</span><br><span class="line"></span><br><span class="line">In [39]: filter(test1, l1)</span><br><span class="line">Out[39]: &lt;filter at 0x7f68aa7ecb70&gt;</span><br><span class="line"></span><br><span class="line">In [40]: list(filter(test1, l1))</span><br><span class="line">Out[40]: [20, 13]</span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h5><blockquote><p>对于参数iterable中的每个元素都应用fuction函数，并将结果作为列表返回</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [41]: l2 = [1,2,3]</span><br><span class="line"></span><br><span class="line">In [42]: map(str,l2)</span><br><span class="line">Out[42]: &lt;map at 0x7f68aa7ecba8&gt;</span><br><span class="line"></span><br><span class="line">In [43]: list(map(str,l2))</span><br><span class="line">Out[43]: [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]</span><br></pre></td></tr></table></figure><h5 id="zip"><a href="#zip" class="headerlink" title="zip"></a><code>zip</code></h5><blockquote><p>将对象逐一配对</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [44]: l3 = [1,2,3]</span><br><span class="line"></span><br><span class="line">In [45]: t1 = (&apos;a&apos;,&apos;b&apos;,&apos;c&apos;)</span><br><span class="line"></span><br><span class="line">In [46]: zip(t1,l3)</span><br><span class="line">Out[46]: &lt;zip at 0x7f68abb3ec48&gt;</span><br><span class="line"></span><br><span class="line">In [47]: list(zip(t1,l3))</span><br><span class="line">Out[47]: [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)]</span><br><span class="line"></span><br><span class="line">In [48]: dict(zip(t1,l3))</span><br><span class="line">Out[48]: &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数基础和函数参数&quot;&gt;&lt;a href=&quot;#函数基础和函数参数&quot; class=&quot;headerlink&quot; title=&quot;函数基础和函数参数&quot;&gt;&lt;/a&gt;函数基础和函数参数&lt;/h3&gt;&lt;p&gt;函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。&lt;/p&gt;
&lt;p&gt;函
      
    
    </summary>
    
      <category term="python" scheme="https://janvia.github.io/categories/python/"/>
    
    
      <category term="函数" scheme="https://janvia.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
