<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sylvia</title>
  
  <subtitle>Viva La Vida</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://janvia.github.io/"/>
  <updated>2019-01-14T08:27:17.857Z</updated>
  <id>https://janvia.github.io/</id>
  
  <author>
    <name>sylvia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图床</title>
    <link href="https://janvia.github.io/2019/01/14/%E5%9B%BE%E5%BA%8A/"/>
    <id>https://janvia.github.io/2019/01/14/图床/</id>
    <published>2019-01-14T08:11:01.000Z</published>
    <updated>2019-01-14T08:27:17.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装picgo"><a href="#安装picgo" class="headerlink" title="安装picgo"></a>安装picgo</h2><p>下载地址: <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></p><ul><li><p>linux下载AppImage文件</p></li><li><p>右键属性，将权限设为允许为启动程序</p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>以阿里云为例：</p><ul><li><p>点击右上角头像，找到accessKeyId和accessKeySecret</p></li><li><p>创建对象存储，类型设为公共，记住存储空间名和地域（比如华南为oss-cn-shenzhen）</p></li><li><p>右键点击picgo，选择主窗口；将以上对应信息配置到图床配置，保存并应用</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装picgo&quot;&gt;&lt;a href=&quot;#安装picgo&quot; class=&quot;headerlink&quot; title=&quot;安装picgo&quot;&gt;&lt;/a&gt;安装picgo&lt;/h2&gt;&lt;p&gt;下载地址: &lt;a href=&quot;https://github.com/Molunerfinn/PicG
      
    
    </summary>
    
      <category term="工具" scheme="https://janvia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="图床" scheme="https://janvia.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>感知器与激活函数</title>
    <link href="https://janvia.github.io/2019/01/14/%E6%84%9F%E7%9F%A5%E5%99%A8%E4%B8%8E%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    <id>https://janvia.github.io/2019/01/14/感知器与激活函数/</id>
    <published>2019-01-14T00:48:40.000Z</published>
    <updated>2019-01-14T09:17:31.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>感知器是激活函数为阶跃函数的神经元。感知器的模型如下：<br><img src="https://jiangvia.oss-cn-shenzhen.aliyuncs.com/感知器/神经元.png" alt=""><br>·　输入(inputs)：一个感知器可以接收多个输入(x1,x2,…,xn|xi∈R)<br>·　权值(weights)：每一个输入上都有一个权值wi∈R，此外还有一个偏置项b∈R，也就是上图的w0。<br>·　加权和(weighted sum)：就是<strong>输入权值 x</strong> x <strong>权值 w</strong> + <strong>偏置项 b</strong>的总和。<br>·　激活函数(step function)：感知器的激活函数：</p><script type="math/tex; mode=display">f(x) =\begin{cases}0,  & \text{x>0} \\1, & \text{x≤0}\end{cases}</script><p>·　输出(output)：感知器的输出由加权值用激活函数做非线性变换。也就是这个公式：y=f(w⋅x+b)<br>我们使用unit激活函数结合上图就有：</p><p>y=f(w⋅x+b)=f(w1x1+w2x2+w3x3+bias)</p><p>其中f(x)就是激活函数 f(x)={1x&gt;0 0x≤0 ，图像如下图所示:<br><img src="https://jiangvia.oss-cn-shenzhen.aliyuncs.com/感知器/unit.png" alt=""></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><script type="math/tex; mode=display">x_1=[-1.0, 3.0, 2.0] \\ x_2=[2.0, -1.0, 5.0] \\ x_3=[-2.0, 0.0, 3.0 ] \\ x_4=[4.0, 1.0, 6.0] \\ w=[4.0, -3.0, 5.0 ] \\ b=2.0</script><p>则：</p><script type="math/tex; mode=display">X=\begin{bmatrix}  -1.0 & 3.0 & 2.0 \\ 2.0 & -1.0& 5.0 \\ -2.0& 0.0& 3.0 \\ 4.0& 1.0 & 6.0  \end{bmatrix}</script><script type="math/tex; mode=display">w^T =\begin{bmatrix} 4.0 \\ -3.0 \\ 5.0 \end{bmatrix}</script><p>所以：</p><script type="math/tex; mode=display">logits =  X\cdot w^T + b= \begin{bmatrix}  -1.0 & 3.0 & 2.0 \\ 2.0 & -1.0& 5.0 \\ -2.0& 0.0& 3.0 \\ 4.0& 1.0 & 6.0  \end{bmatrix} \cdot \begin{bmatrix} 4.0 \\ -3.0 \\ 5.0 \end{bmatrix} + 2.0 \\ =[-1.0 \ \ \  38.0 \ \ \ 7.0 \ \ \ 43.0 ]</script><p>带入激活函数：</p><script type="math/tex; mode=display">output = f(x)=[0\ \ \ 1 \ \ \ 1 \ \ \ 1 ]</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;感知器是激活函数为阶跃函数的神经元。感知器的模型如下：&lt;br&gt;&lt;img src=&quot;https://jiangvia.oss-cn-shenz
      
    
    </summary>
    
      <category term="深度学习" scheme="https://janvia.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="感知器" scheme="https://janvia.github.io/tags/%E6%84%9F%E7%9F%A5%E5%99%A8/"/>
    
      <category term="激活函数" scheme="https://janvia.github.io/tags/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络</title>
    <link href="https://janvia.github.io/2019/01/13/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://janvia.github.io/2019/01/13/卷积神经网络/</id>
    <published>2019-01-13T13:20:44.000Z</published>
    <updated>2019-01-13T13:51:43.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="net"><a href="#net" class="headerlink" title="net"></a>net</h2><p>新建netWork.py,添加以下代码</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import tensorflow as tf</span><br><span class="line">import config</span><br><span class="line"></span><br><span class="line"># 卷积操作</span><br><span class="line">def conv2d(name, l_input, w, b):</span><br><span class="line">    return tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(l_input, w, strides=[1, 1, 1, 1], padding=&apos;SAME&apos;), b), name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 最大下采样操作</span><br><span class="line">def max_pool(name, l_input, k):</span><br><span class="line">    return tf.nn.max_pool(l_input, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding=&apos;SAME&apos;, name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 归一化操作</span><br><span class="line">def norm(name, l_input, lsize=4):</span><br><span class="line">    return tf.nn.lrn(l_input, lsize, bias=1.0, alpha=0.001 / 9.0, beta=0.75, name=name)</span><br></pre></td></tr></table></figure><h3 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def LeNet(inputs):</span><br><span class="line"></span><br><span class="line">    mu = 0</span><br><span class="line">    sigma = 0.1</span><br><span class="line">    print(inputs.shape)</span><br><span class="line">    # TODO: 第一层卷积：输入=32x32x3, 输出=28x28x6</span><br><span class="line">    conv1_w = tf.Variable(tf.truncated_normal(shape=[5, 5, 3, 6], mean=mu, stddev=sigma))</span><br><span class="line">    conv1_b = tf.Variable(tf.zeros(6))</span><br><span class="line"></span><br><span class="line">    conv1 = tf.nn.conv2d(inputs, conv1_w, strides=[1, 1, 1, 1], padding=&apos;VALID&apos;) + conv1_b</span><br><span class="line">    print(conv1.shape)</span><br><span class="line">    # 激活函数</span><br><span class="line">    conv1_out = tf.nn.relu(conv1)</span><br><span class="line"></span><br><span class="line">    # 池化层， 输入=28x28x6, 输出=14x14x6</span><br><span class="line">    pool_1 = tf.nn.max_pool(conv1_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&apos;VALID&apos;)</span><br><span class="line">    print(pool_1.shape)</span><br><span class="line"></span><br><span class="line">    # TODO: 第二层卷积： 输入=14x14x6， 输出=10x10x16</span><br><span class="line">    conv2_w = tf.Variable(tf.truncated_normal(shape=[5, 5, 6, 16], mean=mu, stddev=sigma))</span><br><span class="line">    conv2_b = tf.Variable(tf.zeros(16))</span><br><span class="line"></span><br><span class="line">    conv2 = tf.nn.conv2d(pool_1, conv2_w, strides=[1, 1, 1, 1], padding=&apos;VALID&apos;) + conv2_b</span><br><span class="line">    print(conv2.shape)</span><br><span class="line">    # 激活函数</span><br><span class="line">    conv2_out = tf.nn.relu(conv2)</span><br><span class="line"></span><br><span class="line">    # 池化层， 输入=10x10x16, 输出=5x5x16</span><br><span class="line">    pool_2 = tf.nn.max_pool(conv2_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&apos;VALID&apos;)</span><br><span class="line">    print(pool_2.shape)</span><br><span class="line">    # Flatten 输入=5x5x16， 输出=400</span><br><span class="line">    pool_2_flat = tf.reshape(pool_2, [-1, 400])</span><br><span class="line"></span><br><span class="line">    # TODO: 第三层全连接层， 输入=400， 输出=120</span><br><span class="line">    fc1_w = tf.Variable(tf.truncated_normal(shape=[400, 120], mean=mu, stddev=sigma))</span><br><span class="line">    fc1_b = tf.Variable(tf.zeros(120))</span><br><span class="line"></span><br><span class="line">    fc1 = tf.matmul(pool_2_flat, fc1_w) + fc1_b</span><br><span class="line"></span><br><span class="line">    # 激活函数</span><br><span class="line">    fc1_out = tf.nn.relu(fc1)</span><br><span class="line">    print(fc1_out.shape)</span><br><span class="line"></span><br><span class="line">    # TODO: 第四层全连接层： 输入=120， 输出=84</span><br><span class="line">    fc2_w = tf.Variable(tf.truncated_normal(shape=[120, 84], mean=mu, stddev=sigma))</span><br><span class="line">    fc2_b = tf.Variable(tf.zeros(84))</span><br><span class="line"></span><br><span class="line">    fc2 = tf.matmul(fc1_out, fc2_w) + fc2_b</span><br><span class="line"></span><br><span class="line">    # 激活函数</span><br><span class="line">    fc2_out = tf.nn.relu(fc2)</span><br><span class="line">    print(fc2_out.shape)</span><br><span class="line"></span><br><span class="line">    # TODO: 第五层全连接层： 输入=84， 输出=10</span><br><span class="line">    fc3_w = tf.Variable(tf.truncated_normal(shape=[84, 10], mean=mu, stddev=sigma))</span><br><span class="line">    fc3_b = tf.Variable(tf.zeros(10))</span><br><span class="line"></span><br><span class="line">    fc3_out = tf.matmul(fc2_out, fc3_w) + fc3_b</span><br><span class="line">    print(fc3_out.shape)</span><br><span class="line"></span><br><span class="line">    return fc3_out</span><br></pre></td></tr></table></figure><h3 id="alex-net"><a href="#alex-net" class="headerlink" title="alex_net"></a>alex_net</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def alex_net(_X, _weights, _biases, _dropout):</span><br><span class="line">    # 向量转为矩阵</span><br><span class="line">    # _X = tf.reshape(_X, shape=[-1, 28, 28, 3])</span><br><span class="line">    print(_X.shape)</span><br><span class="line">    # TODO: 第一层卷积：</span><br><span class="line">    conv1 = conv2d(&apos;conv1&apos;, _X, _weights[&apos;wc1&apos;], _biases[&apos;bc1&apos;])</span><br><span class="line">    # 下采样层</span><br><span class="line">    pool1 = max_pool(&apos;pool1&apos;, conv1, k=2)</span><br><span class="line">    # 归一化层</span><br><span class="line">    norm1 = norm(&apos;norm1&apos;, pool1, lsize=4)</span><br><span class="line">    print(norm1.shape)</span><br><span class="line">    # TODO: 第二层卷积：</span><br><span class="line">    conv2 = conv2d(&apos;conv2&apos;, norm1, _weights[&apos;wc2&apos;], _biases[&apos;bc2&apos;])</span><br><span class="line">    # 下采样</span><br><span class="line">    pool2 = max_pool(&apos;pool2&apos;, conv2, k=2)</span><br><span class="line">    # 归一化</span><br><span class="line">    norm2 = norm(&apos;norm2&apos;, pool2, lsize=4)</span><br><span class="line">    print(norm2.shape)</span><br><span class="line">    # TODO: 第三层卷积：</span><br><span class="line">    conv3 = conv2d(&apos;conv3&apos;, norm2, _weights[&apos;wc3&apos;], _biases[&apos;bc3&apos;])</span><br><span class="line">    # 归一化</span><br><span class="line">    norm3 = norm(&apos;norm3&apos;, conv3, lsize=4)</span><br><span class="line">    print(norm3.shape)</span><br><span class="line">    # TODO: 第四层卷积</span><br><span class="line">    # 卷积</span><br><span class="line">    conv4 = conv2d(&apos;conv4&apos;, norm3, _weights[&apos;wc4&apos;], _biases[&apos;bc4&apos;])</span><br><span class="line">    # 归一化</span><br><span class="line">    norm4 = norm(&apos;norm4&apos;, conv4, lsize=4)</span><br><span class="line">    print(norm4.shape)</span><br><span class="line">    # TODO: 第五层卷积</span><br><span class="line">    # 卷积</span><br><span class="line">    conv5 = conv2d(&apos;conv5&apos;, norm4, _weights[&apos;wc5&apos;], _biases[&apos;bc5&apos;])</span><br><span class="line">    # 下采样</span><br><span class="line">    pool5 = max_pool(&apos;pool5&apos;, conv5, k=2)</span><br><span class="line">    # 归一化</span><br><span class="line">    norm5 = norm(&apos;norm5&apos;, pool5, lsize=4)</span><br><span class="line">    print(norm5.shape)</span><br><span class="line">    # TODO: 第六层全连接层</span><br><span class="line">    # 先把特征图转为向量</span><br><span class="line">    dense1 = tf.reshape(norm5, [-1, _weights[&apos;wd1&apos;].get_shape().as_list()[0]])</span><br><span class="line">    dense1 = tf.nn.relu(tf.matmul(dense1, _weights[&apos;wd1&apos;]) + _biases[&apos;bd1&apos;], name=&apos;fc1&apos;)</span><br><span class="line">    dense1 = tf.nn.dropout(dense1, _dropout)</span><br><span class="line">    print(dense1.shape)</span><br><span class="line">    # TODO: 第七层全连接层：</span><br><span class="line">    dense2 = tf.nn.relu(tf.matmul(dense1, _weights[&apos;wd2&apos;]) + _biases[&apos;bd2&apos;], name=&apos;fc2&apos;)  # Relu activation</span><br><span class="line">    dense2 = tf.nn.dropout(dense2, _dropout)</span><br><span class="line">    print(dense2.shape)</span><br><span class="line">    # TODO: 第八层全连接层：</span><br><span class="line">    # 网络输出层</span><br><span class="line">    out = tf.matmul(dense2, _weights[&apos;out&apos;]) + _biases[&apos;out&apos;]</span><br><span class="line">    print(out.shape)</span><br><span class="line">    return out</span><br></pre></td></tr></table></figure><h3 id="cnn-1"><a href="#cnn-1" class="headerlink" title="cnn_1"></a>cnn_1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def CNN_1(inputs):</span><br><span class="line">    # (32x32x3)--&gt;(32x32x64)</span><br><span class="line">    with tf.name_scope(&apos;conv1&apos;):</span><br><span class="line">        h_conv1 = tf.layers.conv2d(inputs, 64, [2, 2], padding=&apos;SAME&apos;, activation=tf.nn.relu,</span><br><span class="line">                                   kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(h_conv1.shape)</span><br><span class="line">    # 构建池化层--采用最大池化</span><br><span class="line">    # (32X32X64)--&gt;(16X16X64)</span><br><span class="line">    with tf.name_scope(&apos;pool1&apos;):</span><br><span class="line">        h_pool1 = tf.layers.max_pooling2d(h_conv1, pool_size=[2, 2], strides=[2, 2], padding=&apos;SAME&apos;)</span><br><span class="line">    print(h_pool1.shape)</span><br><span class="line">    # 构建第二层卷积计算层--(16x16x64)--&gt;(16x16x128).</span><br><span class="line">    with tf.name_scope(&apos;conv2&apos;):</span><br><span class="line">        h_conv2 = tf.layers.conv2d(h_pool1, 128, [4, 4], padding=&apos;SAME&apos;, activation=tf.nn.relu,</span><br><span class="line">                                   kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(h_conv2.shape)</span><br><span class="line">    # 构建第二个池化层(16x16x128)--&gt;(8x8x128)</span><br><span class="line">    with tf.name_scope(&apos;pool2&apos;):</span><br><span class="line">        h_pool2 = tf.layers.max_pooling2d(h_conv2, pool_size=[2, 2], strides=[2, 2], padding=&apos;SAME&apos;)</span><br><span class="line">    print(h_pool2.shape)</span><br><span class="line"></span><br><span class="line">    # 构建全连接层--(8x8x128)--&gt;(1024)</span><br><span class="line">    with tf.name_scope(&apos;fc1&apos;):</span><br><span class="line">        h_pool2_flat = tf.layers.flatten(h_pool2)</span><br><span class="line">        h_fc1 = tf.layers.dense(h_pool2_flat, 1024, activation=tf.nn.relu)</span><br><span class="line">    print(h_fc1.shape)</span><br><span class="line">    # Dropout--防止过拟合</span><br><span class="line">    with tf.name_scope(&apos;dropout&apos;):</span><br><span class="line">        # keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">        h_fc_drop = tf.nn.dropout(h_fc1, keep_prob=config.keep_prob)</span><br><span class="line"></span><br><span class="line">    # 构建全连接层--1024--&gt;512</span><br><span class="line">    with tf.name_scope(&apos;fc2&apos;):</span><br><span class="line">        fc2 = tf.layers.dense(h_fc_drop, 512, activation=tf.nn.relu)</span><br><span class="line">    print(fc2.shape)</span><br><span class="line">    # 构建全连接层--512--&gt;10</span><br><span class="line">    with tf.name_scope(&apos;fc3&apos;):</span><br><span class="line">        out = tf.layers.dense(fc2, 10, activation=None)</span><br><span class="line">    print(out.shape)</span><br><span class="line">    return out</span><br></pre></td></tr></table></figure><h2 id="VGG16"><a href="#VGG16" class="headerlink" title="VGG16"></a>VGG16</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def VGG16(inputs):</span><br><span class="line">    print(inputs.shape)</span><br><span class="line">    # (32x32x3) --&gt; (32x32x64)</span><br><span class="line">    with tf.name_scope(&apos;conv_1&apos;):</span><br><span class="line">         conv_1_out = tf.layers.conv2d(inputs, 64, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_1_out.shape)</span><br><span class="line">    # (32x32x64) --&gt; (32x32x64)</span><br><span class="line">    with tf.name_scope(&apos;conv_2&apos;):</span><br><span class="line">        conv_2_out = tf.layers.conv2d(conv_1_out, 64, [3, 3],</span><br><span class="line">                                      padding=&apos;same&apos;,</span><br><span class="line">                                      activation=tf.nn.relu,</span><br><span class="line">                                      kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_2_out.shape)</span><br><span class="line">    # (32x32x64) --&gt; (16x16x64)</span><br><span class="line">    with tf.name_scope(&apos;pool_1&apos;):</span><br><span class="line">        pool_1_out = tf.layers.max_pooling2d(conv_2_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_1_out.shape)</span><br><span class="line">    # (16x16x64) --&gt; (16x16x128)</span><br><span class="line">    with tf.name_scope(&apos;conv_3&apos;):</span><br><span class="line">         conv_3_out = tf.layers.conv2d(pool_1_out, 128, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_3_out.shape)</span><br><span class="line">    # (16x16x128) --&gt; (16x16x128)</span><br><span class="line">    with tf.name_scope(&apos;conv_4&apos;):</span><br><span class="line">         conv_4_out = tf.layers.conv2d(conv_3_out, 128, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_4_out.shape)</span><br><span class="line">    # (16x16x128) --&gt; (8x8x128)</span><br><span class="line">    with tf.name_scope(&apos;pool_2&apos;):</span><br><span class="line">        pool_2_out = tf.layers.max_pooling2d(conv_4_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_2_out.shape)</span><br><span class="line">    # (8x8x128) --&gt; (8x8x256)</span><br><span class="line">    with tf.name_scope(&apos;conv_5&apos;):</span><br><span class="line">         conv_5_out = tf.layers.conv2d(pool_2_out, 256, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_5_out.shape)</span><br><span class="line">    # (8x8x256) --&gt; (8x8x256)</span><br><span class="line">    with tf.name_scope(&apos;conv_6&apos;):</span><br><span class="line">         conv_6_out = tf.layers.conv2d(conv_5_out, 256, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_6_out.shape)</span><br><span class="line">    # (8x8x256) --&gt; (8x8x256)</span><br><span class="line">    with tf.name_scope(&apos;conv_7&apos;):</span><br><span class="line">        conv_7_out = tf.layers.conv2d(conv_6_out, 256, [3, 3],</span><br><span class="line">                                      padding=&apos;same&apos;,</span><br><span class="line">                                      activation=tf.nn.relu,</span><br><span class="line">                                      kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_7_out.shape)</span><br><span class="line">    # (8x8x256) --&gt; (4x4x256)</span><br><span class="line">    with tf.name_scope(&apos;pool_3&apos;):</span><br><span class="line">        pool_3_out = tf.layers.max_pooling2d(conv_7_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_3_out.shape)</span><br><span class="line">    # (4x4x256) --&gt; (4x4x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_8&apos;):</span><br><span class="line">        conv_8_out = tf.layers.conv2d(pool_3_out, 512, [3, 3],</span><br><span class="line">                                      padding=&apos;same&apos;,</span><br><span class="line">                                      activation=tf.nn.relu,</span><br><span class="line">                                      kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_8_out.shape)</span><br><span class="line">    # (4x4x512) --&gt; (4x4x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_9&apos;):</span><br><span class="line">        conv_9_out = tf.layers.conv2d(conv_8_out, 512, [3, 3],</span><br><span class="line">                                      padding=&apos;same&apos;,</span><br><span class="line">                                      activation=tf.nn.relu,</span><br><span class="line">                                      kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_9_out.shape)</span><br><span class="line">    # (4x4x512) --&gt; (4x4x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_10&apos;):</span><br><span class="line">        conv_10_out = tf.layers.conv2d(conv_9_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_10_out.shape)</span><br><span class="line">    # (4x4x512) --&gt; (2x2x512)</span><br><span class="line">    with tf.name_scope(&apos;pool_4&apos;):</span><br><span class="line">        pool_4_out = tf.layers.max_pooling2d(conv_10_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_4_out.shape)</span><br><span class="line">    # (2x2x512) --&gt; (2x2x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_11&apos;):</span><br><span class="line">        conv_11_out = tf.layers.conv2d(pool_4_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_11_out.shape)</span><br><span class="line">    # (2x2x512) --&gt; (2x2x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_12&apos;):</span><br><span class="line">        conv_12_out = tf.layers.conv2d(conv_11_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_12_out.shape)</span><br><span class="line">    # (2x2x512) --&gt; (2x2x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_13&apos;):</span><br><span class="line">        conv_13_out = tf.layers.conv2d(conv_12_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_13_out.shape)</span><br><span class="line">    # (2x2x512) --&gt; (1x1x512)</span><br><span class="line">    with tf.name_scope(&apos;pool_5&apos;):</span><br><span class="line">        pool_5_out = tf.layers.max_pooling2d(conv_13_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_5_out.shape)</span><br><span class="line">    # (1x1x512) --&gt; 512</span><br><span class="line">    with tf.name_scope(&apos;fc_1&apos;):</span><br><span class="line">        pool_5_outz_flat = tf.layers.flatten(pool_5_out)</span><br><span class="line">        fc_1_out = tf.layers.dense(pool_5_outz_flat, 512, activation=tf.nn.relu)</span><br><span class="line">        fc_1_drop = tf.nn.dropout(fc_1_out, keep_prob=config.keep_prob)</span><br><span class="line">    print(fc_1_drop.shape)</span><br><span class="line">    # 512 --&gt; 512</span><br><span class="line">    with tf.name_scope(&apos;fc_2&apos;):</span><br><span class="line">        fc_2_out = tf.layers.dense(fc_1_drop, 512, activation=tf.nn.relu)</span><br><span class="line">        fc_2_drop = tf.nn.dropout(fc_2_out, keep_prob=config.keep_prob)</span><br><span class="line">    print(fc_2_drop.shape)</span><br><span class="line">    # 512 --&gt; 10</span><br><span class="line">    with tf.name_scope(&apos;fc_3&apos;):</span><br><span class="line">        fc_3_out = tf.layers.dense(fc_2_drop, 10, activation=None)</span><br><span class="line">    print(fc_3_out.shape)</span><br><span class="line"></span><br><span class="line">    return fc_3_out</span><br></pre></td></tr></table></figure><h3 id="vgg19"><a href="#vgg19" class="headerlink" title="vgg19"></a>vgg19</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def VGG19(inputs):</span><br><span class="line">    print(inputs.shape)</span><br><span class="line">    # (32x32x3) --&gt; (32x32x64)</span><br><span class="line">    with tf.name_scope(&apos;conv_1&apos;):</span><br><span class="line">         conv_1_out = tf.layers.conv2d(inputs, 64, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_1_out.shape)</span><br><span class="line">    # (32x32x64) --&gt; (32x32x64)</span><br><span class="line">    with tf.name_scope(&apos;conv_2&apos;):</span><br><span class="line">        conv_2_out = tf.layers.conv2d(conv_1_out, 64, [3, 3],</span><br><span class="line">                                      padding=&apos;same&apos;,</span><br><span class="line">                                      activation=tf.nn.relu,</span><br><span class="line">                                      kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_2_out.shape)</span><br><span class="line">    # (32x32x64) --&gt; (16x16x64)</span><br><span class="line">    with tf.name_scope(&apos;pool_1&apos;):</span><br><span class="line">        pool_1_out = tf.layers.max_pooling2d(conv_2_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_1_out.shape)</span><br><span class="line">    # (16x16x64) --&gt; (16x16x128)</span><br><span class="line">    with tf.name_scope(&apos;conv_3&apos;):</span><br><span class="line">         conv_3_out = tf.layers.conv2d(pool_1_out, 128, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_3_out.shape)</span><br><span class="line">    # (16x16x128) --&gt; (16x16x128)</span><br><span class="line">    with tf.name_scope(&apos;conv_4&apos;):</span><br><span class="line">         conv_4_out = tf.layers.conv2d(conv_3_out, 128, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_4_out.shape)</span><br><span class="line">    # (16x16x128) --&gt; (8x8x128)</span><br><span class="line">    with tf.name_scope(&apos;pool_2&apos;):</span><br><span class="line">        pool_2_out = tf.layers.max_pooling2d(conv_4_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_2_out.shape)</span><br><span class="line">    # (8x8x128) --&gt; (8x8x256)</span><br><span class="line">    with tf.name_scope(&apos;conv_5&apos;):</span><br><span class="line">         conv_5_out = tf.layers.conv2d(pool_2_out, 256, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_5_out.shape)</span><br><span class="line">    # (8x8x256) --&gt; (8x8x256)</span><br><span class="line">    with tf.name_scope(&apos;conv_6&apos;):</span><br><span class="line">         conv_6_out = tf.layers.conv2d(conv_5_out, 256, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_6_out.shape)</span><br><span class="line">    # (8x8x256) --&gt; (8x8x256)</span><br><span class="line">    with tf.name_scope(&apos;conv_7&apos;):</span><br><span class="line">        conv_7_out = tf.layers.conv2d(conv_6_out, 256, [3, 3],</span><br><span class="line">                                      padding=&apos;same&apos;,</span><br><span class="line">                                      activation=tf.nn.relu,</span><br><span class="line">                                      kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_7_out.shape)</span><br><span class="line">    # (8x8x256) --&gt; (8x8x256)</span><br><span class="line">    with tf.name_scope(&apos;conv_8&apos;):</span><br><span class="line">        conv_8_out = tf.layers.conv2d(conv_7_out, 256, [3, 3],</span><br><span class="line">                                      padding=&apos;same&apos;,</span><br><span class="line">                                      activation=tf.nn.relu,</span><br><span class="line">                                      kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_8_out.shape)</span><br><span class="line">    # (8x8x256) --&gt; (4x4x256)</span><br><span class="line">    with tf.name_scope(&apos;pool_3&apos;):</span><br><span class="line">        pool_3_out = tf.layers.max_pooling2d(conv_8_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_3_out.shape)</span><br><span class="line">    # (4x4x256) --&gt; (4x4x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_9&apos;):</span><br><span class="line">        conv_9_out = tf.layers.conv2d(pool_3_out, 512, [3, 3],</span><br><span class="line">                                      padding=&apos;same&apos;,</span><br><span class="line">                                      activation=tf.nn.relu,</span><br><span class="line">                                      kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_9_out.shape)</span><br><span class="line">    # (4x4x512) --&gt; (4x4x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_10&apos;):</span><br><span class="line">        conv_10_out = tf.layers.conv2d(conv_9_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_10_out.shape)</span><br><span class="line">    # (4x4x512) --&gt; (4x4x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_11&apos;):</span><br><span class="line">        conv_11_out = tf.layers.conv2d(conv_10_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_11_out.shape)</span><br><span class="line">    # (4x4x512) --&gt; (4x4x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_12&apos;):</span><br><span class="line">        conv_12_out = tf.layers.conv2d(conv_11_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_12_out.shape)</span><br><span class="line">    # (4x4x512) --&gt; (2x2x512)</span><br><span class="line">    with tf.name_scope(&apos;pool_4&apos;):</span><br><span class="line">        pool_4_out = tf.layers.max_pooling2d(conv_12_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_4_out.shape)</span><br><span class="line">    # (2x2x512) --&gt; (2x2x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_13&apos;):</span><br><span class="line">        conv_13_out = tf.layers.conv2d(pool_4_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_13_out.shape)</span><br><span class="line">    # (2x2x512) --&gt; (2x2x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_14&apos;):</span><br><span class="line">        conv_14_out = tf.layers.conv2d(conv_13_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_14_out.shape)</span><br><span class="line">    # (2x2x512) --&gt; (2x2x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_15&apos;):</span><br><span class="line">        conv_15_out = tf.layers.conv2d(conv_14_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_15_out.shape)</span><br><span class="line">    # (2x2x512) --&gt; (2x2x512)</span><br><span class="line">    with tf.name_scope(&apos;conv_16&apos;):</span><br><span class="line">        conv_16_out = tf.layers.conv2d(conv_15_out, 512, [3, 3],</span><br><span class="line">                                       padding=&apos;same&apos;,</span><br><span class="line">                                       activation=tf.nn.relu,</span><br><span class="line">                                       kernel_initializer=tf.truncated_normal_initializer(mean=0., stddev=0.1))</span><br><span class="line">    print(conv_16_out.shape)</span><br><span class="line">    # (2x2x512) --&gt; (1x1x512)</span><br><span class="line">    with tf.name_scope(&apos;pool_5&apos;):</span><br><span class="line">        pool_5_out = tf.layers.max_pooling2d(conv_16_out, pool_size=[2, 2], strides=[2, 2], padding=&apos;same&apos;)</span><br><span class="line"></span><br><span class="line">    print(pool_5_out.shape)</span><br><span class="line">    # (1x1x512) --&gt; 512</span><br><span class="line">    with tf.name_scope(&apos;fc_1&apos;):</span><br><span class="line">        pool_5_outz_flat = tf.layers.flatten(pool_5_out)</span><br><span class="line">        fc_1_out = tf.layers.dense(pool_5_outz_flat, 512, activation=tf.nn.relu)</span><br><span class="line">        fc_1_drop = tf.nn.dropout(fc_1_out, keep_prob=config.keep_prob)</span><br><span class="line">    print(fc_1_drop.shape)</span><br><span class="line">    # 512 --&gt; 512</span><br><span class="line">    with tf.name_scope(&apos;fc_2&apos;):</span><br><span class="line">        fc_2_out = tf.layers.dense(fc_1_drop, 512, activation=tf.nn.relu)</span><br><span class="line">        fc_2_drop = tf.nn.dropout(fc_2_out, keep_prob=config.keep_prob)</span><br><span class="line">    print(fc_2_drop.shape)</span><br><span class="line">    # 512 --&gt; 10</span><br><span class="line">    with tf.name_scope(&apos;fc_3&apos;):</span><br><span class="line">        fc_3_out = tf.layers.dense(fc_2_drop, 10, activation=None)</span><br><span class="line">    print(fc_3_out.shape)</span><br><span class="line"></span><br><span class="line">    return fc_3_out</span><br></pre></td></tr></table></figure><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import numpy as np</span><br><span class="line">from sklearn.preprocessing import MinMaxScaler, LabelBinarizer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def load_cifar10_batch(path, batch_id):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    加载batch的数据</span><br><span class="line">    :param path: 数据存储的目录</span><br><span class="line">    :param batch_id:batch的编号</span><br><span class="line">    :return:features and labels</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    with open(path + &apos;/data_batch_&apos; + str(batch_id), mode=&apos;rb&apos;) as file:</span><br><span class="line">        batch = pickle.load(file, encoding=&apos;latin1&apos;)</span><br><span class="line"></span><br><span class="line">    # features and labels</span><br><span class="line">    features = batch[&apos;data&apos;].reshape((len(batch[&apos;data&apos;]), 3, 32, 32)).transpose(0, 2, 3, 1)</span><br><span class="line">    labels = batch[&apos;labels&apos;]</span><br><span class="line"></span><br><span class="line">    return features, labels</span><br></pre></td></tr></table></figure><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def pre_processing_data(x_train, y_train, x_test, y_test):</span><br><span class="line">    # features</span><br><span class="line">    minmax = MinMaxScaler()</span><br><span class="line">    # 重塑数据</span><br><span class="line">    # (50000, 32, 32, 3) --&gt; (50000, 32*32*3)</span><br><span class="line">    x_train_rows = x_train.reshape(x_train.shape[0], 32*32*3)</span><br><span class="line">    # (10000, 32, 32, 3) --&gt; (10000, 32*32*3)</span><br><span class="line">    x_test_rows = x_test.reshape(x_test.shape[0], 32*32*3)</span><br><span class="line">    # 归一化</span><br><span class="line">    x_train_norm = minmax.fit_transform(x_train_rows)</span><br><span class="line">    x_test_norm = minmax.fit_transform(x_test_rows)</span><br><span class="line">    # 重塑数据</span><br><span class="line">    x_train = x_train_norm.reshape(x_train_norm.shape[0], 32, 32, 3)</span><br><span class="line">    x_test = x_test_norm.reshape(x_test_norm.shape[0], 32, 32, 3)</span><br><span class="line"></span><br><span class="line">    # labels</span><br><span class="line">    # 对标签进行one-hot</span><br><span class="line">    n_class = 10</span><br><span class="line">    label_binarizer = LabelBinarizer().fit(np.array(range(n_class)))</span><br><span class="line">    y_train = label_binarizer.transform(y_train)</span><br><span class="line">    y_test = label_binarizer.transform(y_test)</span><br><span class="line"></span><br><span class="line">    return x_train, y_train, x_test, y_test</span><br></pre></td></tr></table></figure><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>新建Read_date.py<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def cifar10_data():</span><br><span class="line">    # 加载训练数据</span><br><span class="line">    cifar10_path = &apos;data&apos;</span><br><span class="line">    # 一共是有5个batch的训练数据</span><br><span class="line">    x_train, y_train = load_cifar10_batch(cifar10_path, 1)</span><br><span class="line">    for n in range(2, 6):</span><br><span class="line">        features, labels = load_cifar10_batch(cifar10_path, n)</span><br><span class="line">        x_train = np.concatenate([x_train, features])</span><br><span class="line">        y_train = np.concatenate([y_train, labels])</span><br><span class="line"></span><br><span class="line">    # 加载测试数据</span><br><span class="line">    with open(cifar10_path + &apos;/test_batch&apos;, mode=&apos;rb&apos;) as file:</span><br><span class="line">        batch = pickle.load(file, encoding=&apos;latin1&apos;)</span><br><span class="line">        x_test = batch[&apos;data&apos;].reshape((len(batch[&apos;data&apos;]), 3, 32, 32)).transpose(0, 2, 3, 1)</span><br><span class="line">        y_test = batch[&apos;labels&apos;]</span><br><span class="line"></span><br><span class="line">    x_train, y_train, x_test, y_test = pre_processing_data(x_train, y_train, x_test, y_test)</span><br><span class="line"></span><br><span class="line">    return x_train, y_train, x_test, y_test</span><br></pre></td></tr></table></figure></p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>新建config.py；复制以下代码</p><h3 id="初始化卷积神经网络参数"><a href="#初始化卷积神经网络参数" class="headerlink" title="初始化卷积神经网络参数"></a>初始化卷积神经网络参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">keep_prob = 0.8</span><br><span class="line">epochs = 20</span><br><span class="line">batch_size = 128</span><br><span class="line">n_classes = 10  # 总共10类</span><br></pre></td></tr></table></figure><h3 id="定义placeholder"><a href="#定义placeholder" class="headerlink" title="定义placeholder"></a>定义placeholder</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inputs = tf.placeholder(tf.float32, [None, 32, 32, 3], name=&apos;inputs&apos;)</span><br><span class="line">targets = tf.placeholder(tf.float32, [None, 10], name=&apos;logits&apos;)</span><br><span class="line"></span><br><span class="line">learning_rate = 0.001</span><br></pre></td></tr></table></figure><h3 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def show_images(images):</span><br><span class="line">    fig, axes = plt.subplots(nrows=3, ncols=3, sharex=True, sharey=True, figsize=(9, 9))</span><br><span class="line">    img = images[: 60]</span><br><span class="line">    for image, row in zip([img[: 20], img[20: 40], img[40: 60]], axes):</span><br><span class="line">        for img, ax in zip(image, row):</span><br><span class="line">            ax.imshow(img)</span><br><span class="line">            ax.get_xaxis().set_visible(False)</span><br><span class="line">            ax.get_yaxis().set_visible(False)</span><br><span class="line"></span><br><span class="line">    fig.tight_layout(pad=0.1)</span><br><span class="line">    # plt.show()</span><br></pre></td></tr></table></figure><h3 id="存储网络参数-alexnet"><a href="#存储网络参数-alexnet" class="headerlink" title="存储网络参数(alexnet)"></a>存储网络参数(alexnet)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">weights = &#123;</span><br><span class="line">    &apos;wc1&apos;: tf.Variable(tf.random_normal(shape=[11, 11, 3, 96])),</span><br><span class="line">    &apos;wc2&apos;: tf.Variable(tf.random_normal(shape=[5, 5, 96, 256])),</span><br><span class="line">    &apos;wc3&apos;: tf.Variable(tf.random_normal(shape=[3, 3, 256, 384])),</span><br><span class="line">    &apos;wc4&apos;: tf.Variable(tf.random_normal(shape=[3, 3, 384, 384])),</span><br><span class="line">    &apos;wc5&apos;: tf.Variable(tf.random_normal(shape=[3, 3, 384, 256])),</span><br><span class="line">    &apos;wd1&apos;: tf.Variable(tf.random_normal(shape=[4*4*256, 4096])),</span><br><span class="line">    &apos;wd2&apos;: tf.Variable(tf.random_normal(shape=[4096, 1024])),</span><br><span class="line">    &apos;out&apos;: tf.Variable(tf.random_normal(shape=[1024, n_classes]))</span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    &apos;bc1&apos;: tf.Variable(tf.random_normal([96])),</span><br><span class="line">    &apos;bc2&apos;: tf.Variable(tf.random_normal([256])),</span><br><span class="line">    &apos;bc3&apos;: tf.Variable(tf.random_normal([384])),</span><br><span class="line">    &apos;bc4&apos;: tf.Variable(tf.random_normal([384])),</span><br><span class="line">    &apos;bc5&apos;: tf.Variable(tf.random_normal([256])),</span><br><span class="line">    &apos;bd1&apos;: tf.Variable(tf.random_normal([4096])),</span><br><span class="line">    &apos;bd2&apos;: tf.Variable(tf.random_normal([1024])),</span><br><span class="line">    &apos;out&apos;: tf.Variable(tf.random_normal([n_classes]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h2><p>新建TestModel.py,复制以下代码</p><h3 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import config</span><br><span class="line">import Read_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def evaluate(X_data, y_data, inputs, logits, targets):</span><br><span class="line">    batch_size = config.batch_size</span><br><span class="line">    </span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(targets, 1))</span><br><span class="line">    accuracy_operation = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line">    num_examples = len(X_data)</span><br><span class="line">    total_accuracy = 0</span><br><span class="line">    sess = tf.get_default_session()</span><br><span class="line">    for offset in range(0, num_examples, batch_size):</span><br><span class="line">        batch_x, batch_y = X_data[offset:offset+batch_size], y_data[offset:offset+batch_size]</span><br><span class="line"></span><br><span class="line">        accuracy = sess.run(accuracy_operation, feed_dict=&#123;inputs: batch_x, targets: batch_y&#125;)</span><br><span class="line">        total_accuracy += (accuracy * len(batch_x))</span><br><span class="line">    return total_accuracy / num_examples</span><br></pre></td></tr></table></figure><h3 id="读取模型"><a href="#读取模型" class="headerlink" title="读取模型"></a>读取模型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def run(inputs, logits, targets):</span><br><span class="line">    print(&apos;TESTING....&apos;)</span><br><span class="line">    x_train, y_train, x_test, y_test = Read_data.cifar10_data()</span><br><span class="line">    </span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        print(&quot;Evaluate The Model&quot;)</span><br><span class="line">        # TODO: 读取模型</span><br><span class="line">        saver.restore(sess, &apos;./model/cifar.model&apos;)</span><br><span class="line">        test_accuracy = evaluate(x_test, y_test, inputs, logits, targets)</span><br><span class="line">        print(&quot;Test Accuracy = &#123;:.3f&#125;&quot;.format(test_accuracy))</span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>创建TrainModel.py,复制以下代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import Read_data</span><br><span class="line">import config</span><br><span class="line">import TestModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def run(logits):</span><br><span class="line">    # 读取数据</span><br><span class="line">    global train_loss</span><br><span class="line">    x_train, y_train, x_test, y_test = Read_data.cifar10_data()</span><br><span class="line">    print(y_train.shape)</span><br><span class="line">    # 构造验证集和训练集</span><br><span class="line">    train_rate = 0.8</span><br><span class="line">    x_train, x_validation, y_train, y_validation = train_test_split(x_train, y_train, train_size=train_rate)</span><br><span class="line"></span><br><span class="line">    # 初始化卷积神经网络参数</span><br><span class="line">    epochs = config.epochs</span><br><span class="line">    batch_size = config.batch_size</span><br><span class="line"></span><br><span class="line">    # 定义输入和标签的placeholder</span><br><span class="line">    inputs = config.inputs</span><br><span class="line">    targets = config.targets</span><br><span class="line"></span><br><span class="line">    # TODO: 计算损失值并初始化optimizer</span><br><span class="line">    learning_rate = config.learning_rate</span><br><span class="line"></span><br><span class="line">    cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=targets)</span><br><span class="line">    loss_operation = tf.reduce_mean(cross_entropy)</span><br><span class="line"></span><br><span class="line">    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)</span><br><span class="line">    training_operation = optimizer.minimize(loss_operation)</span><br><span class="line"></span><br><span class="line">    # TODO: 初始化变量</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">    print(&quot;FUNCTION READY!!&quot;)</span><br><span class="line"></span><br><span class="line">    # TODO: 保存模型</span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">    # TODO: 训练模型</span><br><span class="line"></span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        num_examples = len(x_train)</span><br><span class="line"></span><br><span class="line">        print(&quot;Training.....&quot;)</span><br><span class="line"></span><br><span class="line">        for n in range(epochs):</span><br><span class="line">            for offset in range(0, num_examples, batch_size):</span><br><span class="line">                batch_x, batch_y = x_train[offset:offset+batch_size], y_train[offset:offset+batch_size]</span><br><span class="line">                train_loss, _ = sess.run([loss_operation, training_operation],</span><br><span class="line">                                         feed_dict=&#123;inputs: batch_x, targets: batch_y&#125;)</span><br><span class="line"></span><br><span class="line">            print(&quot;EPOCH &#123;&#125; ...&quot;.format(n + 1))</span><br><span class="line">            print(&quot;Train Loss &#123;:.4f&#125;&quot; .format(train_loss))</span><br><span class="line">            print(&quot;Validation Accuracy = &#123;:.3f&#125;&quot;.format(TestModel.evaluate(x_validation,</span><br><span class="line">                                                                           y_validation,</span><br><span class="line">                                                                           inputs,</span><br><span class="line">                                                                           logits,</span><br><span class="line">                                                                           targets)))</span><br><span class="line"></span><br><span class="line">        saver.save(sess, &apos;./model/cifar.model&apos;)</span><br><span class="line">        print(&quot;Model saved&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p>新建testPhoto.py<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">from PIL import Image</span><br><span class="line">import Network</span><br><span class="line">import config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        photo_classes = &#123;0: &apos;airplane&apos;, 1: &apos;automobile&apos;, 2: &apos;bird&apos;, 3: &apos;cat&apos;, 4: &apos;deer&apos;,</span><br><span class="line">                         5: &apos;dog&apos;, 6: &apos;frog&apos;, 7: &apos;horse&apos;, 8: &apos;ship&apos;, 9: &apos;truck&apos;&#125;</span><br><span class="line">        logits = Network.VGG16(config.inputs)</span><br><span class="line">        x = config.inputs</span><br><span class="line">        saver = tf.train.Saver()</span><br><span class="line">        saver.restore(sess, &apos;./model/cifar.model&apos;)</span><br><span class="line">        # input</span><br><span class="line">        im = Image.open(&apos;image/dog-3.jpg&apos;)</span><br><span class="line">        # im.show()</span><br><span class="line">        im = im.resize((32, 32))</span><br><span class="line"></span><br><span class="line">        # print(im.size, im.mode)</span><br><span class="line"></span><br><span class="line">        im = np.array(im).astype(np.float32)</span><br><span class="line">        im = np.reshape(im, [-1, 32*32*3])</span><br><span class="line">        im = (im - (255 / 2.0)) / 255</span><br><span class="line">        batch_xs = np.reshape(im, [-1, 32, 32, 3])</span><br><span class="line"></span><br><span class="line">        output = sess.run(logits, feed_dict=&#123;x: batch_xs&#125;)</span><br><span class="line">        print(output)</span><br><span class="line">        print(&apos;the out put is :&apos;, photo_classes[np.argmax(output)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><p>新建main.py<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import TrainModel</span><br><span class="line">import TestModel</span><br><span class="line">import config</span><br><span class="line">import Network</span><br><span class="line"></span><br><span class="line"># logits = Network.LeNet(Setting.inputs)</span><br><span class="line"># logits = Network.alex_net(Setting.inputs, Setting.weights, Setting.biases, Setting.keep_prob)</span><br><span class="line">logits = Network.CNN_1(config.inputs)</span><br><span class="line"># logits = Network.VGG16(config.inputs)</span><br><span class="line"># logits = Network.VGG19(Setting.inputs)</span><br><span class="line"></span><br><span class="line">TrainModel.run(logits)</span><br><span class="line">TestModel.run(config.inputs, logits, config.targets)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;net&quot;&gt;&lt;a href=&quot;#net&quot; class=&quot;headerlink&quot; title=&quot;net&quot;&gt;&lt;/a&gt;net&lt;/h2&gt;&lt;p&gt;新建netWork.py,添加以下代码&lt;/p&gt;
&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="深度学习" scheme="https://janvia.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="卷积神经网络" scheme="https://janvia.github.io/tags/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>keras实现CNN</title>
    <link href="https://janvia.github.io/2019/01/13/keras%E5%AE%9E%E7%8E%B0CNN/"/>
    <id>https://janvia.github.io/2019/01/13/keras实现CNN/</id>
    <published>2019-01-13T13:00:12.000Z</published>
    <updated>2019-01-13T13:05:20.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-导入环境"><a href="#0-导入环境" class="headerlink" title="0.导入环境"></a>0.导入环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import os</span><br><span class="line">from tensorflow.examples.tutorials.mnist import input_data</span><br><span class="line">import tensorflow as tf</span><br><span class="line">from keras.layers.core import Dense, Flatten</span><br><span class="line">from keras.layers.convolutional import Conv2D</span><br><span class="line">from keras.layers.pooling import MaxPooling2D</span><br><span class="line">from keras.objectives import categorical_crossentropy</span><br><span class="line">from keras import backend as K</span><br><span class="line">K.image_data_format()</span><br><span class="line">os.environ[&apos;TF_CPP_MIN_LOG_LEVEL&apos;] = &apos;2&apos;</span><br></pre></td></tr></table></figure><h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1.数据准备"></a>1.数据准备</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用tensorflow自带的工具加载MNIST手写数字集合</span><br><span class="line">mnist = input_data.read_data_sets(&apos;data&apos;, one_hot=True)</span><br><span class="line"># 查看数据的维度和target的维度</span><br><span class="line">print(mnist.train.images.shape)</span><br><span class="line">print(mnist.train.labels.shape)</span><br></pre></td></tr></table></figure><h2 id="2-准备好palceholder"><a href="#2-准备好palceholder" class="headerlink" title="2.准备好palceholder"></a>2.准备好palceholder</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32, [None, 784])</span><br><span class="line">y = tf.placeholder(tf.float32, [None, 10])</span><br><span class="line">learnRate = tf.placeholder(tf.float32)</span><br></pre></td></tr></table></figure><h2 id="3-构建网络计算图结构"><a href="#3-构建网络计算图结构" class="headerlink" title="3.构建网络计算图结构"></a>3.构建网络计算图结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把输入数据reshape--28x28=784, 单通道， -1表示None</span><br><span class="line">with tf.name_scope(&apos;reshape&apos;):</span><br><span class="line">    x_image = tf.reshape(x, [-1, 28, 28, 1])</span><br><span class="line"></span><br><span class="line"># 构建第一层卷积计算层--将一个灰度图像映射到32个feature maps, 卷积核为5x5</span><br><span class="line">net = Conv2D(32, kernel_size=[5, 5], strides=[1, 1],</span><br><span class="line">             activation=&apos;relu&apos;, padding=&apos;same&apos;,</span><br><span class="line">             input_shape=[28, 28, 1])(x_image)</span><br><span class="line"></span><br><span class="line"># 构建池化层--采用最大池化</span><br><span class="line">net = MaxPooling2D(pool_size=[2, 2])(net)</span><br><span class="line"></span><br><span class="line"># 构建第二层卷积计算层--maps 32 feature maps to 64.</span><br><span class="line">net = Conv2D(64, kernel_size=[5, 5], strides=[1, 1],</span><br><span class="line">             activation=&apos;relu&apos;, padding=&apos;same&apos;)(net)</span><br><span class="line"></span><br><span class="line"># 构建第二层池化层--采用最大池化</span><br><span class="line">net = MaxPooling2D(pool_size=[2, 2])(net)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 构建全连接层--经过的两层的下采样（池化），28x28x1的图像--&gt;7x7x64，然后映射到1024个特征</span><br><span class="line">net = Flatten()(net)</span><br><span class="line">net = Dense(1024, activation=&apos;relu&apos;)(net)</span><br><span class="line"></span><br><span class="line"># 构建第二层全连接层--将1024个特性映射到10个类，每个类对应一个数字</span><br><span class="line">net = Dense(10, activation=&apos;softmax&apos;)(net)</span><br></pre></td></tr></table></figure><h2 id="4-计算损失值并初始化optimizer"><a href="#4-计算损失值并初始化optimizer" class="headerlink" title="4.计算损失值并初始化optimizer"></a>4.计算损失值并初始化optimizer</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cross_entropy = tf.reduce_mean(categorical_crossentropy(y, net))</span><br><span class="line"></span><br><span class="line">l2_loss = tf.add_n([tf.nn.l2_loss(w) for w in tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)])</span><br><span class="line"></span><br><span class="line">total_loss = cross_entropy + 7e-5*l2_loss</span><br><span class="line"></span><br><span class="line">train_step = tf.train.AdamOptimizer(learnRate).minimize(total_loss)</span><br></pre></td></tr></table></figure><h2 id="5-初始化变量"><a href="#5-初始化变量" class="headerlink" title="5.初始化变量"></a>5.初始化变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">print(&quot;FUNCTION READY!!&quot;)</span><br></pre></td></tr></table></figure><h2 id="6-在会话中执行网络定义的运算"><a href="#6-在会话中执行网络定义的运算" class="headerlink" title="6.在会话中执行网络定义的运算"></a>6.在会话中执行网络定义的运算</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with tf.Session() as sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    for step in range(3000):</span><br><span class="line">        batch_xs, batch_ys = mnist.train.next_batch(100)</span><br><span class="line">        lr = 0.01</span><br><span class="line"></span><br><span class="line">        _, loss, l2_loss_value, total_loss_value = sess.run(</span><br><span class="line">            [train_step, cross_entropy, l2_loss, total_loss],</span><br><span class="line">            feed_dict=&#123;x: batch_xs, y: batch_ys, learnRate: lr&#125;)</span><br><span class="line"></span><br><span class="line">        if (step + 1) % 100 == 0:</span><br><span class="line">            print(&quot;step %d, entropy loss: %f, l2_loss: %f, total loss: %f&quot; %</span><br><span class="line">                  (step + 1, loss, l2_loss_value, total_loss_value))</span><br><span class="line"></span><br><span class="line">            # 验证训练的模型</span><br><span class="line">            correct_prediction = tf.equal(tf.argmax(net, 1), tf.argmax(y, 1))</span><br><span class="line">            accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">            print(&quot;Train accuracy:&quot;, sess.run(accuracy, feed_dict=&#123;x: batch_xs, y: batch_ys&#125;))</span><br><span class="line"></span><br><span class="line">        if (step + 1) % 1000 == 0:</span><br><span class="line">            print(&quot;Text accuracy:&quot;, sess.run(accuracy, feed_dict=&#123;x: batch_xs, y: batch_ys&#125;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-导入环境&quot;&gt;&lt;a href=&quot;#0-导入环境&quot; class=&quot;headerlink&quot; title=&quot;0.导入环境&quot;&gt;&lt;/a&gt;0.导入环境&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
      <category term="深度学习" scheme="https://janvia.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CNN" scheme="https://janvia.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>深度卷积对抗生成网络-DCGAN</title>
    <link href="https://janvia.github.io/2019/01/13/%E6%B7%B1%E5%BA%A6%E5%8D%B7%E7%A7%AF%E5%AF%B9%E6%8A%97%E7%94%9F%E6%88%90%E7%BD%91%E7%BB%9C-DCGAN/"/>
    <id>https://janvia.github.io/2019/01/13/深度卷积对抗生成网络-DCGAN/</id>
    <published>2019-01-13T12:37:42.000Z</published>
    <updated>2019-01-13T12:46:58.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入环境"><a href="#导入环境" class="headerlink" title="导入环境"></a>导入环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from tensorflow.examples.tutorials.mnist import input_data</span><br></pre></td></tr></table></figure><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>运行程序下面代码，mnist数据集会自动下载<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mnist = input_data.read_data_sets(&apos;data&apos;)</span><br></pre></td></tr></table></figure></p><h2 id="获得输入数据"><a href="#获得输入数据" class="headerlink" title="获得输入数据"></a>获得输入数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_inputs(noise_dim, image_height, image_width, image_depth):</span><br><span class="line">    # 真实数据</span><br><span class="line">    inputs_real = tf.placeholder(tf.float32, [None, image_height, image_width, image_depth], name=&apos;inputs_real&apos;)</span><br><span class="line">    # 噪声数据</span><br><span class="line">    inputs_noise = tf.placeholder(tf.float32, [None, noise_dim], name=&apos;inputs_noise&apos;)</span><br><span class="line"></span><br><span class="line">    return inputs_real, inputs_noise</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_generator(noise_img, output_dim, is_train=True, alpha=0.01):</span><br><span class="line">    with tf.variable_scope(&quot;generator&quot;, reuse=(not is_train)):</span><br><span class="line">        # 100 x 1 to 4 x 4 x 512</span><br><span class="line">        # 全连接层</span><br><span class="line">        layer1 = tf.layers.dense(noise_img, 4 * 4 * 512)</span><br><span class="line">        layer1 = tf.reshape(layer1, [-1, 4, 4, 512])</span><br><span class="line">        # batch normalization</span><br><span class="line">        layer1 = tf.layers.batch_normalization(layer1, training=is_train)</span><br><span class="line">        # Leaky ReLU</span><br><span class="line">        layer1 = tf.maximum(alpha * layer1, layer1)</span><br><span class="line">        # dropout</span><br><span class="line">        layer1 = tf.nn.dropout(layer1, keep_prob=0.8)</span><br><span class="line"></span><br><span class="line">        # 4 x 4 x 512 to 7 x 7 x 256</span><br><span class="line">        layer2 = tf.layers.conv2d_transpose(layer1, 256, 4, strides=1, padding=&apos;valid&apos;)</span><br><span class="line">        layer2 = tf.layers.batch_normalization(layer2, training=is_train)</span><br><span class="line">        layer2 = tf.maximum(alpha * layer2, layer2)</span><br><span class="line">        layer2 = tf.nn.dropout(layer2, keep_prob=0.8)</span><br><span class="line"></span><br><span class="line">        # 7 x 7 256 to 14 x 14 x 128</span><br><span class="line">        layer3 = tf.layers.conv2d_transpose(layer2, 128, 3, strides=2, padding=&apos;same&apos;)</span><br><span class="line">        layer3 = tf.layers.batch_normalization(layer3, training=is_train)</span><br><span class="line">        layer3 = tf.maximum(alpha * layer3, layer3)</span><br><span class="line">        layer3 = tf.nn.dropout(layer3, keep_prob=0.8)</span><br><span class="line"></span><br><span class="line">        # 14 x 14 x 128 to 28 x 28 x 1</span><br><span class="line">        logits = tf.layers.conv2d_transpose(layer3, output_dim, 3, strides=2, padding=&apos;same&apos;)</span><br><span class="line">        # MNIST原始数据集的像素范围在0-1，这里的生成图片范围为(-1,1)</span><br><span class="line">        # 因此在训练时，记住要把MNIST像素范围进行resize</span><br><span class="line">        outputs = tf.tanh(logits)</span><br><span class="line"></span><br><span class="line">        return outputs</span><br></pre></td></tr></table></figure><h2 id="判别器"><a href="#判别器" class="headerlink" title="判别器"></a>判别器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_discriminator(inputs_img, reuse=False, alpha=0.01):</span><br><span class="line">    with tf.variable_scope(&quot;discriminator&quot;, reuse=reuse):</span><br><span class="line">        # 28 x 28 x 1 to 14 x 14 x 128</span><br><span class="line">        # 第一层不加入BN</span><br><span class="line">        layer1 = tf.layers.conv2d(inputs_img, 128, 3, strides=2, padding=&apos;same&apos;)</span><br><span class="line">        layer1 = tf.maximum(alpha * layer1, layer1)</span><br><span class="line">        layer1 = tf.nn.dropout(layer1, keep_prob=0.8)</span><br><span class="line"></span><br><span class="line">        # 14 x 14 x 128 to 7 x 7 x 256</span><br><span class="line">        layer2 = tf.layers.conv2d(layer1, 256, 3, strides=2, padding=&apos;same&apos;)</span><br><span class="line">        layer2 = tf.layers.batch_normalization(layer2, training=True)</span><br><span class="line">        layer2 = tf.maximum(alpha * layer2, layer2)</span><br><span class="line">        layer2 = tf.nn.dropout(layer2, keep_prob=0.8)</span><br><span class="line"></span><br><span class="line">        # 7 x 7 x 256 to 4 x 4 x 512</span><br><span class="line">        layer3 = tf.layers.conv2d(layer2, 512, 3, strides=2, padding=&apos;same&apos;)</span><br><span class="line">        layer3 = tf.layers.batch_normalization(layer3, training=True)</span><br><span class="line">        layer3 = tf.maximum(alpha * layer3, layer3)</span><br><span class="line">        layer3 = tf.nn.dropout(layer3, keep_prob=0.8)</span><br><span class="line"></span><br><span class="line">        # 4 x 4 x 512 to 4*4*512 x 1</span><br><span class="line">        flatten = tf.reshape(layer3, (-1, 4 * 4 * 512))</span><br><span class="line">        logits = tf.layers.dense(flatten, 1)</span><br><span class="line">        outputs = tf.sigmoid(logits)</span><br><span class="line"></span><br><span class="line">        return logits, outputs</span><br></pre></td></tr></table></figure><h2 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_loss(inputs_real, inputs_noise, image_depth, smooth=0.1):</span><br><span class="line">    g_outputs = get_generator(inputs_noise, image_depth, is_train=True)</span><br><span class="line">    d_logits_real, d_outputs_real = get_discriminator(inputs_real)</span><br><span class="line">    d_logits_fake, d_outputs_fake = get_discriminator(g_outputs, reuse=True)</span><br><span class="line"></span><br><span class="line">    # 计算Loss</span><br><span class="line">    g_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_logits_fake,</span><br><span class="line">                                                                    labels=tf.ones_like(d_outputs_fake) * (1 - smooth)))</span><br><span class="line"></span><br><span class="line">    d_loss_real = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_logits_real,</span><br><span class="line">                                                                         labels=tf.ones_like(d_outputs_real) * (</span><br><span class="line">                                                                                     1 - smooth)))</span><br><span class="line">    d_loss_fake = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_logits_fake,</span><br><span class="line">                                                                         labels=tf.zeros_like(d_outputs_fake)))</span><br><span class="line">    d_loss = tf.add(d_loss_real, d_loss_fake)</span><br><span class="line"></span><br><span class="line">    return g_loss, d_loss</span><br></pre></td></tr></table></figure><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_optimizer(g_loss, d_loss, learning_rate=0.001):</span><br><span class="line">    train_vars = tf.trainable_variables()</span><br><span class="line"></span><br><span class="line">    g_vars = [var for var in train_vars if var.name.startswith(&quot;generator&quot;)]</span><br><span class="line">    d_vars = [var for var in train_vars if var.name.startswith(&quot;discriminator&quot;)]</span><br><span class="line"></span><br><span class="line">    # Optimizer</span><br><span class="line">    with tf.control_dependencies(tf.get_collection(tf.GraphKeys.UPDATE_OPS)):</span><br><span class="line">        g_opt = tf.train.RMSPropOptimizer(learning_rate).minimize(g_loss, var_list=g_vars)</span><br><span class="line">        d_opt = tf.train.RMSPropOptimizer(learning_rate).minimize(d_loss, var_list=d_vars)</span><br><span class="line"></span><br><span class="line">    return g_opt, d_opt</span><br></pre></td></tr></table></figure><h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def plot_images(samples):</span><br><span class="line">    fig, axes = plt.subplots(nrows=5, ncols=5, sharex=True, sharey=True, figsize=(7, 7))</span><br><span class="line">    for img, ax in zip(samples, axes.flatten()):</span><br><span class="line">        ax.imshow(img.reshape((28, 28)), cmap=&apos;Greys_r&apos;)</span><br><span class="line">        ax.get_xaxis().set_visible(False)</span><br><span class="line">        ax.get_yaxis().set_visible(False)</span><br><span class="line">    fig.tight_layout(pad=0)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def show_generator_output(sess, n_images, inputs_noise, output_dim):</span><br><span class="line">    noise_shape = inputs_noise.get_shape().as_list()[-1]</span><br><span class="line">    # 生成噪声图片</span><br><span class="line">    examples_noise = np.random.uniform(-1, 1, size=[n_images, noise_shape])</span><br><span class="line"></span><br><span class="line">    samples = sess.run(get_generator(inputs_noise, output_dim, False),</span><br><span class="line">                       feed_dict=&#123;inputs_noise: examples_noise&#125;)</span><br><span class="line"></span><br><span class="line">    result = np.squeeze(samples, -1)</span><br><span class="line">    return result</span><br></pre></td></tr></table></figure><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 定义参数</span><br><span class="line">batch_size = 64</span><br><span class="line">noise_size = 100</span><br><span class="line">epochs = 5</span><br><span class="line">n_samples = 25</span><br><span class="line">learning_rate = 0.001</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def train(noise_size, data_shape, batch_size, n_samples):</span><br><span class="line">    # 存储loss</span><br><span class="line">    losses = []</span><br><span class="line">    steps = 0</span><br><span class="line"></span><br><span class="line">    inputs_real, inputs_noise = get_inputs(noise_size, data_shape[1], data_shape[2], data_shape[3])</span><br><span class="line">    g_loss, d_loss = get_loss(inputs_real, inputs_noise, data_shape[-1])</span><br><span class="line">    print(&quot;FUNCTION READY!!&quot;)</span><br><span class="line">    for _ in range(6):</span><br><span class="line">        g_train_opt, d_train_opt = get_optimizer(g_loss, d_loss, learning_rate)</span><br><span class="line">    print(&quot;TRAINING....&quot;)</span><br><span class="line">    #exit()</span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line">        # 迭代epoch</span><br><span class="line">        for e in range(epochs):</span><br><span class="line">            for batch_i in range(mnist.train.num_examples // batch_size):</span><br><span class="line">                steps += 1</span><br><span class="line">                batch = mnist.train.next_batch(batch_size)</span><br><span class="line"></span><br><span class="line">                batch_images = batch[0].reshape((batch_size, data_shape[1], data_shape[2], data_shape[3]))</span><br><span class="line">                # scale to -1, 1</span><br><span class="line">                batch_images = batch_images * 2 - 1</span><br><span class="line"></span><br><span class="line">                # noise</span><br><span class="line">                batch_noise = np.random.uniform(-1, 1, size=(batch_size, noise_size))</span><br><span class="line"></span><br><span class="line">                # run optimizer</span><br><span class="line">                sess.run(g_train_opt, feed_dict=&#123;inputs_real: batch_images,</span><br><span class="line">                                                 inputs_noise: batch_noise&#125;)</span><br><span class="line">                sess.run(d_train_opt, feed_dict=&#123;inputs_real: batch_images,</span><br><span class="line">                                                 inputs_noise: batch_noise&#125;)</span><br><span class="line"></span><br><span class="line">                if steps % 101 == 0:</span><br><span class="line">                    train_loss_d = d_loss.eval(&#123;inputs_real: batch_images,</span><br><span class="line">                                                inputs_noise: batch_noise&#125;)</span><br><span class="line">                    train_loss_g = g_loss.eval(&#123;inputs_real: batch_images,</span><br><span class="line">                                                inputs_noise: batch_noise&#125;)</span><br><span class="line">                    losses.append((train_loss_d, train_loss_g))</span><br><span class="line">                    print(&quot;Epoch &#123;&#125;/&#123;&#125;....&quot;.format(e + 1, epochs),</span><br><span class="line">                          &quot;Discriminator Loss: &#123;:.4f&#125;....&quot;.format(train_loss_d),</span><br><span class="line">                          &quot;Generator Loss: &#123;:.4f&#125;....&quot;.format(train_loss_g))</span><br><span class="line"></span><br><span class="line">            if e % 1 == 0:</span><br><span class="line">                # 显示图片</span><br><span class="line">                samples = show_generator_output(sess, n_samples, inputs_noise, data_shape[-1])</span><br><span class="line">                plot_images(samples)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with tf.Graph().as_default():</span><br><span class="line">    train(noise_size, [-1, 28, 28, 1], batch_size, n_samples)</span><br><span class="line">    print(&quot;OPTIMIZER END!!&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导入环境&quot;&gt;&lt;a href=&quot;#导入环境&quot; class=&quot;headerlink&quot; title=&quot;导入环境&quot;&gt;&lt;/a&gt;导入环境&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="深度学习" scheme="https://janvia.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="DCGAN" scheme="https://janvia.github.io/tags/DCGAN/"/>
    
  </entry>
  
  <entry>
    <title>RNN写文章</title>
    <link href="https://janvia.github.io/2019/01/13/RNN/"/>
    <id>https://janvia.github.io/2019/01/13/RNN/</id>
    <published>2019-01-13T10:06:04.000Z</published>
    <updated>2019-01-13T14:07:49.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章下载"><a href="#文章下载" class="headerlink" title="文章下载"></a>文章下载</h2><p>下载文章或重新找一篇文章：<br><a href="https://pan.baidu.com/s/1-dZd1oKZSawCN0R7LQWz1g" target="_blank" rel="noopener">https://pan.baidu.com/s/1-dZd1oKZSawCN0R7LQWz1g</a></p><h2 id="导入环境"><a href="#导入环境" class="headerlink" title="导入环境"></a>导入环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.contrib import rnn</span><br><span class="line">import random</span><br><span class="line">import time</span><br><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">tf.reset_default_graph()</span><br><span class="line">train_file = &apos;words.txt&apos;</span><br></pre></td></tr></table></figure><h2 id="简单时间处理"><a href="#简单时间处理" class="headerlink" title="简单时间处理"></a>简单时间处理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def str_time(sec):</span><br><span class="line">    if sec &lt; 60:</span><br><span class="line">        return str(sec) + &quot; sec&quot;</span><br><span class="line">    elif sec &lt; (60 * 60):</span><br><span class="line">        return str(sec / 60) + &quot; min&quot;</span><br><span class="line">    else:</span><br><span class="line">        return str(sec / (60 * 60)) + &quot; hour&quot;</span><br></pre></td></tr></table></figure><h2 id="处理汉字"><a href="#处理汉字" class="headerlink" title="处理汉字"></a>处理汉字</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_char(txt_file):</span><br><span class="line">    labels = str()</span><br><span class="line">    with open(file=txt_file, mode=&apos;rb&apos;) as f:</span><br><span class="line">        for label in f:</span><br><span class="line">            labels = label.decode(&quot;utf-8&quot;)</span><br><span class="line">    return labels</span><br></pre></td></tr></table></figure><h2 id="处理多个中文文件"><a href="#处理多个中文文件" class="headerlink" title="处理多个中文文件"></a>处理多个中文文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def readfile(files):</span><br><span class="line">    labels = list()</span><br><span class="line">    for txt_file in files:</span><br><span class="line">        target = get_char(txt_file)</span><br><span class="line">        labels.append(target)</span><br><span class="line">    return labels</span><br></pre></td></tr></table></figure><h2 id="将文本数组转换为向量"><a href="#将文本数组转换为向量" class="headerlink" title="将文本数组转换为向量"></a>将文本数组转换为向量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def char_vector(files, num_map, label=None):</span><br><span class="line">    word_size = len(num_map)</span><br><span class="line">    vector = lambda word: num_map.get(word, word_size)</span><br><span class="line">    if files:</span><br><span class="line">        label = get_char(files)</span><br><span class="line">    labels_vector = list(map(vector, label))</span><br><span class="line"></span><br><span class="line">    return labels_vector</span><br></pre></td></tr></table></figure><h2 id="样本预处理"><a href="#样本预处理" class="headerlink" title="样本预处理"></a>样本预处理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">train_data = get_char(train_file)</span><br><span class="line">print(&quot;Loading training data...&quot;)</span><br><span class="line"></span><br><span class="line">print(len(train_data))</span><br><span class="line">counter = Counter(train_data)</span><br><span class="line">words = sorted(counter)</span><br><span class="line">words_size = len(words)</span><br><span class="line">words_num_map = dict(zip(words, range(words_size)))</span><br><span class="line"></span><br><span class="line">print(&quot;字表大小：&quot;, words_size)</span><br><span class="line">word_label = char_vector(train_file, words_num_map)</span><br></pre></td></tr></table></figure><h2 id="超参数设置"><a href="#超参数设置" class="headerlink" title="超参数设置"></a>超参数设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">learning_rate = 0.001</span><br><span class="line">epochs = 100000</span><br><span class="line">display_step = 1000</span><br><span class="line">n_input = 4  # 每次输入4个汉字， 预测第5个汉字</span><br><span class="line"></span><br><span class="line"># 隐层神经元</span><br><span class="line">n_hidden1 = 256</span><br><span class="line">n_hidden2 = 512</span><br><span class="line">n_hidden3 = 512</span><br><span class="line">keep_prob=0.8</span><br><span class="line">layer_num=3</span><br><span class="line">batch_size=1</span><br><span class="line"># 定义X, Y的placeholder</span><br><span class="line">x = tf.placeholder(&quot;float&quot;, [None, n_input, 1])</span><br><span class="line">y = tf.placeholder(&quot;float&quot;, [None, words_size])</span><br><span class="line"></span><br><span class="line"># 对 weights biases 初始值的定义</span><br><span class="line">weights = &#123;</span><br><span class="line"></span><br><span class="line">    &apos;in&apos;: tf.Variable(tf.random_normal([n_input,n_hidden1])),</span><br><span class="line"></span><br><span class="line">    &apos;out&apos;: tf.Variable(tf.random_normal([n_hidden2,words_size]))</span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    # shape (128, )</span><br><span class="line">    &apos;in&apos;: tf.Variable(tf.constant(0.1, shape=[n_hidden1,])),</span><br><span class="line">    # shape (10, )</span><br><span class="line">    &apos;out&apos;: tf.Variable(tf.constant(0.1, shape=[words_size, ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义网络结构"><a href="#定义网络结构" class="headerlink" title="定义网络结构"></a>定义网络结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def lstm_call():</span><br><span class="line">    cell = tf.nn.rnn_cell.LSTMCell(num_units=n_hidden1, reuse=tf.get_variable_scope().reuse)</span><br><span class="line">    return tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob=keep_prob)</span><br><span class="line"></span><br><span class="line">def RNN(x, weights, biases):</span><br><span class="line"></span><br><span class="line">    x = tf.reshape(x, [batch_size, n_input, 1])  # (1,4,1) 相当于batch =1</span><br><span class="line">    # rnn</span><br><span class="line">    cell = tf.contrib.rnn.BasicLSTMCell(n_hidden2)</span><br><span class="line">    init_state = cell.zero_state(batch_size, dtype=tf.float32)</span><br><span class="line">    # final_state 的维度是  batch * n_hidden                       --&gt; 1 * 512</span><br><span class="line">    # outputs     的维度是  batch * n_input(time_step) * n_hidden  --&gt; 1 * 4  * 512</span><br><span class="line">    outputs, final_state = tf.nn.dynamic_rnn(cell, x, initial_state=init_state, time_major=False)</span><br><span class="line"></span><br><span class="line">    # print (&quot;before unstack , output shape : &quot;,outputs.shape)   # output shape :  (1,3,512) (batch,time_step,cell_n_hidden)</span><br><span class="line">    # unstack 更改维度</span><br><span class="line">    outputs = tf.unstack(tf.transpose(outputs, [1, 0, 2]))</span><br><span class="line">    # 这个时候 outputs 变成了list</span><br><span class="line">    # print (&quot;output shape[-1] 2: &quot;,outputs[-1].shape)           # output shape :  (3,1,512), outputs[-1] shape (1,512)</span><br><span class="line">    results = tf.matmul(outputs[-1], weights[&apos;out&apos;]) + biases[&apos;out&apos;]</span><br><span class="line">    # (1,112)  这个的表示意义是一个(1,112)的onehot，112表示字典里面总共有112个词汇</span><br><span class="line">    return results</span><br></pre></td></tr></table></figure><h2 id="计算损失值并初始化optimizer"><a href="#计算损失值并初始化optimizer" class="headerlink" title="计算损失值并初始化optimizer"></a>计算损失值并初始化optimizer</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">predicted = RNN(x,weights,biases)</span><br><span class="line"># Loss optimizer</span><br><span class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=predicted, labels=y))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(loss)</span><br><span class="line"></span><br><span class="line"># Model evaluation</span><br><span class="line">correct_pred = tf.equal(tf.argmax(predicted, 1), tf.argmax(y, 1))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))</span><br><span class="line"></span><br><span class="line"># 保存模型</span><br><span class="line">save_dir = &quot;model/&quot;</span><br><span class="line">saver = tf.train.Saver(max_to_keep=1)</span><br><span class="line"></span><br><span class="line"># 初始化所有变量</span><br><span class="line">init = tf.global_variables_initializer()</span><br></pre></td></tr></table></figure><h2 id="训练及测试模型"><a href="#训练及测试模型" class="headerlink" title="训练及测试模型"></a>训练及测试模型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with tf.Session() as sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    # 每训练一次，取后面四个文字向量当做输入，第五个文字向量当做标签用作计算loss</span><br><span class="line">    offset = random.randint(0, n_input + 1)</span><br><span class="line">    end_offset = n_input + 1</span><br><span class="line">    step = 0</span><br><span class="line">    loss_total = 0.</span><br><span class="line">    acc_total = 0.</span><br><span class="line"></span><br><span class="line">    # 恢复模型并继续训练</span><br><span class="line">    model = tf.train.latest_checkpoint(save_dir)</span><br><span class="line">    print(&quot;model-ckpt:&quot;, model)</span><br><span class="line">    start_epoch = 0</span><br><span class="line">    if model:</span><br><span class="line">        saver.restore(sess, model)</span><br><span class="line">        ind = model.find(&quot;-&quot;)</span><br><span class="line">        start_epoch = int(model[ind + 1:])</span><br><span class="line">        print(start_epoch)</span><br><span class="line">        step = start_epoch</span><br><span class="line"></span><br><span class="line">    while step &lt; epochs:</span><br><span class="line"></span><br><span class="line">        # 随机选择一个位置</span><br><span class="line">        if offset &gt; (len(train_data) - end_offset):</span><br><span class="line">            offset = random.randint(0, n_input + 1)</span><br><span class="line"></span><br><span class="line">        # 按照指定的位置获取后四个文字向量，当做输入</span><br><span class="line">        in_words = [[word_label[word]] for word in range(offset, offset + n_input)]</span><br><span class="line">        in_words = np.reshape(np.array(in_words), [-1, n_input, 1])</span><br><span class="line"></span><br><span class="line">        out_onehot = np.zeros([words_size], dtype=float)</span><br><span class="line">        out_onehot[word_label[offset + n_input]] = 1.0</span><br><span class="line">        # 所有的字都变成onehot</span><br><span class="line">        out_onehot = np.reshape(out_onehot, [1, -1])</span><br><span class="line"></span><br><span class="line">        _, acc, loss_val, onehot_pred = sess.run([optimizer, accuracy, loss, predicted],</span><br><span class="line">                                                 feed_dict=&#123;x: in_words, y: out_onehot&#125;)</span><br><span class="line">        loss_total += loss_val</span><br><span class="line">        acc_total += acc</span><br><span class="line">        if (step + 1) % display_step == 0:</span><br><span class="line">            print(&quot;Iter= &quot; + str(step + 1) +</span><br><span class="line">                  &quot;, Average Loss= &quot; + &quot;&#123;:.6f&#125;&quot;.format(loss_total / display_step) +</span><br><span class="line">                  &quot;, Average Accuracy= &quot; + &quot;&#123;:.2f&#125;%&quot;.format(100 * acc_total / display_step))</span><br><span class="line"></span><br><span class="line">            acc_total = 0.</span><br><span class="line">            loss_total = 0.</span><br><span class="line">            in2 = [words[word_label[i]] for i in range(offset, offset + n_input)]</span><br><span class="line">            out2 = words[word_label[offset + n_input]]</span><br><span class="line">            out_pred = words[int(tf.argmax(onehot_pred, 1).eval())]</span><br><span class="line">            print(&quot;%s - [%s] vs [%s]&quot; % (in2, out2, out_pred))</span><br><span class="line">            saver.save(sess, save_dir + &quot;CharRNN.cpkt&quot;, global_step=step)</span><br><span class="line">        # 中间隔了一个，作为预测</span><br><span class="line">        offset += (n_input + 1)</span><br><span class="line">        step += 1</span><br><span class="line"></span><br><span class="line">    print(&quot;Finished!&quot;)</span><br><span class="line">    saver.save(sess, save_dir + &quot;CharRnn.cpkt&quot;, global_step=step)</span><br><span class="line">    print(&quot;Elapsed time: &quot;, str_time(time.time() - start_time))</span><br><span class="line"></span><br><span class="line">    # 测试模型</span><br><span class="line">    while True:</span><br><span class="line">        prompt = &quot;请输入%s个字: &quot; % n_input</span><br><span class="line">        sentence = input(prompt)</span><br><span class="line">        input_word = sentence.strip()</span><br><span class="line"></span><br><span class="line">        if len(input_word) != n_input:</span><br><span class="line">            print(&quot;您输入的字符长度为：&quot;, len(input_word), &quot;请输入4个字&quot;)</span><br><span class="line">            continue</span><br><span class="line">        try:</span><br><span class="line">            input_word = char_vector(None, words_num_map, input_word)</span><br><span class="line"></span><br><span class="line">            for i in range(100):</span><br><span class="line">                keys = np.reshape(np.array(input_word), [-1, n_input, 1])</span><br><span class="line">                onehot_pred = sess.run(predicted, feed_dict=&#123;x: keys&#125;)</span><br><span class="line">                onehot_pred_index = int(tf.argmax(onehot_pred, 1).eval())</span><br><span class="line">                sentence = &quot;%s%s&quot; % (sentence, words[onehot_pred_index])</span><br><span class="line">                input_word = input_word[1:]</span><br><span class="line">                input_word.append(onehot_pred_index)</span><br><span class="line">            print(sentence)</span><br><span class="line"></span><br><span class="line">        except:</span><br><span class="line">            print(&quot;该字我还没学会&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文章下载&quot;&gt;&lt;a href=&quot;#文章下载&quot; class=&quot;headerlink&quot; title=&quot;文章下载&quot;&gt;&lt;/a&gt;文章下载&lt;/h2&gt;&lt;p&gt;下载文章或重新找一篇文章：&lt;br&gt;&lt;a href=&quot;https://pan.baidu.com/s/1-dZd1oKZSaw
      
    
    </summary>
    
      <category term="深度学习" scheme="https://janvia.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="RNN" scheme="https://janvia.github.io/tags/RNN/"/>
    
  </entry>
  
  <entry>
    <title>循环神经网络RNN-写诗</title>
    <link href="https://janvia.github.io/2019/01/13/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CRNN-%E5%86%99%E8%AF%97/"/>
    <id>https://janvia.github.io/2019/01/13/循环神经网络RNN-写诗/</id>
    <published>2019-01-13T08:12:06.000Z</published>
    <updated>2019-01-13T10:42:25.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h2><p>下载地址：<a href="https://pan.baidu.com/s/19fAqY0_ajkTiKfOBbpY_Sg" target="_blank" rel="noopener">https://pan.baidu.com/s/19fAqY0_ajkTiKfOBbpY_Sg</a></p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import collections</span><br><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">poetry_file = &apos;data/poetry.txt&apos;</span><br><span class="line"></span><br><span class="line"># 数据清洗，生成诗集</span><br><span class="line">poetrys = []</span><br><span class="line">with open(poetry_file, &quot;r&quot;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        try:</span><br><span class="line">            line = line.strip(u&apos;\n&apos;)          #strip() 方法用于移除字符串头尾指定的字符</span><br><span class="line">            title, content = line.strip(u&apos; &apos;).split(u&apos;:&apos;)</span><br><span class="line">            content = content.replace(u&apos; &apos;, u&apos;&apos;)</span><br><span class="line">            if u&apos;_&apos; in content or u&apos;(&apos; in content or u&apos;（&apos; in content or u&apos;《&apos; in content or u&apos;[&apos; in content:</span><br><span class="line">                continue</span><br><span class="line">            if len(content) &lt; 5 or len(content) &gt; 79:</span><br><span class="line">                continue</span><br><span class="line">            content = u&apos;[&apos; + content + u&apos;]&apos;</span><br><span class="line">            poetrys.append(content)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            pass</span><br><span class="line"># print(poetrys[0])</span><br><span class="line"></span><br><span class="line"># 按诗的字数排序</span><br><span class="line">poetrys = sorted(poetrys, key=lambda lines: len(lines))</span><br><span class="line">print(&apos;唐诗总数: &apos;, len(poetrys))</span><br><span class="line"></span><br><span class="line"># 统计每个字出现次数</span><br><span class="line">all_words = []</span><br><span class="line">for poetry in poetrys:</span><br><span class="line">    all_words += [word for word in poetry]</span><br><span class="line">counter = collections.Counter(all_words)    #Counter是一个无序的容器类型，以字典的键值对形式存储，其中元素作为key，其计数作为value。</span><br><span class="line">count_pairs = sorted(counter.items(), key=lambda x: -x[1])</span><br><span class="line">words, _ = zip(*count_pairs)</span><br><span class="line"></span><br><span class="line"># 取前多少个常用字</span><br><span class="line">words = words[:len(words)] + (&apos; &apos;,)</span><br><span class="line"># 每个字映射为一个数字ID</span><br><span class="line">word_num_map = dict(zip(words, range(len(words))))</span><br><span class="line"># 把诗转换为向量形式.</span><br><span class="line">trans_to_num = lambda word: word_num_map.get(word, len(words))</span><br><span class="line">poetrys_vector = [list(map(trans_to_num, poetry)) for poetry in poetrys]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DataSet(object):</span><br><span class="line">    def __init__(self, data_size):</span><br><span class="line">        self._data_size = data_size</span><br><span class="line">        self._epochs_completed = 0</span><br><span class="line">        self._index_in_epoch = 0</span><br><span class="line">        self._data_index = np.arange(data_size)</span><br><span class="line"></span><br><span class="line">    def next_batch(self, batch_size):</span><br><span class="line">        start = self._index_in_epoch</span><br><span class="line">        if start + batch_size &gt; self._data_size:</span><br><span class="line">            np.random.shuffle(self._data_index)</span><br><span class="line">            self._epochs_completed = self._epochs_completed + 1</span><br><span class="line">            self._index_in_epoch = batch_size</span><br><span class="line">            full_batch_features, full_batch_labels = self.data_batch(0, batch_size)</span><br><span class="line">            return full_batch_features, full_batch_labels</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            self._index_in_epoch += batch_size</span><br><span class="line">            end = self._index_in_epoch</span><br><span class="line">            full_batch_features, full_batch_labels = self.data_batch(start, end)</span><br><span class="line">            if self._index_in_epoch == self._data_size:</span><br><span class="line">                self._index_in_epoch = 0</span><br><span class="line">                self._epochs_completed = self._epochs_completed + 1</span><br><span class="line">                np.random.shuffle(self._data_index)</span><br><span class="line">            return full_batch_features, full_batch_labels</span><br><span class="line"></span><br><span class="line">    def data_batch(self, start, end):</span><br><span class="line">        batches = []</span><br><span class="line">        for i in range(start, end):</span><br><span class="line">            batches.append(poetrys_vector[self._data_index[i]])</span><br><span class="line"></span><br><span class="line">        length = max(map(len, batches))</span><br><span class="line"></span><br><span class="line">        xdata = np.full((end - start, length), word_num_map[&apos; &apos;], np.int32)</span><br><span class="line">        for row in range(end - start):</span><br><span class="line">            xdata[row, :len(batches[row])] = batches[row]</span><br><span class="line">        ydata = np.copy(xdata)</span><br><span class="line">        ydata[:, :-1] = xdata[:, 1:]</span><br><span class="line">        return xdata, ydata</span><br></pre></td></tr></table></figure><h3 id="构建RNN网络计算图"><a href="#构建RNN网络计算图" class="headerlink" title="构建RNN网络计算图"></a>构建RNN网络计算图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 每次取64首诗进行训练</span><br><span class="line">batch_size = 64</span><br><span class="line">n_chunk = len(poetrys_vector) // batch_size</span><br><span class="line"></span><br><span class="line">input_data = tf.placeholder(tf.int32, [batch_size, None])</span><br><span class="line">output_targets = tf.placeholder(tf.int32, [batch_size, None])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义RNN</span><br><span class="line">def neural_network(model=&apos;lstm&apos;, rnn_size=128, num_layers=2):</span><br><span class="line">    global cell_fun</span><br><span class="line">    if model == &apos;rnn&apos;:</span><br><span class="line">        cell_fun = tf.nn.rnn_cell.BasicRNNCell</span><br><span class="line">    elif model == &apos;gru&apos;:</span><br><span class="line">        cell_fun = tf.nn.rnn_cell.GRUCell</span><br><span class="line">    elif model == &apos;lstm&apos;:</span><br><span class="line">        cell_fun = tf.nn.rnn_cell.BasicLSTMCell</span><br><span class="line"></span><br><span class="line">    cell = cell_fun(rnn_size, state_is_tuple=True)</span><br><span class="line">    cell = tf.nn.rnn_cell.MultiRNNCell([cell] * num_layers, state_is_tuple=True)</span><br><span class="line"></span><br><span class="line">    initial_state = cell.zero_state(batch_size, tf.float32)</span><br><span class="line"></span><br><span class="line">    with tf.variable_scope(&apos;rnnlm&apos;):</span><br><span class="line">        softmax_w = tf.get_variable(&quot;softmax_w&quot;, [rnn_size, len(words)])</span><br><span class="line">        softmax_b = tf.get_variable(&quot;softmax_b&quot;, [len(words)])</span><br><span class="line">        with tf.device(&quot;/cpu:0&quot;):</span><br><span class="line">            embedding = tf.get_variable(&quot;embedding&quot;, [len(words), rnn_size])</span><br><span class="line">            inputs = tf.nn.embedding_lookup(embedding, input_data)</span><br><span class="line"></span><br><span class="line">    outputs, last_state = tf.nn.dynamic_rnn(cell, inputs, initial_state=initial_state, scope=&apos;rnnlm&apos;)</span><br><span class="line">    output = tf.reshape(outputs, [-1, rnn_size])</span><br><span class="line"></span><br><span class="line">    logits = tf.matmul(output, softmax_w) + softmax_b</span><br><span class="line">    probs = tf.nn.softmax(logits)</span><br><span class="line">    return logits, last_state, probs, cell, initial_state</span><br></pre></td></tr></table></figure><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def load_model(sess, saver, ckpt_path):</span><br><span class="line">    latest_ckpt = tf.train.latest_checkpoint(ckpt_path)</span><br><span class="line">    if latest_ckpt:</span><br><span class="line">        print(&apos;resume from&apos;, latest_ckpt)</span><br><span class="line">        saver.restore(sess, latest_ckpt)</span><br><span class="line">        return int(latest_ckpt[latest_ckpt.rindex(&apos;-&apos;) + 1:])</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;building model from Training....&apos;)</span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line">        return -1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 训练</span><br><span class="line">def train_neural_network():</span><br><span class="line">    logits, last_state, _, _, _ = neural_network()</span><br><span class="line">    targets = tf.reshape(output_targets, [-1])</span><br><span class="line">    loss = tf.contrib.legacy_seq2seq.sequence_loss_by_example([logits], [targets],</span><br><span class="line">                                                              [tf.ones_like(targets, dtype=tf.float32)],</span><br><span class="line">                                                              len(words))</span><br><span class="line">##这个函数用于计算所有examples（假设一句话有n个单词，一个单词及单词所对应的label就是一个example,所有example就是一句话中所有单词）的加权交叉熵损失</span><br><span class="line">    cost = tf.reduce_mean(loss)</span><br><span class="line">    tf.summary.scalar(&apos;loss&apos;, tf.reshape(cost, []))##画损失图</span><br><span class="line"></span><br><span class="line">    learning_rate = tf.Variable(0.0, trainable=False)</span><br><span class="line">    tvars = tf.trainable_variables()##返回的是需要训练的变量列表</span><br><span class="line">    grads, _ = tf.clip_by_global_norm(tf.gradients(cost, tvars), 5)##tf.gradients：计算梯度；tf.clip_by_global_norm（t_list 是梯度张量， clip_norm 是截取的比率）让权重的更新限制在一个合适的范围</span><br><span class="line"></span><br><span class="line">    optimizer = tf.train.AdamOptimizer(learning_rate)</span><br><span class="line">    train_op = optimizer.apply_gradients(zip(grads, tvars))</span><br><span class="line"></span><br><span class="line">    Session_config = tf.ConfigProto(allow_soft_placement=True)</span><br><span class="line">    Session_config.gpu_options.allow_growth = True</span><br><span class="line"></span><br><span class="line">    trainds = DataSet(len(poetrys_vector))</span><br><span class="line"></span><br><span class="line">    with tf.Session(config=Session_config) as sess:</span><br><span class="line">        merged = tf.summary.merge_all()##tensorflow的可视化是使用summary和tensorboard合作完成的.###########tf.summary.merge_all: 将之前定义的所有summary op整合到一起</span><br><span class="line">        log_writer = tf.summary.FileWriter(&quot;logs&quot;, sess.graph)</span><br><span class="line">        sess.run(tf.initialize_all_variables())</span><br><span class="line">        saver = tf.train.Saver(tf.all_variables())</span><br><span class="line">        last_epoch = load_model(sess, saver, &apos;model/&apos;)</span><br><span class="line">        for epoch in range(last_epoch + 1, 1000):</span><br><span class="line">            sess.run(tf.assign(learning_rate, 0.002 * (0.97 ** epoch))) #tf.assign(A, new_number): 这个函数的功能主要是把A的值变为new_number</span><br><span class="line">            all_loss = 0.0</span><br><span class="line">            for batche in range(n_chunk):</span><br><span class="line">                x, y = trainds.next_batch(batch_size)</span><br><span class="line">                train_loss, _, _, merged_summary = sess.run([cost, last_state, train_op, merged],</span><br><span class="line">                                            feed_dict=&#123;input_data: x, output_targets: y&#125;)</span><br><span class="line">                all_loss = all_loss + train_loss</span><br><span class="line">                if batche % 50 == 1:</span><br><span class="line">                    log_writer.add_summary(merged_summary, batche)</span><br><span class="line">                    print(&quot;epoch:&#123;&#125; \n&quot;.format(epoch),</span><br><span class="line">                          &quot;batch:&#123;&#125; \n&quot;.format(batche),</span><br><span class="line">                          &quot;Learning_rate:&#123;&#125; \n&quot;.format(0.002 * (0.97 ** epoch)),</span><br><span class="line">                          &quot;train_loss:&#123;&#125; \n&quot;.format(train_loss))</span><br><span class="line"></span><br><span class="line">            print(epoch, &apos; Loss: &apos;, all_loss * 1.0 / n_chunk)</span><br><span class="line">            saver.save(sess, &apos;model/poetry.module-%d&apos; % epoch)</span><br><span class="line">        log_writer.close()</span><br><span class="line"></span><br><span class="line">train_neural_network()</span><br></pre></td></tr></table></figure><h2 id="生成古诗"><a href="#生成古诗" class="headerlink" title="生成古诗"></a>生成古诗</h2><h3 id="数据预处理-1"><a href="#数据预处理-1" class="headerlink" title="数据预处理"></a>数据预处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import collections</span><br><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">poetry_file = &apos;data/poetry.txt&apos;</span><br><span class="line"></span><br><span class="line"># 诗集</span><br><span class="line">poetrys = []</span><br><span class="line">with open(poetry_file, &quot;r&quot;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        try:</span><br><span class="line">            line = line.strip(u&apos;\n&apos;)</span><br><span class="line">            title, content = line.strip(u&apos; &apos;).split(u&apos;:&apos;)</span><br><span class="line">            content = content.replace(u&apos; &apos;, u&apos;&apos;)</span><br><span class="line">            if u&apos;_&apos; in content or u&apos;(&apos; in content or u&apos;（&apos; in content or u&apos;《&apos; in content or u&apos;[&apos; in content:</span><br><span class="line">                continue</span><br><span class="line">            if len(content) &lt; 5 or len(content) &gt; 79:</span><br><span class="line">                continue</span><br><span class="line">            content = u&apos;[&apos; + content + u&apos;]&apos;</span><br><span class="line">            poetrys.append(content)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">        # 按诗的字数排序</span><br><span class="line">poetrys = sorted(poetrys, key=lambda line: len(line))</span><br><span class="line">print(&apos;唐诗总数: &apos;, len(poetrys))</span><br><span class="line"></span><br><span class="line"># 统计每个字出现次数</span><br><span class="line">all_words = []</span><br><span class="line">for poetry in poetrys:</span><br><span class="line">    all_words += [word for word in poetry]</span><br><span class="line">counter = collections.Counter(all_words)</span><br><span class="line">count_pairs = sorted(counter.items(), key=lambda x: -x[1])</span><br><span class="line">words, _ = zip(*count_pairs)</span><br><span class="line"></span><br><span class="line"># 取前多少个常用字</span><br><span class="line">words = words[:len(words)] + (&apos; &apos;,)</span><br><span class="line"># 每个字映射为一个数字ID</span><br><span class="line">word_num_map = dict(zip(words, range(len(words))))</span><br><span class="line"># 把诗转换为向量形式</span><br><span class="line">to_num = lambda word: word_num_map.get(word, len(words))</span><br><span class="line">poetrys_vector = [list(map(to_num, poetry)) for poetry in poetrys]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 每次取64首诗进行训练</span><br><span class="line">batch_size = 1</span><br><span class="line">n_chunk = len(poetrys_vector) // batch_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------RNN--------------------------------------#</span><br><span class="line"></span><br><span class="line">input_data = tf.placeholder(tf.int32, [batch_size, None])</span><br><span class="line">output_targets = tf.placeholder(tf.int32, [batch_size, None])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义RNN</span><br><span class="line">def neural_network(model=&apos;lstm&apos;, rnn_size=128, num_layers=2):</span><br><span class="line">    global cell_fun</span><br><span class="line">    if model == &apos;rnn&apos;:</span><br><span class="line">        cell_fun = tf.nn.rnn_cell.BasicRNNCell</span><br><span class="line">    elif model == &apos;gru&apos;:</span><br><span class="line">        cell_fun = tf.nn.rnn_cell.GRUCell</span><br><span class="line">    elif model == &apos;lstm&apos;:</span><br><span class="line">        cell_fun = tf.nn.rnn_cell.BasicLSTMCell</span><br><span class="line"></span><br><span class="line">    cell = cell_fun(rnn_size, state_is_tuple=True)</span><br><span class="line">    cell = tf.nn.rnn_cell.MultiRNNCell([cell] * num_layers, state_is_tuple=True)</span><br><span class="line"></span><br><span class="line">    initial_state = cell.zero_state(batch_size, tf.float32)</span><br><span class="line"></span><br><span class="line">    with tf.variable_scope(&apos;rnnlm&apos;):</span><br><span class="line">        softmax_w = tf.get_variable(&quot;softmax_w&quot;, [rnn_size, len(words)])</span><br><span class="line">        softmax_b = tf.get_variable(&quot;softmax_b&quot;, [len(words)])</span><br><span class="line">        with tf.device(&quot;/cpu:0&quot;):</span><br><span class="line">            embedding = tf.get_variable(&quot;embedding&quot;, [len(words), rnn_size])</span><br><span class="line">            inputs = tf.nn.embedding_lookup(embedding, input_data)</span><br><span class="line"></span><br><span class="line">    outputs, last_state = tf.nn.dynamic_rnn(cell, inputs, initial_state=initial_state, scope=&apos;rnnlm&apos;)</span><br><span class="line">    output = tf.reshape(outputs, [-1, rnn_size])</span><br><span class="line"></span><br><span class="line">    logits = tf.matmul(output, softmax_w) + softmax_b</span><br><span class="line">    probs = tf.nn.softmax(logits)</span><br><span class="line">    return logits, last_state, probs, cell, initial_state</span><br></pre></td></tr></table></figure><h3 id="用训练完成的模型生成古诗"><a href="#用训练完成的模型生成古诗" class="headerlink" title="用训练完成的模型生成古诗"></a>用训练完成的模型生成古诗</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def gen_head_poetry(heads, type):</span><br><span class="line">    if type != 5 and type != 7:</span><br><span class="line">        print(&apos;The second para has to be 5 or 7!&apos;)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def to_word(weights):</span><br><span class="line">        t = np.cumsum(weights)#a = np.array([[1,2,3], [4,5,6]])### np.cumsum(a)###array([ 1,  3,  6, 10, 15, 21])####array([1，1+2=3，1+2+3=6，1+2+3+4=10，1+2+3+4+5=15，1+2+3+4+5+6=21]）</span><br><span class="line">        s = np.sum(weights)</span><br><span class="line">        sample = int(np.searchsorted(t, np.random.rand(1) * s))##np.random.rand(3,2)##括号中为shape##np.searchsorted:寻找某个数应该插在数组的什么位置上，这个数组必须是按序排列的</span><br><span class="line">        return words[sample]</span><br><span class="line"></span><br><span class="line">    _, last_state, probs, cell, initial_state = neural_network()</span><br><span class="line">    Session_config = tf.ConfigProto(allow_soft_placement=True)</span><br><span class="line">    Session_config.gpu_options.allow_growth = True</span><br><span class="line"></span><br><span class="line">    with tf.Session(config=Session_config) as sess:</span><br><span class="line">        with tf.device(&apos;/gpu:1&apos;):</span><br><span class="line"></span><br><span class="line">            sess.run(tf.initialize_all_variables())</span><br><span class="line"></span><br><span class="line">            saver = tf.train.Saver(tf.all_variables())</span><br><span class="line">            saver.restore(sess, &apos;model/poetry.module-99&apos;)</span><br><span class="line">            poem = &apos;&apos;</span><br><span class="line">            for head in heads:</span><br><span class="line">                flag = True</span><br><span class="line">                while flag:</span><br><span class="line"></span><br><span class="line">                    state_ = sess.run(cell.zero_state(1, tf.float32))</span><br><span class="line"></span><br><span class="line">                    x = np.array([list(map(word_num_map.get, u&apos;[&apos;))])</span><br><span class="line">                    [probs_, state_] = sess.run([probs, last_state], feed_dict=&#123;input_data: x, initial_state: state_&#125;)</span><br><span class="line"></span><br><span class="line">                    sentence = head</span><br><span class="line"></span><br><span class="line">                    x = np.zeros((1, 1))</span><br><span class="line">                    x[0, 0] = word_num_map[sentence]</span><br><span class="line">                    [probs_, state_] = sess.run([probs, last_state], feed_dict=&#123;input_data: x, initial_state: state_&#125;)</span><br><span class="line">                    word = to_word(probs_)</span><br><span class="line">                    sentence += word</span><br><span class="line"></span><br><span class="line">                    while word != u&apos;。&apos;:</span><br><span class="line">                        x = np.zeros((1, 1))</span><br><span class="line">                        x[0, 0] = word_num_map[word]</span><br><span class="line">                        [probs_, state_] = sess.run([probs, last_state],</span><br><span class="line">                                                    feed_dict=&#123;input_data: x, initial_state: state_&#125;)</span><br><span class="line">                        word = to_word(probs_)</span><br><span class="line">                        sentence += word</span><br><span class="line"></span><br><span class="line">                    if len(sentence) == 2 + 2 * type:</span><br><span class="line">                        sentence += u&apos;\n&apos;</span><br><span class="line">                        poem += sentence</span><br><span class="line">                        flag = False</span><br><span class="line"></span><br><span class="line">            return poem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gen_poetry():</span><br><span class="line">    def to_word(weights):</span><br><span class="line">        t = np.cumsum(weights)</span><br><span class="line">        s = np.sum(weights)</span><br><span class="line">        sample = int(np.searchsorted(t, np.random.rand(1) * s))</span><br><span class="line">        return words[sample]</span><br><span class="line"></span><br><span class="line">    _, last_state, probs, cell, initial_state = neural_network()</span><br><span class="line"></span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        sess.run(tf.initialize_all_variables())</span><br><span class="line">        saver = tf.train.Saver(tf.all_variables())</span><br><span class="line">        saver.restore(sess, &apos;model/poetry.module-99&apos;)</span><br><span class="line">        state_ = sess.run(cell.zero_state(1, tf.float32))</span><br><span class="line">        x = np.array([list(map(word_num_map.get, &apos;[&apos;))])</span><br><span class="line">        [probs_, state_] = sess.run([probs, last_state], feed_dict=&#123;input_data: x, initial_state: state_&#125;)</span><br><span class="line">        word = to_word(probs_)</span><br><span class="line">        poem = &apos;&apos;</span><br><span class="line">        while word != &apos;[&apos;:</span><br><span class="line">            poem += word</span><br><span class="line">            x = np.zeros((1, 1))</span><br><span class="line">            x[0, 0] = word_num_map[word]</span><br><span class="line">            [probs_, state_] = sess.run([probs, last_state], feed_dict=&#123;input_data: x, initial_state: state_&#125;)</span><br><span class="line">            word = to_word(probs_)</span><br><span class="line">        return poem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#print(gen_poetry())</span><br><span class="line">print(gen_head_poetry(u&apos;言叶之庭&apos;, 5))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据下载&quot;&gt;&lt;a href=&quot;#数据下载&quot; class=&quot;headerlink&quot; title=&quot;数据下载&quot;&gt;&lt;/a&gt;数据下载&lt;/h2&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://pan.baidu.com/s/19fAqY0_ajkTiKfOBbpY_Sg&quot;
      
    
    </summary>
    
      <category term="深度学习" scheme="https://janvia.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="LSTM" scheme="https://janvia.github.io/tags/LSTM/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow-基础语法</title>
    <link href="https://janvia.github.io/2019/01/12/tensorflow-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://janvia.github.io/2019/01/12/tensorflow-基础语法/</id>
    <published>2019-01-12T08:09:54.000Z</published>
    <updated>2019-01-12T08:24:04.040Z</updated>
    
    <content type="html"><![CDATA[<p>数学公式API：<a href="https://github.com/tensorflow/docs/blob/master/site/en/api_guides/python" target="_blank" rel="noopener">https://github.com/tensorflow/docs/blob/master/site/en/api_guides/python</a></p><h2 id="constant"><a href="#constant" class="headerlink" title="constant"></a>constant</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = tf.constant(0, name=&apos;B&apos;)</span><br><span class="line">b = tf.constant(1)</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x = tf.zeros([2, 3], tf.int32)</span><br><span class="line">y = tf.zeros_like(x, optimize=True)</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with tf.variable_scope(&apos;meh&apos;) as scope:</span><br><span class="line">    a = tf.get_variable(&apos;a&apos;, [10])</span><br><span class="line">    b = tf.get_variable(&apos;b&apos;, [100])</span><br><span class="line"></span><br><span class="line">writer = tf.summary.FileWriter(&apos;./graphs/test&apos;, tf.get_default_graph())</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="placeholdder占位符"><a href="#placeholdder占位符" class="headerlink" title="placeholdder占位符"></a>placeholdder占位符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line">output = tf.multiply(input1, input2)</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    print(sess.run([output], feed_dict=&#123;input1:[7.], input2:[2.]&#125;))</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.cast(tf.constant(2.0), tf.int32)</span><br></pre></td></tr></table></figure><h2 id="把numpy转换成Tensor"><a href="#把numpy转换成Tensor" class="headerlink" title="把numpy转换成Tensor"></a>把numpy转换成Tensor</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.zeros((3,3))</span><br><span class="line">print(a)</span><br><span class="line">print(&apos;----------------&apos;)</span><br><span class="line">ta = tf.convert_to_tensor(a)</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">     print(sess.run(ta))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数学公式API：&lt;a href=&quot;https://github.com/tensorflow/docs/blob/master/site/en/api_guides/python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.
      
    
    </summary>
    
      <category term="tensorflow" scheme="https://janvia.github.io/categories/tensorflow/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow-可视化</title>
    <link href="https://janvia.github.io/2019/01/12/tensorflow-%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://janvia.github.io/2019/01/12/tensorflow-可视化/</id>
    <published>2019-01-12T07:30:35.000Z</published>
    <updated>2019-01-12T08:08:05.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import os</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import matplotlib.pyplot as plt</span><br></pre></td></tr></table></figure><h2 id="设置生成的图像尺寸和去除警告"><a href="#设置生成的图像尺寸和去除警告" class="headerlink" title="设置生成的图像尺寸和去除警告"></a>设置生成的图像尺寸和去除警告</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os.environ[&apos;TF_CPP_MIN_LOG_LEVEL&apos;] = &apos;2&apos;</span><br><span class="line">plt.rcParams[&quot;figure.figsize&quot;] = (14, 8)  # 生成的图像尺寸</span><br></pre></td></tr></table></figure><h2 id="随机生成一个线性的数据"><a href="#随机生成一个线性的数据" class="headerlink" title="随机生成一个线性的数据"></a>随机生成一个线性的数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n_observations = 100</span><br><span class="line">xs = np.linspace(-3, 3, n_observations)    #生成-3到3的n为100等差数列</span><br><span class="line">ys = 0.8*xs + 0.1 + np.random.uniform(-0.5, 0.5, n_observations)</span><br><span class="line">plt.scatter(xs, ys) #画图</span><br><span class="line">plt.show() #画图</span><br></pre></td></tr></table></figure><h2 id="准备placeholder"><a href="#准备placeholder" class="headerlink" title="准备placeholder"></a>准备placeholder</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X = tf.placeholder(tf.float32, name=&apos;X&apos;)</span><br><span class="line">Y = tf.placeholder(tf.float32, name=&apos;Y&apos;)</span><br></pre></td></tr></table></figure><h2 id="初始化参数-权重"><a href="#初始化参数-权重" class="headerlink" title="初始化参数/权重"></a>初始化参数/权重</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">W = tf.Variable(tf.random_normal([1]), name=&apos;weight&apos;)</span><br><span class="line">tf.summary.histogram(&apos;weight&apos;, W) #画图</span><br><span class="line">b = tf.Variable(tf.random_normal([1]), name=&apos;bias&apos;)</span><br><span class="line">tf.summary.histogram(&apos;bias&apos;, b)#画图</span><br></pre></td></tr></table></figure><h2 id="计算预测结果"><a href="#计算预测结果" class="headerlink" title="计算预测结果"></a>计算预测结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y_pred = tf.add(tf.multiply(X, W), b)</span><br></pre></td></tr></table></figure><h2 id="计算损失值"><a href="#计算损失值" class="headerlink" title="计算损失值"></a>计算损失值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">loss = tf.square(Y - Y_pred, name=&apos;loss&apos;)  #tf.square:平方</span><br><span class="line"></span><br><span class="line">tf.summary.scalar(&apos;loss&apos;, tf.reshape(loss, []))#画图</span><br></pre></td></tr></table></figure><h2 id="初始化optimizer"><a href="#初始化optimizer" class="headerlink" title="初始化optimizer"></a>初始化optimizer</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">learning_rate = 0.01</span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)</span><br></pre></td></tr></table></figure><h2 id="指定迭代次数，并在session里执行graph"><a href="#指定迭代次数，并在session里执行graph" class="headerlink" title="指定迭代次数，并在session里执行graph"></a>指定迭代次数，并在session里执行graph</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n_samples = xs.shape[0]</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    # 记得初始化所有变量</span><br><span class="line">    sess.run(init)</span><br><span class="line">    merged = tf.summary.merge_all()#画图</span><br><span class="line">    log_writer = tf.summary.FileWriter(&quot;./logs/linear_regression&quot;, sess.graph)</span><br><span class="line"></span><br><span class="line">    # 训练模型</span><br><span class="line">    for i in range(50):</span><br><span class="line">        total_loss = 0</span><br><span class="line">        for x, y in zip(xs, ys):</span><br><span class="line">            # 通过feed_dic把数据灌进去</span><br><span class="line">            _, loss_value, merged_summary = sess.run([optimizer, loss, merged], feed_dict=&#123;X: x, Y: y&#125;)</span><br><span class="line">            total_loss += loss_value</span><br><span class="line"></span><br><span class="line">        if i % 5 == 0:</span><br><span class="line">            print(&apos;Epoch &#123;0&#125;: &#123;1&#125;&apos;.format(i, total_loss / n_samples))</span><br><span class="line">            log_writer.add_summary(merged_summary, i)#画图</span><br><span class="line"></span><br><span class="line">    # 关闭writer</span><br><span class="line">    log_writer.close()#画图</span><br><span class="line"></span><br><span class="line">    # 取出w和b的值</span><br><span class="line">    W, b = sess.run([W, b])</span><br><span class="line"></span><br><span class="line">print(W, b)</span><br><span class="line">print(&quot;W:&quot;+str(W[0]))</span><br><span class="line">print(&quot;b:&quot;+str(b[0]))</span><br></pre></td></tr></table></figure><h2 id="画出线性回归线"><a href="#画出线性回归线" class="headerlink" title="画出线性回归线"></a>画出线性回归线</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.plot(xs, ys, &apos;bo&apos;, label=&apos;Real data&apos;)</span><br><span class="line">plt.plot(xs, xs * W + b, &apos;r&apos;, label=&apos;Predicted data&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="Tensorboard查看图形数据"><a href="#Tensorboard查看图形数据" class="headerlink" title="Tensorboard查看图形数据"></a>Tensorboard查看图形数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tensorboard --logdir path/to/logs(你保存文件所在位置)</span><br></pre></td></tr></table></figure><p>如：（log_writer = tf.summary.FileWriter(“./logs/linear_regression”, sess.graph)保存的地址）：</p><p>tensorboard —logdir ./logs/linear_regression </p><p>输出：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TensorBoard x.x.x at http://(你的用户名):6006 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure></p><p>然后打开网页：<code>http://localhost:6006</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导入包&quot;&gt;&lt;a href=&quot;#导入包&quot; class=&quot;headerlink&quot; title=&quot;导入包&quot;&gt;&lt;/a&gt;导入包&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="tensorflow" scheme="https://janvia.github.io/categories/tensorflow/"/>
    
    
      <category term="可视化" scheme="https://janvia.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>20单元语法</title>
    <link href="https://janvia.github.io/2019/01/11/20%E5%8D%95%E5%85%83%E8%AF%AD%E6%B3%95/"/>
    <id>https://janvia.github.io/2019/01/11/20单元语法/</id>
    <published>2019-01-11T13:49:36.000Z</published>
    <updated>2019-01-12T01:32:12.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="N-なら（ば）＜凸显、条件＞"><a href="#N-なら（ば）＜凸显、条件＞" class="headerlink" title="N + なら（ば）＜凸显、条件＞"></a>N + なら（ば）＜凸显、条件＞</h2><h3 id="用法一"><a href="#用法一" class="headerlink" title="用法一"></a>用法一</h3><p>接在体言后面，凸显、强调所指事物，作提示助词，<strong>提出主题</strong>，<br>并用自信、有把握的语气进行叙述，如果以此为主题的话。<br>接续：N+<br>  ✿汉语：就~方面来说、~的话</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、お金なら心配は要りません。</span><br><span class="line">2、花なら桜です。</span><br></pre></td></tr></table></figure><h3 id="用法2"><a href="#用法2" class="headerlink" title="用法2"></a>用法2</h3><p>以<strong>假设的形式提出话题</strong>，前项为前提，后项为说话人<strong>判断、决定或建议</strong>；<br>接续： N ・ A ・ V ・ Na <strong>直接裸接</strong>　なら<br>  ✿汉语：要是~的话~<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、私ならそんなことを言いませんよ。</span><br><span class="line">2、海が静かならいいですが。</span><br><span class="line">3、彼が出席するなら、私は行きません。</span><br></pre></td></tr></table></figure></p><h2 id="～場合は＜假设＞"><a href="#～場合は＜假设＞" class="headerlink" title="～場合は＜假设＞"></a>～場合は＜假设＞</h2><p>表示<strong>假设</strong>的情况。当假设出现了前项情况时，后项一般为针对此情况所采取的方法或对策。<br>接续：N ・ A ・ V ・ Na 连体形+場合は<br>  ✿汉语：当~时、在~的情况下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、王さんの都合が悪い場合は、ほかの日にしましょう。</span><br><span class="line">2、電話が通じない場合はどうしたらいいですか。</span><br><span class="line">3、雨が降った場合は、運動会を中止します。</span><br></pre></td></tr></table></figure><h2 id="Vたらどうですか＜建议＞"><a href="#Vたらどうですか＜建议＞" class="headerlink" title="Vたらどうですか＜建议＞"></a>Vたらどうですか＜建议＞</h2><p>表示<strong>建议或劝诱</strong>的惯用表达，<br>  ✿汉语：~怎么样、~如何<br>★：礼貌表达方式为：~たらどうですか。<br>　　　　　　　　　　~たらいかがですか。<br>　　　　　　　　　　~たらいかがでしょうか<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、ABC病院に行ってみたらどうでしょう。(2011年真题)</span><br><span class="line">2、朝からずっと勉強していますね。少し休んだらどうですか。</span><br><span class="line">3、ネクタイでも買ってあげたらどう？(2010年真题)</span><br></pre></td></tr></table></figure></p><h2 id="くらい＜程度＞"><a href="#くらい＜程度＞" class="headerlink" title="くらい＜程度＞"></a>くらい＜程度＞</h2><p>接在分句后面表示程度。举出具体的事例来说明其程度。也可写做ぐらい。基本可与「ほど」互换。<br>接续：裸接分句后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、怖くて怖くて、大声で叫びたいくらいだった。(2009年真题)</span><br><span class="line">2、涙が出るくらい痛いです。</span><br></pre></td></tr></table></figure><h2 id="「ほど」VS「くらい」"><a href="#「ほど」VS「くらい」" class="headerlink" title="「ほど」VS「くらい」"></a>「ほど」VS「くらい」</h2><p>在表示某种程度时:</p><ul><li><p>如果说话人心目中对其程度<strong>没有进行高低取向</strong>时，くらい和ほど有时可以互换使用，表示相同的意思。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、日曜は足が痛くなる**ぐらい**（〇ほど）歩いた。</span><br></pre></td></tr></table></figure></li><li><p>如果有高低取向，则くらい表示低，而ほど表示高，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、彼**くらい**（Ｘほど）のレベルでは通訳はできない。</span><br><span class="line">2、党の御恩は山**ほど**（Ｘくらい）高く、海**ほど**（Ｘくらい）深い。</span><br><span class="line">3、死ぬ**ほど**（×くらい）疲れた。</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vてくださいませんか＜客气的请求＞"><a href="#Vてくださいませんか＜客气的请求＞" class="headerlink" title="Vてくださいませんか＜客气的请求＞"></a>Vてくださいませんか＜客气的请求＞</h2><p>表示请求别人做某事。比｢Vてくれませんか｣更加委婉、客气，是一种尊他，客气的表达。<br>  ✿ 汉语：能不能请您（为我做)～</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１、先生のお写真を見せてくださいませんか。</span><br><span class="line">２、もう少し説明してくださいませんか。</span><br></pre></td></tr></table></figure><h2 id="Vてしまった"><a href="#Vてしまった" class="headerlink" title="Vてしまった"></a>Vてしまった</h2><h3 id="Vてしまった＜感慨＞"><a href="#Vてしまった＜感慨＞" class="headerlink" title="Vてしまった＜感慨＞"></a>Vてしまった＜感慨＞</h3><p>表示说话人对意外发生的事（无法挽回的事情、消极的结果等）感到很遗憾、后悔的语气。常与副词「もう」搭配<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１、バスで財布を落としてしまった。</span><br><span class="line">２、急いで来たから、財布を忘れてしまった。(2005年真题)</span><br></pre></td></tr></table></figure></p><h3 id="Vてしまった＜完了＞"><a href="#Vてしまった＜完了＞" class="headerlink" title="Vてしまった＜完了＞"></a>Vてしまった＜完了＞</h3><p>表示动作过程的完了。<br>用于表示持续动作的动词时，与｢V第一连用－おわる｣意思相近。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１、この宿題をしてしまったら、遊びに行ける。</span><br><span class="line">２、この本はもう読んでしまったから、図書館に返します。</span><br></pre></td></tr></table></figure></p><h2 id="N-の＋うち＜范围＞"><a href="#N-の＋うち＜范围＞" class="headerlink" title="N+の＋うち＜范围＞"></a>N+の＋うち＜范围＞</h2><p>表示限定范围。<br>  ✿ 汉语：~当中、~之中<br>★在表示从某范围中挑选某事物时，可与｢Ｎのなか｣替换。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">１、三人のうち、林さんが一番若いです。</span><br><span class="line">２、クラスメートのうち、6人が男性です。</span><br><span class="line">３、相撲とサッカーと野球のうちで、一番人気があるのはやはり野球だそうだ。</span><br></pre></td></tr></table></figure></p><h2 id="N1-または-N2＜选择＞"><a href="#N1-または-N2＜选择＞" class="headerlink" title="N1 または N2＜选择＞"></a>N1 または N2＜选择＞</h2><p>表示两者择一，多用于书面语，表示要求、指示等场合。<br>  ✿ 汉语：~或是~<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、3番の部屋、または4番の部屋に行ってください。(2008年真题)</span><br><span class="line">2、漢字または仮名で書いてください。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;N-なら（ば）＜凸显、条件＞&quot;&gt;&lt;a href=&quot;#N-なら（ば）＜凸显、条件＞&quot; class=&quot;headerlink&quot; title=&quot;N + なら（ば）＜凸显、条件＞&quot;&gt;&lt;/a&gt;N + なら（ば）＜凸显、条件＞&lt;/h2&gt;&lt;h3 id=&quot;用法一&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>19单元语法</title>
    <link href="https://janvia.github.io/2019/01/11/19%E5%8D%95%E5%85%83%E8%AF%AD%E6%B3%95/"/>
    <id>https://janvia.github.io/2019/01/11/19单元语法/</id>
    <published>2019-01-11T12:23:24.000Z</published>
    <updated>2019-01-11T13:33:24.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nとは～という意味だ"><a href="#Nとは～という意味だ" class="headerlink" title="Nとは～という意味だ"></a>Nとは～という意味だ</h2><p>汉语：~是~的意思<br>★口语：Ｎというのは、～<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿帰省とは故郷に帰るという意味です。</span><br><span class="line">✿下水とは台所などで使った汚れた水のことである。</span><br><span class="line">✿進入禁止とは入ってはいけないという意味です。</span><br></pre></td></tr></table></figure></p><h2 id="うちに＜时段＞"><a href="#うちに＜时段＞" class="headerlink" title="~うちに＜时段＞"></a>~うちに＜时段＞</h2><p>前接表示状态的词，表示在该 <strong>状态持续期间</strong> 内，发生了某件事或做某件事（有尽快进行该动作的语感）。<br>接续：<br>  ✿  N  + の                     + うちに<br>  ✿  Na + な                     + うちに<br>  ✿  A  - い                     + うちに<br>  ✿  V  - る / V-ている  V-ない　 + うちに</p><p>汉语 ：趁着~、~时候、在~之内<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿どうぞ、温かいうちに食べてください。（2008年真题）</span><br><span class="line">✿父が元気なうちに、一度一緒に温泉に行きたいと思います。</span><br></pre></td></tr></table></figure></p><h2 id="V-（よ）うか＜犹豫＞"><a href="#V-（よ）うか＜犹豫＞" class="headerlink" title="V-（よ）うか＜犹豫＞"></a>V-（よ）うか＜犹豫＞</h2><p>用于简体的会话。 <strong>自言自语</strong> 或是 <strong>与对方商量</strong> 的语气。<br>表示说话人对是否要做某动作而 <strong>犹豫不决、踌躇不定</strong> 的心情。<br>接续：动词意志形+か<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿もう時間だから、行こうか。</span><br><span class="line">✿結果はどうなるかわからないけど、やってみようか。</span><br><span class="line">✿いくら考えてもわからないから、しばらく休んで、後にしようか。</span><br></pre></td></tr></table></figure></p><h2 id="ても・でも＜让步＞"><a href="#ても・でも＜让步＞" class="headerlink" title="ても・でも＜让步＞"></a>ても・でも＜让步＞</h2><p>表示让步的条件。就算前项从句成立，后项主句的结果也不会改变。（同19课2单元）<br>接续：<br>  ✿N・Na    + でも<br>  ✿A-く     + ても<br>  ✿V-て     + ても<br>汉语：即使~也~、就算~都~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿あの美術館はいつ行っても人がたくさんいる。(2007年真题)</span><br><span class="line">✿学校を卒業しても、日本語の勉強を続けていくつもりだ。 (2005年真题)</span><br><span class="line">✿今必要だから、高くても買う。</span><br><span class="line">✿先生でもわからないかもしれません</span><br></pre></td></tr></table></figure><h2 id="V-ると～た＜契机＞"><a href="#V-ると～た＜契机＞" class="headerlink" title="V-ると～た＜契机＞"></a>V-ると～た＜契机＞</h2><p>表示说话人在 <strong>前面的事情成立</strong> 的情况下，重新认识后项事物，是一些 <strong>新的发现、认识</strong> 等，具有意外性。或以此为契机 <strong>发生了后项的事物</strong> 。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿五月に入ると、急に暑くなった。</span><br><span class="line">✿外に出ると、雨が降っていた。</span><br><span class="line">✿友達が怪我で入院したと聞き、慌てて病院に行ってみると思っていたより元気で安心した。</span><br></pre></td></tr></table></figure><h2 id="「～たら～た」-VS-「～と～た」"><a href="#「～たら～た」-VS-「～と～た」" class="headerlink" title="「～たら～た」 VS　「～と～た」"></a>「～たら～た」 VS　「～と～た」</h2><h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3><p>表示“以~为契机发现了~”这一用法时，两者一般可以替换使用。</p><h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3><p>1、“と”常用于小说或故事等，<br>而“たら”则多用于说话人表述自己直接的经历。</p><p>2、当前后两个句子表示为 <strong>同一人物的意志可控制</strong> 的连续动词时，<br>只可以用“と”。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿男は部屋に入ると、友達に電話した。</span><br></pre></td></tr></table></figure></p><p>3、当表示 <strong>说话人身体的感觉</strong> 时，<br>只可以用“たら”，不能用“と”。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿昨夜、この薬を飲んだら、よく効いた。</span><br></pre></td></tr></table></figure></p><h2 id="でも＜极端的情况＞"><a href="#でも＜极端的情况＞" class="headerlink" title="でも＜极端的情况＞"></a>でも＜极端的情况＞</h2><p>助词でも除了表示“示例”以外，更多的是接在名词（或者部分副词、助词）后，用于举出极端的事例。</p><p>中文：“就连~都~”“即使~也~”“尽管~也~”<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿この店は日本料理が本格的ですが。日本人でもこの味に満足している。</span><br><span class="line">　　</span><br><span class="line">✿先生でもわからないかもしれない。</span><br><span class="line"></span><br><span class="line">✿この仕事は病気でも休めません</span><br><span class="line"></span><br><span class="line">✿今度の日曜日、雨でもサッカーの試合を行います。</span><br></pre></td></tr></table></figure></p><h2 id="～し～-し-＜并列＞"><a href="#～し～-し-＜并列＞" class="headerlink" title="～し～(し)＜并列＞"></a>～し～(し)＜并列＞</h2><p>连接两个或两个以上的分句，列举。多用罗列于原因理由<br>接续：分句+し<br>翻译：“既~又~”“又~又~”<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿お金もないし、時間もないから、遊びに行けない。(2008年真题)</span><br><span class="line">✿アパートは綺麗だし、広いし、駅からも近い。(2005年真题)</span><br></pre></td></tr></table></figure></p><h2 id="～Vばいい・よい-lt-建议＞"><a href="#～Vばいい・よい-lt-建议＞" class="headerlink" title="～Ｖばいい・よい&lt;建议＞"></a>～Ｖばいい・よい&lt;建议＞</h2><p>常用在表示提议时。<br>汉语：只要~就可、~就好</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿ A:どうすればいいですか。</span><br><span class="line">　  B:ちゃんと謝ればいいですよ。</span><br><span class="line">✿ お金がなければ、お父さんに借りればいいでしょう。</span><br></pre></td></tr></table></figure><h2 id="のに＜转折＞"><a href="#のに＜转折＞" class="headerlink" title="のに＜转折＞"></a>のに＜转折＞</h2><p>  ✿ V-る・V-た　　　+のに<br>  ✿ A-い・A-かった　+のに<br>  ✿ N・Na　　　　　な+のに</p><h3 id="位于句中"><a href="#位于句中" class="headerlink" title="位于句中"></a>位于句中</h3><p>起逆接作用，是接续助词。<br>连接起来的句子往往都有意外、不满、埋怨等语感<br>汉语：可是~、却~<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿雨が降っているのに、傘を持たないで出かけた。</span><br><span class="line">✿知っているのに知らないと言った。</span><br></pre></td></tr></table></figure></p><h3 id="置于句末"><a href="#置于句末" class="headerlink" title="置于句末"></a>置于句末</h3><p>是终助词，表示事与愿违时的遗憾、惋惜、后悔等心情，一般多用口语。可以跟在｢ばいい｣后面。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿この部屋がもう少し広げればいいのに。</span><br><span class="line">✿注意していたのに。</span><br></pre></td></tr></table></figure></p><h2 id="たら＜条件＞"><a href="#たら＜条件＞" class="headerlink" title="たら＜条件＞"></a>たら＜条件＞</h2><p>表示 <strong>假设</strong>，属于动词的另一种条件形。接续上和动词的过去式｢た｣是一样的。表 <strong>一次性的，特定</strong> 的依存关系。表示主句的实现，<strong>建立在从句动作或变化完成的基础上</strong>。<br>汉语：　　~之后就~   ~以后~<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿仕事が終わったら、お茶でも飲みにいきましょう。</span><br><span class="line">✿そんなにたくさん食べたら、おなかを壊しますよ。</span><br><span class="line">✿大学を卒業したらどんな仕事をしますか。</span><br></pre></td></tr></table></figure></p><h2 id="V-て-V-ないで-lt-伴随状态-gt"><a href="#V-て-V-ないで-lt-伴随状态-gt" class="headerlink" title="V-て/V-ないで&lt;伴随状态&gt;"></a>V-て/V-ないで&lt;伴随状态&gt;</h2><p>表示（没有）在前项的伴随状态下进行后项主体动作。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿マスクをして出かけました。</span><br><span class="line">✿ネクタイを締めないで会社に行きます。</span><br></pre></td></tr></table></figure><h2 id="V-て（は）いられない-lt-状态难以持续-gt"><a href="#V-て（は）いられない-lt-状态难以持续-gt" class="headerlink" title="V-て（は）いられない&lt;状态难以持续&gt;"></a>V-て（は）いられない&lt;状态难以持续&gt;</h2><p>表示因为在紧迫的情况下，不能继续那种状态而要急于想付诸另一种行动之意。<br>汉语：不能~，哪能~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿もう時間がないから、遅れてくる人を待っていられない。すぐ始めよう。</span><br><span class="line">✿こんなに忙しいときに、寝ていられないよ。</span><br></pre></td></tr></table></figure><h2 id="Nによって-lt-原因-gt"><a href="#Nによって-lt-原因-gt" class="headerlink" title="Nによって&lt;原因&gt;"></a>Nによって&lt;原因&gt;</h2><p>表示“<strong>那就是原因</strong>”之意，后续表示结果的词句。讲述已经发生的事情，谓语一般为过去式，多用于书面语。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿私の不注意な発言によって、彼を傷つけた。</span><br><span class="line">✿交通事故によって、電車は三時間も遅れた。</span><br></pre></td></tr></table></figure><h2 id="N-として（は・も・の）-lt-资格性质-gt"><a href="#N-として（は・も・の）-lt-资格性质-gt" class="headerlink" title="N として（は・も・の）&lt;资格性质&gt;"></a>N として（は・も・の）&lt;资格性质&gt;</h2><p>表示动作主体进行某动作时的身份、资格、立场、性质等。<br>汉语：作为~、以~身份、以~立场、以~资格</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿通訳として、一緒に行く。(2011年真题)</span><br><span class="line">✿私としては賛成ですが、ほかの人の意見も聞いてみないと決められない。</span><br><span class="line">✿彼女は母としても妻としても完璧な素晴らしい女性です。</span><br><span class="line">✿私には私としての考えがあります。</span><br></pre></td></tr></table></figure><h2 id="と总结"><a href="#と总结" class="headerlink" title="と总结"></a>と总结</h2><ul><li><p>必然结果，自然现象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿春になると、花が咲く</span><br><span class="line">✿雨だと明日の試合は中止になります。</span><br><span class="line">✿右に曲がると、大きな建物が見える。</span><br></pre></td></tr></table></figure></li><li><p>契机，发现（ｖたら～た也有该用法）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿デパートに行くと、休みだった。</span><br><span class="line">✿うちへ帰ると、友達が待っていた。</span><br></pre></td></tr></table></figure></li><li><p>习惯动作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿起きると、すぐ顔を洗う</span><br><span class="line">✿彼は家に帰ると、パソコンに向かっています。</span><br></pre></td></tr></table></figure></li></ul><h2 id="ば总结"><a href="#ば总结" class="headerlink" title="ば总结"></a>ば总结</h2><ul><li><p>必然结果，自然现象（と～也有该用法）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿春になれば、花が咲く。</span><br></pre></td></tr></table></figure></li><li><p>假定条件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿このごろ日本へ行けば、桜が見える。</span><br></pre></td></tr></table></figure></li></ul><p>★注意：<br>1、当假定式为动作或者变化时，后项不能使用ください、たい、ましょう<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">雨が降れば、窓を閉めてください。×</span><br></pre></td></tr></table></figure></p><p>2、当假定式为状态或存在时，后项可以使用ください、たい<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">暑ければ、エアコンをつけてください。〇</span><br></pre></td></tr></table></figure></p><p>3、主句一般不能使用过去式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">窓を開けば、富士山が見えた。×</span><br></pre></td></tr></table></figure></p><h2 id="たら总结"><a href="#たら总结" class="headerlink" title="たら总结"></a>たら总结</h2><ul><li><p>假定（ば也有该用法）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿安かったら、買う</span><br><span class="line">✿困ったら、電話してね。</span><br></pre></td></tr></table></figure></li><li><p>契机，发现（と也有该用法）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿窓を開けたら、海が見えた。</span><br></pre></td></tr></table></figure></li><li><p>在～之后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿本を読んだら貸してください。</span><br><span class="line">✿大阪に着いたら電話してください。</span><br></pre></td></tr></table></figure></li></ul><p>★注意：<br>1、たら含有明显的完成之意，特别是前后都是动词时，一定是前项先发生，后项再发生。<br>2、たら后项可使用命令、劝诱、依赖等表达。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Nとは～という意味だ&quot;&gt;&lt;a href=&quot;#Nとは～という意味だ&quot; class=&quot;headerlink&quot; title=&quot;Nとは～という意味だ&quot;&gt;&lt;/a&gt;Nとは～という意味だ&lt;/h2&gt;&lt;p&gt;汉语：~是~的意思&lt;br&gt;★口语：Ｎというのは、～&lt;br&gt;&lt;figure c
      
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="语法" scheme="https://janvia.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>wine安装qq</title>
    <link href="https://janvia.github.io/2019/01/11/wine%E5%AE%89%E8%A3%85qq/"/>
    <id>https://janvia.github.io/2019/01/11/wine安装qq/</id>
    <published>2019-01-11T09:01:02.000Z</published>
    <updated>2019-01-11T13:45:25.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装wine"><a href="#安装wine" class="headerlink" title="安装wine"></a>安装wine</h2><p>下载地址： <a href="https://github.com/wszqkzqk/deepin-wine-ubuntu" target="_blank" rel="noopener">https://github.com/wszqkzqk/deepin-wine-ubuntu</a><br>解压后安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh ./install.sh</span><br></pre></td></tr></table></figure></p><h2 id="安装QQ、微信"><a href="#安装QQ、微信" class="headerlink" title="安装QQ、微信"></a>安装QQ、微信</h2><p>wine应用下载地址： <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/" target="_blank" rel="noopener">http://mirrors.aliyun.com/deepin/pool/non-free/d/</a><br>常用下载应用：<br>QQ：      <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/" target="_blank" rel="noopener">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/</a><br>微信：    <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/" target="_blank" rel="noopener">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/</a><br>Foxmail:  <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/" target="_blank" rel="noopener">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/</a></p><h2 id="异常说明"><a href="#异常说明" class="headerlink" title="异常说明"></a>异常说明</h2><p>微信无法发送图片：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install libjpeg62:i386</span><br></pre></td></tr></table></figure></p><p>卸载：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt remove 软件包名</span><br></pre></td></tr></table></figure></p><p>比如deepin.com.qq.office_2.0.0deepin4_i386.deb的卸载命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt remove deepin.com.qq.office</span><br></pre></td></tr></table></figure></p><h2 id="托盘图标"><a href="#托盘图标" class="headerlink" title="托盘图标"></a>托盘图标</h2><p>安装icons-plus扩展<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gnome-shell-extension-top-icons-plus gnome-tweaks</span><br></pre></td></tr></table></figure></p><p>然后在gnome-tweaks里设置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装wine&quot;&gt;&lt;a href=&quot;#安装wine&quot; class=&quot;headerlink&quot; title=&quot;安装wine&quot;&gt;&lt;/a&gt;安装wine&lt;/h2&gt;&lt;p&gt;下载地址： &lt;a href=&quot;https://github.com/wszqkzqk/deepin-wine
      
    
    </summary>
    
      <category term="linux" scheme="https://janvia.github.io/categories/linux/"/>
    
    
      <category term="qq" scheme="https://janvia.github.io/tags/qq/"/>
    
  </entry>
  
  <entry>
    <title>opencv-图片处理及绘图</title>
    <link href="https://janvia.github.io/2019/01/11/opencv-%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%8F%8A%E7%BB%98%E5%9B%BE/"/>
    <id>https://janvia.github.io/2019/01/11/opencv-图片处理及绘图/</id>
    <published>2019-01-11T05:56:33.000Z</published>
    <updated>2019-01-11T08:21:06.630Z</updated>
    
    <content type="html"><![CDATA[<p>原始图片：<br><img src="/2019/01/11/opencv-图片处理及绘图/image2.jpg" title="原始图片"> </p><h2 id="彩色图片灰度化"><a href="#彩色图片灰度化" class="headerlink" title="彩色图片灰度化"></a>彩色图片灰度化</h2><p>方式1：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2  # 导入cv库</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,0)</span><br><span class="line">cv2.imwrite(&apos;gray_image.jpg&apos;,img)</span><br></pre></td></tr></table></figure></p><p>方式2：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)</span><br><span class="line">dst = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)# 颜色空间转换 1 data 2 BGR gray</span><br><span class="line">cv2.imshow(&apos;dst&apos;,dst)</span><br></pre></td></tr></table></figure></p><p>方式3<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方法4 gray = r*0.299+g*0.587+b*0.114</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image0.jpg&apos;,1)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">dst = np.zeros((height,width,3),np.uint8)</span><br><span class="line">for i in range(0,height):</span><br><span class="line">    for j in range(0,width):</span><br><span class="line">        (b,g,r) = img[i,j]</span><br><span class="line">        b = int(b)</span><br><span class="line">        g = int(g)</span><br><span class="line">        r = int(r)</span><br><span class="line">        gray = r*0.299+g*0.587+b*0.114</span><br><span class="line">        dst[i,j] = np.uint8(gray)</span><br><span class="line">cv2.imshow(&apos;dst&apos;,dst)</span><br></pre></td></tr></table></figure></p><img src="/2019/01/11/opencv-图片处理及绘图/gray_image.jpg" title="灰度图片"> <h2 id="马赛克"><a href="#马赛克" class="headerlink" title="马赛克"></a>马赛克</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2 # 导入cv库</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1) # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">#cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">imgInfo = img.shape  # 获取图片的维度</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">for m in range(200,400):</span><br><span class="line">    for n in range(400,500):</span><br><span class="line">        # pixel -&gt;10*10</span><br><span class="line">        if m%10 == 0 and n%10==0:</span><br><span class="line">            for i in range(0,10):</span><br><span class="line">                for j in range(0,10):</span><br><span class="line">                    (b,g,r) = img[m,n]</span><br><span class="line">                    img[i+m,j+n] = (b,g,r)</span><br><span class="line">cv2.imwrite(&apos;msk.jpg&apos;,img)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片处理及绘图/msk.jpg" title="马赛克图片"> <h2 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h2><p>方式1：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">import random</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">#cv2.imshow(&apos;src&apos;,img)</span><br><span class="line"></span><br><span class="line">#canny 1 gray 2 高斯 3 canny</span><br><span class="line">gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">imgG = cv2.GaussianBlur(gray,(3,3),0)</span><br><span class="line">dst = cv2.Canny(img,50,50) #图片卷积——》th</span><br><span class="line">#cv2.imshow(&apos;dst&apos;,dst)</span><br><span class="line">cv2.imwrite(&apos;canny.jpg&apos;,dst)</span><br></pre></td></tr></table></figure></p><img src="/2019/01/11/opencv-图片处理及绘图/canny.jpg" title="边缘检查图片一"> <p>方式2：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">import random</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;, 1)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">#cv2.imshow(&apos;src&apos;, img)</span><br><span class="line"></span><br><span class="line"># sobel 1 算子模版 2 图片卷积 3 阈值判决</span><br><span class="line"># [1 2 1          [ 1 0 -1</span><br><span class="line">#  0 0 0            2 0 -2</span><br><span class="line"># -1 -2 -1 ]       1 0 -1 ]</span><br><span class="line"></span><br><span class="line"># [1 2 3 4] [a b c d] a*1+b*2+c*3+d*4 = dst</span><br><span class="line"># sqrt(a*a+b*b) = f&gt;th</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">dst = np.zeros((height, width, 1), np.uint8)</span><br><span class="line">for i in range(0, height - 2):</span><br><span class="line">    for j in range(0, width - 2):</span><br><span class="line">        gy = gray[i, j] * 1 + gray[i, j + 1] * 2 + gray[i, j + 2] * 1 - gray[i + 2, j] * 1 - gray[i + 2, j + 1] * 2 - \</span><br><span class="line">             gray[i + 2, j + 2] * 1</span><br><span class="line">        gx = gray[i, j] + gray[i + 1, j] * 2 + gray[i + 2, j] - gray[i, j + 2] - gray[i + 1, j + 2] * 2 - gray[</span><br><span class="line">            i + 2, j + 2]</span><br><span class="line">        grad = math.sqrt(gx * gx + gy * gy)</span><br><span class="line">        if grad &gt; 50:</span><br><span class="line">            dst[i, j] = 255</span><br><span class="line">        else:</span><br><span class="line">            dst[i, j] = 0</span><br><span class="line">cv2.imwrite(&apos;sobel.jpg&apos;,dst)</span><br></pre></td></tr></table></figure></p><img src="/2019/01/11/opencv-图片处理及绘图/sobel.jpg" title="边缘检测图片二"> <h2 id="颜色风格变化"><a href="#颜色风格变化" class="headerlink" title="颜色风格变化"></a>颜色风格变化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)</span><br><span class="line">#cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">#rgb -》RGB new “蓝色”</span><br><span class="line"># b=b*1.5</span><br><span class="line"># g = g*1.3</span><br><span class="line">dst = np.zeros((height,width,3),np.uint8)</span><br><span class="line">for i in range(0,height):</span><br><span class="line">    for j in range(0,width):</span><br><span class="line">        (b,g,r) = img[i,j]</span><br><span class="line">        b = b*1.5</span><br><span class="line">        g = g*1.3</span><br><span class="line">        if b&gt;255:</span><br><span class="line">            b = 255</span><br><span class="line">        if g&gt;255:</span><br><span class="line">            g = 255</span><br><span class="line">        dst[i,j]=(b,g,r)</span><br><span class="line">#cv2.imshow(&apos;dst&apos;,dst)</span><br><span class="line">cv2.imwrite(&apos;dst2.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片处理及绘图/dst2.jpg" title="颜色风格变化效果"> <h2 id="油画特效"><a href="#油画特效" class="headerlink" title="油画特效"></a>油画特效</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)</span><br><span class="line">#cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">dst = np.zeros((height,width,3),np.uint8)</span><br><span class="line">for i in range(4,height-4):</span><br><span class="line">    for j in range(4,width-4):</span><br><span class="line">        array1 = np.zeros(8,np.uint8)</span><br><span class="line">        for m in range(-4,4):</span><br><span class="line">            for n in range(-4,4):</span><br><span class="line">                p1 = int(gray[i+m,j+n]/32)</span><br><span class="line">                array1[p1] = array1[p1]+1</span><br><span class="line">        currentMax = array1[0]</span><br><span class="line">        l = 0</span><br><span class="line">        for k in range(0,8):</span><br><span class="line">            if currentMax&lt;array1[k]:</span><br><span class="line">                currentMax = array1[k]</span><br><span class="line">                l = k</span><br><span class="line">        # 简化 均值</span><br><span class="line">        for m in range(-4,4):</span><br><span class="line">            for n in range(-4,4):</span><br><span class="line">                if gray[i+m,j+n]&gt;=(l*32) and gray[i+m,j+n]&lt;=((l+1)*32):</span><br><span class="line">                    (b,g,r) = img[i+m,j+n]</span><br><span class="line">        dst[i,j] = (b,g,r)</span><br><span class="line">cv2.imwrite(&apos;dst3.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片处理及绘图/dst3.jpg" title="油画效果"> <h2 id="线段绘制"><a href="#线段绘制" class="headerlink" title="线段绘制"></a>线段绘制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">newImageInfo = (500,500,3)</span><br><span class="line">dst = np.zeros(newImageInfo,np.uint8)</span><br><span class="line"># line</span><br><span class="line"># 绘制线段 1 dst 2 begin 3 end 4 color</span><br><span class="line">cv2.line(dst,(100,100),(400,400),(0,0,255))</span><br><span class="line"># 5 line w</span><br><span class="line">cv2.line(dst,(100,200),(400,200),(0,255,255),20)</span><br><span class="line"># 6 line type</span><br><span class="line">cv2.line(dst,(100,300),(400,300),(0,255,0),20,cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">cv2.imwrite(&apos;line.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片处理及绘图/line.jpg" title="绘制线段"> <h2 id="绘制矩形、圆形"><a href="#绘制矩形、圆形" class="headerlink" title="绘制矩形、圆形"></a>绘制矩形、圆形</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">newImageInfo = (500,500,3)</span><br><span class="line">dst = np.zeros(newImageInfo,np.uint8)</span><br><span class="line">#  1 2 左上角 3 右下角 4 5 fill -1 &gt;0 line w</span><br><span class="line">cv2.rectangle(dst,(50,100),(200,300),(255,0,0),5)</span><br><span class="line"># 2 center 3 r</span><br><span class="line">cv2.circle(dst,(300,100),(50),(0,255,0),2)</span><br><span class="line"># 2 center 3 轴(a,b) 4 angle 5 begin 6 end 7</span><br><span class="line">cv2.ellipse(dst,(256,350),(150,100),30,0,360,(255,255,0),-1)</span><br><span class="line"></span><br><span class="line">points = np.array([[350,50],[140,140],[200,170],[250,250],[350,50]],np.int32)</span><br><span class="line">print(points.shape)</span><br><span class="line">points = points.reshape((-1,1,2))</span><br><span class="line">print(points.shape)</span><br><span class="line">cv2.polylines(dst,[points],True,(0,0,255))</span><br><span class="line">cv2.imwrite(&apos;dst4.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片处理及绘图/dst4.jpg" title="绘制形状"> <h2 id="添加文字"><a href="#添加文字" class="headerlink" title="添加文字"></a>添加文字</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)</span><br><span class="line">font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">cv2.rectangle(img,(400,300),(950,900),(0,255,0),3)</span><br><span class="line"># 1 dst 2 文字内容 3 坐标 4 5 字体大小 6 color 7 粗细 8 line type</span><br><span class="line">cv2.putText(img,&apos;this is flower&apos;,(500,500),font,2,(200,100,255),3,cv2.LINE_AA)</span><br><span class="line">cv2.imwrite(&apos;word.jpg&apos;,img)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片处理及绘图/word.jpg" title="文字添加"> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原始图片：&lt;br&gt;&lt;img src=&quot;/2019/01/11/opencv-图片处理及绘图/image2.jpg&quot; title=&quot;原始图片&quot;&gt; &lt;/p&gt;
&lt;h2 id=&quot;彩色图片灰度化&quot;&gt;&lt;a href=&quot;#彩色图片灰度化&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="计算机视觉" scheme="https://janvia.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="图像美化" scheme="https://janvia.github.io/tags/%E5%9B%BE%E5%83%8F%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>opencv-图片几何变换</title>
    <link href="https://janvia.github.io/2019/01/11/opencv-%E5%9B%BE%E7%89%87%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/"/>
    <id>https://janvia.github.io/2019/01/11/opencv-图片几何变换/</id>
    <published>2019-01-11T01:52:03.000Z</published>
    <updated>2019-01-11T02:42:24.091Z</updated>
    
    <content type="html"><![CDATA[<p>原始图片：<br><img src="/2019/01/11/opencv-图片几何变换/image1.jpg" title="原始图片"> </p><h2 id="图片缩放一"><a href="#图片缩放一" class="headerlink" title="图片缩放一"></a>图片缩放一</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2  # 导入cv库</span><br><span class="line">img = cv2.imread(&apos;image1.jpg&apos;,1)  # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">imgInfo = img.shape # 获取图片的维度</span><br><span class="line">print(imgInfo)</span><br><span class="line">height = imgInfo[0] </span><br><span class="line">width = imgInfo[1]</span><br><span class="line">mode = imgInfo[2]</span><br><span class="line"># 1 放大 缩小 2 等比例 非 2:3 </span><br><span class="line">dstHeight = int(height*0.5)</span><br><span class="line">dstWidth = int(width*0.5)</span><br><span class="line">#最近临域插值 双线性插值 像素关系重采样 立方插值</span><br><span class="line">dst = cv2.resize(img,(dstWidth,dstHeight))</span><br><span class="line">#cv2.imshow(&apos;image&apos;,dst)</span><br><span class="line">cv2.imwrite(&apos;resize_image.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片几何变换/resize_image.jpg" title="resize的图片"> <h2 id="图片缩放二"><a href="#图片缩放二" class="headerlink" title="图片缩放二"></a>图片缩放二</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2 # 导入cv库</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image1.jpg&apos;,1) # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">#cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">imgInfo = img.shape  # 获取图片的维度</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">matScale = np.float32([[0.5,0,0],[0,0.5,0]]) # 定义缩放矩阵</span><br><span class="line">dst = cv2.warpAffine(img,matScale,(int(width/2),int(height/2))) # 原始数据，缩放矩阵，目标的宽高信息</span><br><span class="line">cv2.imwrite(&apos;warp_image.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片几何变换/warp_image.jpg" title="matScale的图片"> <h2 id="图片剪切"><a href="#图片剪切" class="headerlink" title="图片剪切"></a>图片剪切</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2  # 导入cv库</span><br><span class="line">img = cv2.imread(&apos;image1.jpg&apos;,1)  # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">#imgInfo = img.shape</span><br><span class="line">print(img.shape)</span><br><span class="line">dst = img[100:600,250:800] # 获取宽度100-600， 高度250-800的图像</span><br><span class="line"></span><br><span class="line">cv2.imwrite(&apos;cut_image.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片几何变换/cut_image.jpg" title="剪切的图片"> <h2 id="图片镜像"><a href="#图片镜像" class="headerlink" title="图片镜像"></a>图片镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2 # 导入cv库</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image1.jpg&apos;,1) # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">imgInfo = img.shape  # 获取图片的维度</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">deep = imgInfo[2]</span><br><span class="line">newImgInfo = (height*2,width,deep) # 新图片的维度</span><br><span class="line">dst = np.zeros(newImgInfo,np.uint8)#uint8 # 目标图片的数据维度</span><br><span class="line"># 刷新图片的数据</span><br><span class="line">for i in range(0,height):</span><br><span class="line">    for j in range(0,width):</span><br><span class="line">        dst[i,j] = img[i,j]</span><br><span class="line">        #x y = 2*h - y -1</span><br><span class="line">        dst[height*2-i-1,j] = img[i,j]</span><br><span class="line">for i in range(0,width): # 添加分割线</span><br><span class="line">    dst[height,i] = (0,0,255)#BGR</span><br><span class="line">cv2.imshow(&apos;dst&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片几何变换/dst_image.jpg" title="镜像图片"> <h2 id="图片旋转"><a href="#图片旋转" class="headerlink" title="图片旋转"></a>图片旋转</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2 # 导入cv库</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image1.jpg&apos;,1) # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">imgInfo = img.shape  # 获取图片的维度</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line"># 2*3 定义旋转矩阵--旋转的中心点，旋转的角度， 缩放系数</span><br><span class="line">matRotate = cv2.getRotationMatrix2D((height*0.5,width*0.5),45,1)# mat rotate 1 center 2 angle 3 scale</span><br><span class="line">#100*100 25</span><br><span class="line">dst = cv2.warpAffine(img,matRotate,(height,width)) # 仿射方法</span><br><span class="line">#cv2.imshow(&apos;dst&apos;,dst)</span><br><span class="line">cv2.imwrite(&apos;rotate_image.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片几何变换/rotate_image.jpg" title="旋转图片"> <h2 id="图片仿射变换"><a href="#图片仿射变换" class="headerlink" title="图片仿射变换"></a>图片仿射变换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2 # 导入cv库</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image1.jpg&apos;,1) # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">imgInfo = img.shape  # 获取图片的维度</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">#src 3-&gt;dst 3 (左上角 左下角 右上角)</span><br><span class="line">matSrc = np.float32([[0,0],[0,height-1],[width-1,0]]) # 获取原图片三个点坐标</span><br><span class="line">matDst = np.float32([[50,50],[300,height-200],[width-300,100]]) # 三个点的新坐标</span><br><span class="line">#把两个矩阵组合</span><br><span class="line">matAffine = cv2.getAffineTransform(matSrc,matDst) # 获取矩阵的组合，</span><br><span class="line">dst = cv2.warpAffine(img,matAffine,(width,height)) # 仿射变换方法</span><br><span class="line">#cv2.imshow(&apos;dst&apos;,dst)</span><br><span class="line">cv2.imwrite(&apos;aft_image.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/11/opencv-图片几何变换/aft_image.jpg" title="仿射变换图片"> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原始图片：&lt;br&gt;&lt;img src=&quot;/2019/01/11/opencv-图片几何变换/image1.jpg&quot; title=&quot;原始图片&quot;&gt; &lt;/p&gt;
&lt;h2 id=&quot;图片缩放一&quot;&gt;&lt;a href=&quot;#图片缩放一&quot; class=&quot;headerlink&quot; title=&quot;图片缩
      
    
    </summary>
    
      <category term="计算机视觉" scheme="https://janvia.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="图像美化" scheme="https://janvia.github.io/tags/%E5%9B%BE%E5%83%8F%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="https://janvia.github.io/2019/01/09/markdown/"/>
    <id>https://janvia.github.io/2019/01/09/markdown/</id>
    <published>2019-01-09T09:06:13.000Z</published>
    <updated>2019-01-14T08:50:59.693Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="粗体、斜体"><a href="#粗体、斜体" class="headerlink" title="粗体、斜体"></a>粗体、斜体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*这是斜体*</span><br><span class="line">**这是粗体**</span><br><span class="line">***这是粗体+斜体***</span><br></pre></td></tr></table></figure><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~就像这样~~</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>通过在行首加上大于号&gt;来添加引用格式。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back to the first level.</span><br></pre></td></tr></table></figure></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表使用星号、加号或是减号作为列表标记：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></table></figure></p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* * *</span><br><span class="line">***</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[an example](http://example.com/)</span><br><span class="line">[an example](http://example.com/ &quot;Optional Title&quot;)</span><br></pre></td></tr></table></figure><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><h4 id="普通方式"><a href="#普通方式" class="headerlink" title="普通方式"></a>普通方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg)</span><br><span class="line">![Alt text](/path/to/img.jpg &quot;Optional Title&quot;)</span><br></pre></td></tr></table></figure><h4 id="通过管理文件夹"><a href="#通过管理文件夹" class="headerlink" title="通过管理文件夹"></a>通过管理文件夹</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><h4 id="通过图床引用"><a href="#通过图床引用" class="headerlink" title="通过图床引用"></a>通过图床引用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;figure class=&quot;half&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;http://address.com/images/image.png&quot; title=&quot;title1&quot;/&gt;</span><br><span class="line">    &lt;img src=&quot;http://path/image.png&quot; title=&quot;title2&quot;/&gt;</span><br><span class="line">&lt;/figure&gt;</span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| Item     | Value | Qty   |</span><br><span class="line">| :------- | ----: | :---: |</span><br><span class="line">| Computer | $1600 |  5    |</span><br><span class="line">| Phone    | $12   |  12   |</span><br><span class="line">| Pipe     | $1    |  234  |</span><br></pre></td></tr></table></figure><h3 id="TeX公式"><a href="#TeX公式" class="headerlink" title="TeX公式"></a>TeX公式</h3><p>更换渲染器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-renderer-marked --save</span><br><span class="line">$ npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>插入公式形式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\,.</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>公式说明文档：</p><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference</a></p><h3 id="typora编辑器"><a href="#typora编辑器" class="headerlink" title="typora编辑器"></a>typora编辑器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#for Linux</span><br><span class="line"># or run:</span><br><span class="line"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"># add Typora&apos;s repository</span><br><span class="line">sudo add-apt-repository &apos;deb https://typora.io/linux ./&apos;</span><br><span class="line">sudo apt-get update</span><br><span class="line"># install typora</span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;粗体、斜体&quot;&gt;&lt;a href=&quot;#粗体、斜体&quot; class=&quot;headerlink&quot; title=&quot;粗体、斜体&quot;&gt;&lt;/a&gt;粗体、斜体&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="工具" scheme="https://janvia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="markdown" scheme="https://janvia.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>opencv图像美化</title>
    <link href="https://janvia.github.io/2019/01/09/opencv%E5%9B%BE%E5%83%8F%E7%BE%8E%E5%8C%96/"/>
    <id>https://janvia.github.io/2019/01/09/opencv图像美化/</id>
    <published>2019-01-09T01:54:29.000Z</published>
    <updated>2019-01-14T07:54:14.497Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="直方图均衡化-灰度"><a href="#直方图均衡化-灰度" class="headerlink" title="直方图均衡化-灰度"></a>直方图均衡化-灰度</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)</span><br><span class="line">gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) # 图片灰度化</span><br><span class="line">cv2.imshow(&apos;gray&apos;,gray)</span><br><span class="line">cv2.imwrite(&apos;gray2.jpg&apos;,gray)</span><br><span class="line">hist = cv2.equalizeHist(gray) # api 完成直方图均衡化</span><br><span class="line">cv2.imshow(&apos;hist&apos;,hist)</span><br><span class="line">cv2.imwrite(&apos;hist2.jpg&apos;,hist)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure><img src="/2019/01/09/opencv图像美化/gray1.jpg" title="gray"> <img src="/2019/01/09/opencv图像美化/hist1.jpg" title="hist"><h2 id="直方图均衡化-彩色"><a href="#直方图均衡化-彩色" class="headerlink" title="直方图均衡化-彩色"></a>直方图均衡化-彩色</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)</span><br><span class="line">cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">(b,g,r) = cv2.split(img) # 通道分解</span><br><span class="line"># 图片单通道处理</span><br><span class="line">bH = cv2.equalizeHist(b)</span><br><span class="line">gH = cv2.equalizeHist(g)</span><br><span class="line">rH = cv2.equalizeHist(r)</span><br><span class="line">result = cv2.merge((bH,gH,rH))# 通道合成</span><br><span class="line">cv2.imshow(&apos;dst&apos;,result)</span><br><span class="line">cv2.imwrite(&apos;dst2.jpg&apos;,result)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure><img src="/2019/01/09/opencv图像美化/image2.jpg" title="image.jpg"> <img src="/2019/01/09/opencv图像美化/dst2.jpg" title="result.jpg"><h2 id="直方图均衡化-YUV"><a href="#直方图均衡化-YUV" class="headerlink" title="直方图均衡化-YUV"></a>直方图均衡化-YUV</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)</span><br><span class="line">imgYUV = cv2.cvtColor(img,cv2.COLOR_BGR2YCrCb) #</span><br><span class="line">cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">channelYUV = cv2.split(imgYUV) # 图片分解</span><br><span class="line">channelYUV[0] = cv2.equalizeHist(channelYUV[0]) # 直方图均衡化</span><br><span class="line">channels = cv2.merge(channelYUV) # 合成</span><br><span class="line">result = cv2.cvtColor(channels,cv2.COLOR_YCrCb2BGR)</span><br><span class="line">cv2.imshow(&apos;result2&apos;,result)</span><br><span class="line">cv2.imwrite(&apos;result2.jpg&apos;,result)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure><img src="/2019/01/09/opencv图像美化/image2.jpg" title="image.jpg"> <img src="/2019/01/09/opencv图像美化/result2.jpg" title="result.jpg"><h2 id="图片修补"><a href="#图片修补" class="headerlink" title="图片修补"></a>图片修补</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#制作一张损坏的图片</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)  # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">for i in range(1,100):  # 总共一百个像素点</span><br><span class="line">    img[500+i,500] = (255,255,255)  # 写入标准的白色</span><br><span class="line">cv2.imwrite(&apos;damaged.jpg&apos;,img)</span><br><span class="line"></span><br><span class="line">#修补损坏的图片</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;damaged.jpg&apos;,1)</span><br><span class="line">cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">paint = np.zeros((height,width,1),np.uint8)</span><br><span class="line"># 描绘图片坏的数组；进行修补</span><br><span class="line">for i in range(500,600):</span><br><span class="line">    paint[i,500] = 255</span><br><span class="line">cv2.imshow(&apos;paint&apos;,paint)</span><br><span class="line">#1 src 2 mask</span><br><span class="line">imgDst = cv2.inpaint(img,paint,3,cv2.INPAINT_TELEA)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;image&apos;,imgDst)</span><br><span class="line">cv2.imwrite(&apos;imgDst.jpg&apos;,imgDst)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure><img src="/2019/01/09/opencv图像美化/damaged.jpg" title="损坏的图片"> <img src="/2019/01/09/opencv图像美化/imgDst.jpg" title="修补后的图片"><h2 id="亮度增强"><a href="#亮度增强" class="headerlink" title="亮度增强"></a>亮度增强</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image2.jpg&apos;,1)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">dst = np.zeros((height,width,3),np.uint8)</span><br><span class="line">for i in range(0,height):</span><br><span class="line">    for j in range(0,width):</span><br><span class="line">        (b,g,r) = img[i,j]</span><br><span class="line">        bb = int(b)+40</span><br><span class="line">        gg = int(g)+40</span><br><span class="line">        rr = int(r)+40</span><br><span class="line">        if bb&gt;255:</span><br><span class="line">            bb = 255</span><br><span class="line">        if gg&gt;255:</span><br><span class="line">            gg = 255</span><br><span class="line">        if rr&gt;255:</span><br><span class="line">            rr = 255</span><br><span class="line">        dst[i,j] = (bb,gg,rr)</span><br><span class="line">cv2.imshow(&apos;dst3&apos;,dst)</span><br><span class="line">cv2.imwrite(&apos;dst3.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/09/opencv图像美化/image2.jpg" title="原始图片"> <img src="/2019/01/09/opencv图像美化/dst3.jpg" title="增强亮度的图片"><h2 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image1.jpg&apos;,1)</span><br><span class="line">cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">dst = cv2.GaussianBlur(img,(5,5),1.5)</span><br><span class="line">cv2.imwrite(&apos;dst4.jpg&apos;,dst)</span><br><span class="line">cv2.imshow(&apos;dst4&apos;,dst)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure><img src="/2019/01/09/opencv图像美化/image1.jpg" title="原始图片"> <img src="/2019/01/09/opencv图像美化/dst4.jpg" title="高斯滤波后的图片"><h2 id="均值滤波"><a href="#均值滤波" class="headerlink" title="均值滤波"></a>均值滤波</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 均值 6*6 1 。 * 【6*6】/36 = mean -》P</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;image1.jpg&apos;, 1)</span><br><span class="line">#cv2.imshow(&apos;src&apos;, img)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">dst = np.zeros((height, width, 3), np.uint8)</span><br><span class="line">for i in range(3, height - 3):</span><br><span class="line">    for j in range(3, width - 3):</span><br><span class="line">        sum_b = int(0)</span><br><span class="line">        sum_g = int(0)</span><br><span class="line">        sum_r = int(0)</span><br><span class="line">        for m in range(-3, 3):  # -3 -2 -1 0 1 2</span><br><span class="line">            for n in range(-3, 3):</span><br><span class="line">                (b, g, r) = img[i + m, j + n]</span><br><span class="line">                sum_b = sum_b + int(b)</span><br><span class="line">                sum_g = sum_g + int(g)</span><br><span class="line">                sum_r = sum_r + int(r)</span><br><span class="line"></span><br><span class="line">        b = np.uint8(sum_b / 36)</span><br><span class="line">        g = np.uint8(sum_g / 36)</span><br><span class="line">        r = np.uint8(sum_r / 36)</span><br><span class="line">        dst[i, j] = (b, g, r)</span><br><span class="line">cv2.imshow(&apos;dst5&apos;, dst)</span><br><span class="line">cv2.imwrite(&apos;dst5.jpg&apos;, dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/09/opencv图像美化/image1.jpg" title="原始图片"> <img src="/2019/01/09/opencv图像美化/dst5.jpg" title="均值滤波后的图片"><h2 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img = cv2.imread(&apos;image1.jpg&apos;,1)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[0]</span><br><span class="line">width = imgInfo[1]</span><br><span class="line">img = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)</span><br><span class="line">#cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">cv2.imwrite(&apos;src6.jpg&apos;,img)</span><br><span class="line">dst = np.zeros((height,width,3),np.uint8)</span><br><span class="line">collect = np.zeros(9,np.uint8)</span><br><span class="line">for i in range(1,height-1):</span><br><span class="line">    for j in range(1,width-1):</span><br><span class="line">        k = 0</span><br><span class="line">        for m in range(-1,2):</span><br><span class="line">            for n in range(-1,2):</span><br><span class="line">                gray = img[i+m,j+n]</span><br><span class="line">                collect[k] = gray</span><br><span class="line">                k = k+1</span><br><span class="line">        # 0 1 2 3 4 5 6 7 8</span><br><span class="line">        #   1 </span><br><span class="line">        for k in range(0,9):</span><br><span class="line">            p1 = collect[k]</span><br><span class="line">            for t in range(k+1,9):</span><br><span class="line">                if p1&lt;collect[t]:</span><br><span class="line">                    mid = collect[t]</span><br><span class="line">                    collect[t] = p1</span><br><span class="line">                    p1 = mid</span><br><span class="line">        dst[i,j] = collect[4]</span><br><span class="line">#cv2.imshow(&apos;dst&apos;,dst)</span><br><span class="line">cv2.imwrite(&apos;dst6.jpg&apos;,dst)</span><br></pre></td></tr></table></figure><img src="/2019/01/09/opencv图像美化/src6.jpg" title="灰度图片"> <img src="/2019/01/09/opencv图像美化/dst6.jpg" title="中值滤波后的灰度图片"><h2 id="皮肤磨皮美白-双边滤波"><a href="#皮肤磨皮美白-双边滤波" class="headerlink" title="皮肤磨皮美白-双边滤波"></a>皮肤磨皮美白-双边滤波</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">img = cv2.imread(&apos;image3.png&apos;,1)</span><br><span class="line">#cv2.imshow(&apos;src&apos;,img)</span><br><span class="line">dst = cv2.bilateralFilter(img,15,35,35) # 滤波函数</span><br><span class="line">#cv2.imshow(&apos;dst&apos;,dst)</span><br><span class="line">cv2.imwrite(&apos;dst7.png&apos;,dst)</span><br></pre></td></tr></table></figure><figure class="half">    <img src="https://jiangvia.oss-cn-shenzhen.aliyuncs.com/image3.png" title="美白前的图片">    <img src="https://jiangvia.oss-cn-shenzhen.aliyuncs.com/dst7.png" title="美白后的图片"></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;直方图均衡化-灰度&quot;&gt;&lt;a href=&quot;#直方图均衡化-灰度&quot; class=&quot;headerlink&quot; title=&quot;直方图均衡化-灰度&quot;&gt;&lt;/a&gt;直方图均衡化-灰度&lt;/h2&gt;&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
      <category term="计算机视觉" scheme="https://janvia.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="图像美化" scheme="https://janvia.github.io/tags/%E5%9B%BE%E5%83%8F%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>linux常用工具</title>
    <link href="https://janvia.github.io/2019/01/07/linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>https://janvia.github.io/2019/01/07/linux常用工具/</id>
    <published>2019-01-07T09:07:32.000Z</published>
    <updated>2019-01-07T09:17:38.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><h3 id="ubantu换源"><a href="#ubantu换源" class="headerlink" title="ubantu换源"></a>ubantu换源</h3><p>阿里源<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo python3 -c &quot;d=&apos;mirrors.aliyun.com&apos;;import re;from pathlib import Path;p=Path(&apos;/etc/apt/sources.list&apos;);s=p.read_text();bak=p.with_name(p.name+&apos;.bak&apos;);bak.exists() or bak.write_text(s);p.write_text(re.sub(r&apos;(cn.archive|security|archive)\.ubuntu\.com&apos;, d, s))&quot;</span><br></pre></td></tr></table></figure></p><h3 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h3><p>修改或创建 ~/.pip/pip.conf ：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><h3 id="tar格式"><a href="#tar格式" class="headerlink" title=".tar格式"></a>.tar格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打包</span><br><span class="line"> tar -cvf  文件名.tar   # 要打包的文件</span><br><span class="line"></span><br><span class="line"># 解包</span><br><span class="line"> tar  -xvf  文件名.tar</span><br><span class="line"></span><br><span class="line">#查看包里的内容</span><br><span class="line">tar -tvf 包的文件名.tar</span><br></pre></td></tr></table></figure><h3 id="gz格式"><a href="#gz格式" class="headerlink" title=".gz格式"></a>.gz格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zcvf  xxx.tar.gz  文件 # 压缩</span><br><span class="line">tar -zxvf  xxx.tar.gz 文件  # 解压</span><br><span class="line"># 解压到指定目录 </span><br><span class="line">tar -zxvf xxx.tar.gz -C dirname</span><br></pre></td></tr></table></figure><h3 id="bz2格式"><a href="#bz2格式" class="headerlink" title=".bz2格式"></a>.bz2格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -jcvf  xxx.tar.bz2  文件  # 压缩</span><br><span class="line">tar -jxvf  xxx.tar.bz2       # 解压</span><br></pre></td></tr></table></figure><h3 id="zip格式"><a href="#zip格式" class="headerlink" title=".zip格式"></a>.zip格式</h3><p>安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zip</span><br></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">压缩文件</span><br><span class="line">zip  压缩文件  源文件</span><br><span class="line"></span><br><span class="line">解压 </span><br><span class="line">unzip  压缩文件</span><br><span class="line">-d 解压到指定目录   如果目录不存在 会自动创建新目录 并压缩进去</span><br><span class="line">unzip test.zip -d filename</span><br></pre></td></tr></table></figure></p><h2 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h2><p>工作模式：命令模式、输入模式、末行模式</p><h3 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当打开一个文件时处于命令模式</span><br><span class="line">在命令模式下，按 i 进入输入模式</span><br><span class="line">在输入模式，按ESC回到命令模式。</span><br><span class="line">在命令模式下，按shift+; ，末行出现:冒号，则进入末行模式</span><br></pre></td></tr></table></figure><h3 id="进入与退出"><a href="#进入与退出" class="headerlink" title="进入与退出"></a>进入与退出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入</span><br><span class="line">    vim   filename</span><br><span class="line">退出</span><br><span class="line">    :wq    末行模式，wq 保存退出</span><br><span class="line">    :q       末行模式，q 直接退出</span><br><span class="line">    :q!      末行模式，q! 强制退出，不保存</span><br></pre></td></tr></table></figure><h3 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">复制和粘贴</span><br><span class="line">    yy    复制整行内容</span><br><span class="line">    3yy  复制3行内容</span><br><span class="line">    yw   复制当前光标到单词尾内容</span><br><span class="line"></span><br><span class="line">    p      粘贴</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除</span><br><span class="line">    dd  删除光标所在行</span><br><span class="line">    dw  删除一个单词</span><br><span class="line">    x     删除光标所在字符</span><br><span class="line">    u    撤销上一次操作</span><br><span class="line">    s     替换</span><br><span class="line">    ctrl + r    撤销</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找</span><br><span class="line">    /    命令模式下输入：/   向前搜索     不能空格</span><br><span class="line">    ?    命令模式下输入：?   向后搜索</span><br><span class="line"># / 方式</span><br><span class="line">    n    向下查找</span><br><span class="line">    N   向上查找</span><br><span class="line"># ? 方式</span><br><span class="line">    n    向上查找</span><br><span class="line">    N   向下查找</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;换源&quot;&gt;&lt;a href=&quot;#换源&quot; class=&quot;headerlink&quot; title=&quot;换源&quot;&gt;&lt;/a&gt;换源&lt;/h2&gt;&lt;h3 id=&quot;ubantu换源&quot;&gt;&lt;a href=&quot;#ubantu换源&quot; class=&quot;headerlink&quot; title=&quot;ubantu换源&quot;
      
    
    </summary>
    
      <category term="linux" scheme="https://janvia.github.io/categories/linux/"/>
    
    
      <category term="工具" scheme="https://janvia.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>opencv基础</title>
    <link href="https://janvia.github.io/2019/01/07/opencv/"/>
    <id>https://janvia.github.io/2019/01/07/opencv/</id>
    <published>2019-01-07T06:34:19.000Z</published>
    <updated>2019-01-09T14:17:43.506Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pip</span><br><span class="line">pip3 install opencv-python</span><br><span class="line"># conda</span><br><span class="line">conda install --channel https://conda.anaconda.org/menpo opencv3</span><br><span class="line"># conda虚拟环境</span><br><span class="line">source activate 环境名</span><br><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><h2 id="读取与展示"><a href="#读取与展示" class="headerlink" title="读取与展示"></a>读取与展示</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2  # 导入cv库</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;image0.jpg&apos;,1)  # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">cv2.imshow(&apos;image&apos;,img)  # 显示图片</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0) # 没有会一闪而过</span><br></pre></td></tr></table></figure><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2 # 导入cv库</span><br><span class="line">img = cv2.imread(&apos;image0.jpg&apos;,1) # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">cv2.imwrite(&apos;image1.jpg&apos;,img) # 写入文件名字 ， 图片数据</span><br></pre></td></tr></table></figure><h2 id="有损压缩"><a href="#有损压缩" class="headerlink" title="有损压缩"></a>有损压缩</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2 # 导入cv库</span><br><span class="line">img = cv2.imread(&apos;image0.jpg&apos;,1) # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">cv2.imwrite(&apos;imageTest.jpg&apos;,img,[cv2.IMWRITE_JPEG_QUALITY,50]) # 写入文件名字 ， 图片数据 ， 当前jpg图片保存的质量（范围0-100）</span><br><span class="line">#1M 100k 10k 0-100 有损压缩</span><br></pre></td></tr></table></figure><h2 id="无损压缩"><a href="#无损压缩" class="headerlink" title="无损压缩"></a>无损压缩</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1 无损 2 透明度属性</span><br><span class="line">import cv2  # 导入cv库</span><br><span class="line">img = cv2.imread(&apos;image0.jpg&apos;,1)  # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">cv2.imwrite(&apos;imageTest.png&apos;,img,[cv2.IMWRITE_PNG_COMPRESSION,0])  # 写入文件名字 ， 图片数据 ， 当前jpg图片保存的质量（范围0-100）</span><br><span class="line"># jpg 0 压缩比高0-100 png 0 压缩比低0-9</span><br></pre></td></tr></table></figure><h2 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2  # 导入cv库 </span><br><span class="line">img = cv2.imread(&apos;image0.jpg&apos;,1)  # 读取图片文件， 1：彩色， 0：灰色</span><br><span class="line">(b,g,r) = img[100,100] # 获取图片的（100,100）坐标的像素值，按照bgr的形式读取</span><br><span class="line">print(b,g,r)# bgr</span><br><span class="line">#10 100 --- 110 100</span><br><span class="line">for i in range(1,100):  # 总共一百个像素点</span><br><span class="line">    img[10+i,100] = (255,0,0)  # 写入标准的蓝色</span><br><span class="line">cv2.imshow(&apos;image&apos;,img)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;c
      
    
    </summary>
    
      <category term="计算机视觉" scheme="https://janvia.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="opencv" scheme="https://janvia.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>敬语</title>
    <link href="https://janvia.github.io/2019/01/06/%E6%95%AC%E8%AF%AD/"/>
    <id>https://janvia.github.io/2019/01/06/敬语/</id>
    <published>2019-01-06T04:11:05.000Z</published>
    <updated>2019-01-09T14:18:51.445Z</updated>
    
    <content type="html"><![CDATA[<p>敬语用于对会话中涉及的人物或者听话人表示敬意。现在日语的敬语大致分为四类：</p><p>①尊他语（尊敬語　そんけいご）：对他人的行为、状态及有关事物等表示敬意的语言。<br>②自谦语（謙譲語　けんじょうご）：以谦逊的态度叙述自己或自己一方的行为、状态及有关事物的语言。<br>③郑重语（丁寧語　ていねいご）：表示客气、有礼貌、文雅、郑重的态度的语言。如：です、ます、ましょう等。<br>④美化语（美化語 　びかご）：名词的接头接尾词，指令人听上去很优美很文雅的一些表达方式，给人优雅而又有教养的印象。<br><a id="more"></a></p><h2 id="尊他语"><a href="#尊他语" class="headerlink" title="尊他语"></a>尊他语</h2><h3 id="名词的尊他语"><a href="#名词的尊他语" class="headerlink" title="名词的尊他语"></a>名词的尊他语</h3><p>①加前缀或后缀：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前缀：</span><br><span class="line">お：お手紙、お話、お宅、お電話     （和语词，日常常用词）</span><br><span class="line">ご：ご案内、ご希望、ご協力　　　　 （汉语词）</span><br><span class="line"></span><br><span class="line">后缀：</span><br><span class="line">～さん          ：　山田さん、学生さん</span><br><span class="line">～様（さま）：　田中さま、二人さま</span><br><span class="line">～殿（どの）：　吉田殿、会長殿</span><br><span class="line"></span><br><span class="line">前后缀：</span><br><span class="line">お父さん（さま）：お母さん（さま）</span><br><span class="line">お嬢さん（さま）：お客さん（さま）</span><br></pre></td></tr></table></figure></p><p>②Ｎ本身变化<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">会社：貴社　　　宅：お住まい</span><br></pre></td></tr></table></figure></p><h3 id="形容词的尊他语"><a href="#形容词的尊他语" class="headerlink" title="形容词的尊他语"></a>形容词的尊他语</h3><p>お＋形容詞<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿ 歩くのがお速いですね。</span><br><span class="line">✿ 最近お忙しいですか。</span><br><span class="line">✿ お元気ですね。</span><br><span class="line">✿ お上手ですよ。</span><br></pre></td></tr></table></figure></p><h3 id="动词的尊他语"><a href="#动词的尊他语" class="headerlink" title="动词的尊他语"></a>动词的尊他语</h3><h4 id="一般动词"><a href="#一般动词" class="headerlink" title="一般动词"></a>一般动词</h4><p>お＋マス形＋になる<br>ご＋サ変动词词干＋になる<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿ 何時ごろお帰りになりますか。</span><br><span class="line">✿ 先生がご案内になってくださったのです。</span><br></pre></td></tr></table></figure></p><h4 id="特殊动词"><a href="#特殊动词" class="headerlink" title="特殊动词"></a>特殊动词</h4><img src="/2019/01/06/敬语/特殊动词尊他.png" title="特殊动词的尊他语"><h3 id="请求的尊他表示"><a href="#请求的尊他表示" class="headerlink" title="请求的尊他表示"></a>请求的尊他表示</h3><p>用于请求对方做某事。<br>汉语：请您~<br>接续：お＋マス形＋ください<br>      ご＋サ変动词词干＋ください<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿ あしたの会議、ぜひご参加ください。</span><br><span class="line">✿ もう大丈夫ですので、どうぞご安心ください。</span><br><span class="line">✿ どうぞ、おかけください。</span><br></pre></td></tr></table></figure></p><p>★ 特殊词的接续：特殊词て型＋ください</p><h3 id="其他尊他语形式"><a href="#其他尊他语形式" class="headerlink" title="其他尊他语形式"></a>其他尊他语形式</h3><p>１、お（ご）　+　ＶＲ（サ変語幹）+　なさる<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">お帰りなさる</span><br><span class="line">ご心配なさる</span><br><span class="line">あなたが行けば、おばあさんはきっとお喜びなさるでしょう。</span><br></pre></td></tr></table></figure></p><p>２、お（ご）　+　ＶＲ（サ変語幹）+　です<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">お客さんがこちらでお待ちです。  客人们请在这里等候。</span><br><span class="line">お父さんはご在宅ですか。        您父亲在家吗。</span><br></pre></td></tr></table></figure></p><h2 id="谦让语"><a href="#谦让语" class="headerlink" title="谦让语"></a>谦让语</h2><h3 id="名词的自谦"><a href="#名词的自谦" class="headerlink" title="名词的自谦"></a>名词的自谦</h3><p>Ｎ本身变化<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">わたくし</span><br><span class="line"></span><br><span class="line">茶：粗茶（そちゃ①０）</span><br><span class="line">贈り物：つまらない物</span><br><span class="line">当社：弊社（へいしゃ①）</span><br><span class="line">妻：愚妻（ぐさい０）</span><br></pre></td></tr></table></figure></p><h3 id="动词的自谦"><a href="#动词的自谦" class="headerlink" title="动词的自谦"></a>动词的自谦</h3><h4 id="一般动词-1"><a href="#一般动词-1" class="headerlink" title="一般动词"></a>一般动词</h4><p>接续：<br>お＋マス形＋　する/いたす<br>ご＋サ変动词词干＋する/いたす </p><p>★「いたす」自谦程度更高<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿ 授業の後で　お電話します。</span><br><span class="line">✿ それでは　お願いいたします。</span><br></pre></td></tr></table></figure></p><p>★自谦句形不能用在单纯的说话人自己本身的行为动作及不涉及对方的行为动作上。<br>★必须用在与对方有关的自己的动作上。</p><h4 id="特殊动词-1"><a href="#特殊动词-1" class="headerlink" title="特殊动词"></a>特殊动词</h4><img src="/2019/01/06/敬语/特殊动词自谦.png" title="特殊动词的自谦语"><h3 id="其他自谦语形式"><a href="#其他自谦语形式" class="headerlink" title="其他自谦语形式"></a>其他自谦语形式</h3><p>１、お（ご）　+　ＶＲ（サ変語幹）+　申し上げる<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">お客様を空港までお見送り申し上げます。把客人送到机场</span><br><span class="line">ご援助申し上げるつもりでございます。   我愿意为您效劳</span><br></pre></td></tr></table></figure></p><h2 id="郑重语"><a href="#郑重语" class="headerlink" title="郑重语"></a>郑重语</h2><p>郑重语不是对话题人物的尊敬，也不是对自己的自谦，而是用郑重地说话来表示对听话人的尊重。也是表示自己有高雅教养的表现。</p><p>郑重语的最基本的表现是です和ます。</p><p>其他还有ござる、まいる、いたす、おる等。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✿ これが弟の写真です。</span><br><span class="line">✿ 私の父でございます。</span><br><span class="line">✿ 雪が降ってまいりました。</span><br><span class="line">✿ 何か変な匂いがいたしますよ。</span><br><span class="line">✿ 用意が出来ておりました。</span><br></pre></td></tr></table></figure></p><h2 id="美化语"><a href="#美化语" class="headerlink" title="美化语"></a>美化语</h2><p>①加前缀：（同名词的尊他变形）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">お：お手紙、お話、お宅、お電話     （和语词，日常常用词）</span><br><span class="line">ご：ご案内、ご希望、ご協力　　　　 （汉语词）</span><br></pre></td></tr></table></figure></p><p>②Ｎ本身变化<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">めし：ご飯</span><br><span class="line">腹（はら）：お腹（おなか）</span><br><span class="line">便所（べんじょ）：お手洗い</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;敬语用于对会话中涉及的人物或者听话人表示敬意。现在日语的敬语大致分为四类：&lt;/p&gt;
&lt;p&gt;①尊他语（尊敬語　そんけいご）：对他人的行为、状态及有关事物等表示敬意的语言。&lt;br&gt;②自谦语（謙譲語　けんじょうご）：以谦逊的态度叙述自己或自己一方的行为、状态及有关事物的语言。&lt;br&gt;③郑重语（丁寧語　ていねいご）：表示客气、有礼貌、文雅、郑重的态度的语言。如：です、ます、ましょう等。&lt;br&gt;④美化语（美化語 　びかご）：名词的接头接尾词，指令人听上去很优美很文雅的一些表达方式，给人优雅而又有教养的印象。&lt;br&gt;
    
    </summary>
    
      <category term="日语" scheme="https://janvia.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="敬语" scheme="https://janvia.github.io/tags/%E6%95%AC%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>linux基础命令</title>
    <link href="https://janvia.github.io/2019/01/05/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://janvia.github.io/2019/01/05/linux常用命令/</id>
    <published>2019-01-05T09:16:43.000Z</published>
    <updated>2019-01-09T14:17:00.408Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutdown now # 关机</span><br><span class="line">shutdown -h 30 # 30分钟后关机 </span><br><span class="line">shutdown -r now # 重启</span><br><span class="line">shutdown -r 05:30 # 于05:30重启</span><br><span class="line">shutdown -c # 取消关机</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>/bin： bin是Binary的缩写, 这个目录存放着最经常使用的命令。</p><p>/boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p>/dev ： dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p><p>/etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p><p>/home： 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p><p>/lib： 这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><p>/lost+found： 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p>/media： linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p><p>/mnt： 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p><p>/opt： 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p><p>/proc： 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></p><p>/root： 该目录为系统管理员，也称作超级权限者的用户主目录。</p><p>/sbin： s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><p>/selinux： 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p><p>/srv： 该目录存放一些服务启动之后需要提取的数据。</p><p>/sys： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p><p>sysfs文件系统集成了下面3种文件系统的信息：<br>针对进程信息的proc文件系统</p><p>针对设备的devfs文件系统</p><p>针对伪终端的devpts文件系统。<br>/tmp： 这个目录是用来存放一些临时文件的。<br>/usr： 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。<br>/usr/bin： 系统用户使用的应用程序。<br>/usr/sbin： 超级用户使用的比较高级的管理程序和系统守护程序。<br>/usr/src：内核源代码默认的放置目录。<br>/var： 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p><h3 id="显示文件目录"><a href="#显示文件目录" class="headerlink" title="显示文件目录"></a>显示文件目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">-a 列出隐藏文件，文件中以“.”开头的均为隐藏文件，如：~/.bashrc</span><br><span class="line"></span><br><span class="line">-l 列出文件的详细信息</span><br><span class="line"></span><br><span class="line">-R 连同子目录中的内容一起列出</span><br></pre></td></tr></table></figure><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-rwx-rwx-rwx </span><br><span class="line"># 第一个代表文件类型</span><br><span class="line"># 代表所有者的权限 </span><br><span class="line"># 代表所属组的权限</span><br><span class="line"># 代表其他人的权限</span><br></pre></td></tr></table></figure><h3 id="改变权限"><a href="#改变权限" class="headerlink" title="改变权限"></a>改变权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r 读取权限  如果没有r 就不能 ls 查看里面的内容   对应数字 4</span><br><span class="line">w 写权限    如果没有w 就不能在目录下创建新的文件  对应数字 2</span><br><span class="line">x 执行权限  如果没有x 就不能cd进入这个目录 对应数字 1</span><br><span class="line">- 没权限  对应数字 0</span><br><span class="line">chmod 777 filename</span><br><span class="line">rwx-rwx-rwx</span><br></pre></td></tr></table></figure><h3 id="切换文件夹"><a href="#切换文件夹" class="headerlink" title="切换文件夹"></a>切换文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd filename  # 进入文件-filename：文件名</span><br><span class="line"></span><br><span class="line">cd -  # 返回上一次进入的目录</span><br><span class="line"></span><br><span class="line">cd ~  # 进入根目录</span><br><span class="line"></span><br><span class="line">cd .. # 返回上级目录</span><br></pre></td></tr></table></figure><h3 id="查看当前路径"><a href="#查看当前路径" class="headerlink" title="查看当前路径"></a>查看当前路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir filename # 创建一个filename的文件</span><br></pre></td></tr></table></figure><h3 id="删除空目录"><a href="#删除空目录" class="headerlink" title="删除空目录"></a>删除空目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rmdir filename # 删除一个空的filename的文件</span><br></pre></td></tr></table></figure><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>复制文件或目录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp file1 file2</span><br><span class="line"></span><br><span class="line">cp file1 dir/</span><br><span class="line"></span><br><span class="line">cp file1 ../</span><br></pre></td></tr></table></figure></p><p>拷贝目录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp dir1 dir2 -r</span><br><span class="line"></span><br><span class="line">cp dir1 ~/ -r</span><br></pre></td></tr></table></figure></p><h3 id="删除文件或目录"><a href="#删除文件或目录" class="headerlink" title="删除文件或目录"></a>删除文件或目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -r  # 递归删除文件</span><br><span class="line">rm -rf # 强制删除文件*****</span><br></pre></td></tr></table></figure><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><p>从第一行开始；“-b”显示行号<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat file  # 一次查看所有的文件</span><br><span class="line">cat file1  file2   # 一次查看两个命令</span><br></pre></td></tr></table></figure></p><p>从最后一行开始<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tac filename</span><br></pre></td></tr></table></figure></p><p>显示的时候，顺道输出行号！<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nl filename</span><br></pre></td></tr></table></figure></p><p>一页一页的显示文件内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">more filename</span><br></pre></td></tr></table></figure></p><p>按Space键：显示文本的下一屏内容。</p><p>按Enier键：只显示文本的下一行内容。</p><p>按斜线符/：接着输入一个模式，可以在文本中寻找下一个相匹配的模式。</p><p>按H键：显示帮助屏，该屏上有相关的帮助信息。</p><p>按B键：显示上一屏内容。</p><p>按Q键：退出more命令。</p><h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which command  # 查看    -二进制文件</span><br><span class="line">whereis 可执行文件    # 二进制文件 、man手册</span><br><span class="line"></span><br><span class="line">帮助文档：</span><br><span class="line">1.man手册  ，帮助文档    man  ls</span><br><span class="line">2.--help   , ls --help</span><br></pre></td></tr></table></figure><h3 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find 路径  参数</span><br><span class="line"># 常用参数 </span><br><span class="line">-name   # 按照名字</span><br><span class="line">-size   # 按照大小</span><br><span class="line">find ./  -size +100k -size -10M  # 在当前目录下找大于100k 小于 10的文件</span><br></pre></td></tr></table></figure><h3 id="文本搜索"><a href="#文本搜索" class="headerlink" title="文本搜索"></a>文本搜索</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep  &apos;content&apos;  filename</span><br><span class="line"># 常用参数</span><br><span class="line">-v    显示不包含匹配文本的所有‘行’ (求反)</span><br><span class="line">-n    显示匹配行及行号</span><br><span class="line">-i    忽略大小写</span><br><span class="line"># 内容参数</span><br><span class="line">^wu  行首 搜索以wu开头的行</span><br><span class="line">wh$  行尾 索以wh结束的行</span><br></pre></td></tr></table></figure><h3 id="创建链接文件"><a href="#创建链接文件" class="headerlink" title="创建链接文件"></a>创建链接文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln  file  hardlink # 硬链接</span><br><span class="line">ln -s  file softlink  # 软链接</span><br></pre></td></tr></table></figure><p>软链接: 相当于 window上的快捷方式 源文件删除则软链接失效</p><p>硬链接: 硬链接只能连接普通的文件 不能连接目录</p><p>注意 如果软链接文件和源文件不在同一个目录 源文件要使用绝对路径 不能使用相对路径</p><h3 id="创建别名"><a href="#创建别名" class="headerlink" title="创建别名"></a>创建别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias     # 查看所有别名   alias c4=&apos;cat 4.txt&apos;</span><br><span class="line"></span><br><span class="line">unalias   # 删除别名</span><br></pre></td></tr></table></figure><p>注意 这种定义别名的方式 只在当前登录有效 如果要永久定义生效 可以通过修改~/.bashrc文件 这个修改要下次登录才能生效 想要立即生效 可以输入source ~/.bashrc</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;电源管理&quot;&gt;&lt;a href=&quot;#电源管理&quot; class=&quot;headerlink&quot; title=&quot;电源管理&quot;&gt;&lt;/a&gt;电源管理&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="linux" scheme="https://janvia.github.io/categories/linux/"/>
    
    
      <category term="linux命令" scheme="https://janvia.github.io/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
